{"ast":null,"code":"import { createReducer, on } from \"@ngrx/store\";\nimport { loadProjects, loadProjectsFailure, loadProjectsSuccess, setProject, setProjectFailure, setProjectSuccess } from \"./project.actions\";\nconst initialState = {\n  projects: [],\n  currentProject: null,\n  error: null\n};\nexport const projectReducer = createReducer(initialState, on(loadProjects, state => state), on(loadProjectsSuccess, (state, action) => {\n  return {\n    ...state,\n    projects: action.data\n  };\n}), on(loadProjectsFailure, (state, action) => state), on(setProject, (state, action) => state), on(setProjectSuccess, (state, action) => {\n  // const project = state.projects.find((project: IProject) => project.id === action.projectId);\n  // project & localStorage.setItem('project', JSON.stringify(project));\n  return {\n    ...state,\n    currentProject: action.data || null\n  };\n}), on(setProjectFailure, (state, action) => state));","map":{"version":3,"mappings":"AAAA,SAAQA,aAAa,EAAEC,EAAE,QAAO,aAAa;AAC7C,SACIC,YAAY,EACZC,mBAAmB,EACnBC,mBAAmB,EACnBC,UAAU,EACVC,iBAAiB,EACjBC,iBAAiB,QACd,mBAAmB;AAQ1B,MAAMC,YAAY,GAAwB;EACtCC,QAAQ,EAAE,EAAE;EACZC,cAAc,EAAE,IAAI;EACpBC,KAAK,EAAE;CACV;AACD,OAAO,MAAMC,cAAc,GAAGZ,aAAa,CACvCQ,YAAY,EACZP,EAAE,CAACC,YAAY,EAAEW,KAAK,IAAIA,KAAK,CAAC,EAChCZ,EAAE,CAACG,mBAAmB,EAAE,CAACS,KAAK,EAAEC,MAAM,KAAI;EACtC,OAAO;IACH,GAAGD,KAAK;IACRJ,QAAQ,EAAEK,MAAM,CAACC;GACpB;AACL,CAAC,CACA,EACDd,EAAE,CAACE,mBAAmB,EAAE,CAACU,KAAK,EAAEC,MAAM,KAAKD,KAAK,CAAC,EACjDZ,EAAE,CAACI,UAAU,EAAE,CAACQ,KAAK,EAAEC,MAAM,KAAKD,KAAK,CAAC,EACxCZ,EAAE,CAACM,iBAAiB,EAAE,CAACM,KAAK,EAAEC,MAAM,KAAI;EAEpC;EACA;EACA,OAAO;IACH,GAAGD,KAAK;IACRH,cAAc,EAAEI,MAAM,CAACC,IAAI,IAAI;GAClC;AACD,CAAC,CACJ,EACDd,EAAE,CAACK,iBAAiB,EAAE,CAACO,KAAK,EAAEC,MAAM,KAAKD,KAAK,CAAC,CAClD","names":["createReducer","on","loadProjects","loadProjectsFailure","loadProjectsSuccess","setProject","setProjectFailure","setProjectSuccess","initialState","projects","currentProject","error","projectReducer","state","action","data"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/store/rxProject/project.reducer.ts"],"sourcesContent":["import {createReducer, on} from \"@ngrx/store\";\nimport {\n    loadProjects,\n    loadProjectsFailure,\n    loadProjectsSuccess,\n    setProject,\n    setProjectFailure,\n    setProjectSuccess\n} from \"./project.actions\";\nimport {IProject} from \"../../core/interfaces/iproject\";\n\nexport interface ProjectStateModule {\n    projects: IProject[];\n    currentProject: IProject | null;\n    error: any;\n}\nconst initialState : ProjectStateModule = {\n    projects: [],\n    currentProject: null,\n    error: null\n};\nexport const projectReducer = createReducer(\n    initialState,\n    on(loadProjects, state => state),\n    on(loadProjectsSuccess, (state, action) => {\n        return {\n            ...state,\n            projects: action.data\n        };\n    }\n    ),\n    on(loadProjectsFailure, (state, action) => state),\n    on(setProject, (state, action) => state),\n    on(setProjectSuccess, (state, action) => {\n\n        // const project = state.projects.find((project: IProject) => project.id === action.projectId);\n        // project & localStorage.setItem('project', JSON.stringify(project));\n        return {\n            ...state,\n            currentProject: action.data || null\n        };\n        }\n    ),\n    on(setProjectFailure, (state, action) => state),\n);"]},"metadata":{},"sourceType":"module","externalDependencies":[]}