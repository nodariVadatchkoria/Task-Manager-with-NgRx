{"ast":null,"code":"import { of, Subject, takeUntil } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class ValidCounterService {\n  constructor() {\n    this.firstChecked = false;\n    this.array = [];\n    this.arraySubject = new Subject();\n    this.counter = 0;\n    this.controls = 0;\n    this.sub$ = new Subject();\n  }\n  validCounter(formGroup, index) {\n    this.button = document.querySelectorAll('.next-button');\n    if (!this.firstChecked) {\n      this.firstCheck(formGroup, index);\n    }\n    for (let i = 0; i < Object.keys(formGroup.value).length; i++) {\n      formGroup.get(Object.keys(formGroup.value)[i])?.valueChanges.pipe(takeUntil(this.sub$)).subscribe(c => {\n        this.counter = 0;\n        this.array = [];\n        this.firstCheck(formGroup, index);\n      });\n    }\n  }\n  firstCheck(formGroup, index) {\n    this.controls = Object.keys(formGroup.value).length;\n    this.firstChecked = true;\n    for (let i = 0; i < Object.keys(formGroup.value).length; i++) {\n      of(formGroup.get(Object.keys(formGroup.value)[i])).pipe(takeUntil(this.sub$)).subscribe(control => {\n        if (control?.valid) {\n          this.counter++;\n          this.array.push(this.counter);\n          this.arraySubject.next(this.array);\n        }\n      });\n    }\n    this.setButtonWidth(index);\n  }\n  setButtonWidth(index) {\n    const button = this.button[index];\n    button.style.width = this.counter / this.controls * 100 + '%';\n  }\n  ngOnDestroy() {\n    this.sub$.next(null);\n    this.sub$.complete();\n  }\n}\nValidCounterService.ɵfac = function ValidCounterService_Factory(t) {\n  return new (t || ValidCounterService)();\n};\nValidCounterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ValidCounterService,\n  factory: ValidCounterService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAQA,EAAE,EAAEC,OAAO,EAAEC,SAAS,QAAO,MAAM;;AAM3C,OAAM,MAAOC,mBAAmB;EAE9BC;IAGA,iBAAY,GAAY,KAAK;IAC7B,UAAK,GAAa,EAAE;IACpB,iBAAY,GAAG,IAAIH,OAAO,EAAY;IACtC,YAAO,GAAG,CAAC;IACX,aAAQ,GAAG,CAAC;IAGJ,SAAI,GAAG,IAAIA,OAAO,EAAE;EAT5B;EAWAI,YAAY,CAACC,SAAoB,EAAEC,KAAa;IAC9C,IAAI,CAACC,MAAM,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,cAAc,CAAC;IACvD,IAAI,CAAC,IAAI,CAACC,YAAY,EAAE;MACtB,IAAI,CAACC,UAAU,CAACN,SAAS,EAAEC,KAAK,CAAC;;IAEnC,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,MAAM,CAACC,IAAI,CAACT,SAAS,CAACU,KAAK,CAAC,CAACC,MAAM,EAAEJ,CAAC,EAAE,EAAE;MAC5DP,SAAS,CAACY,GAAG,CAACJ,MAAM,CAACC,IAAI,CAACT,SAAS,CAACU,KAAK,CAAC,CAACH,CAAC,CAAC,CAAC,EAAEM,YAAY,CACzDC,IAAI,CAAClB,SAAS,CAAC,IAAI,CAACmB,IAAI,CAAC,CAAC,CAC1BC,SAAS,CAACC,CAAC,IAAG;QACb,IAAI,CAACC,OAAO,GAAG,CAAC;QAChB,IAAI,CAACC,KAAK,GAAG,EAAE;QACf,IAAI,CAACb,UAAU,CAACN,SAAS,EAAEC,KAAK,CAAC;MACnC,CAAC,CAAC;;EAER;EAEAK,UAAU,CAACN,SAAoB,EAAEC,KAAa;IAC5C,IAAI,CAACmB,QAAQ,GAAGZ,MAAM,CAACC,IAAI,CAACT,SAAS,CAACU,KAAK,CAAC,CAACC,MAAM;IACnD,IAAI,CAACN,YAAY,GAAG,IAAI;IACxB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,MAAM,CAACC,IAAI,CAACT,SAAS,CAACU,KAAK,CAAC,CAACC,MAAM,EAAEJ,CAAC,EAAE,EAAE;MAC5Db,EAAE,CAACM,SAAS,CAACY,GAAG,CAACJ,MAAM,CAACC,IAAI,CAACT,SAAS,CAACU,KAAK,CAAC,CAACH,CAAC,CAAC,CAAC,CAAC,CAC/CO,IAAI,CAAClB,SAAS,CAAC,IAAI,CAACmB,IAAI,CAAC,CAAC,CAC1BC,SAAS,CAACK,OAAO,IAAG;QACnB,IAAIA,OAAO,EAAEC,KAAK,EAAE;UAClB,IAAI,CAACJ,OAAO,EAAE;UACd,IAAI,CAACC,KAAK,CAACI,IAAI,CAAC,IAAI,CAACL,OAAO,CAAC;UAC7B,IAAI,CAACM,YAAY,CAACC,IAAI,CAAC,IAAI,CAACN,KAAK,CAAC;;MAEtC,CAAC,CAAC;;IAGN,IAAI,CAACO,cAAc,CAACzB,KAAK,CAAC;EAC5B;EAEAyB,cAAc,CAACzB,KAAa;IAC1B,MAAMC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACD,KAAK,CAAgB;IAChDC,MAAM,CAACyB,KAAK,CAACC,KAAK,GAAG,IAAI,CAACV,OAAO,GAAG,IAAI,CAACE,QAAQ,GAAG,GAAG,GAAG,GAAG;EAC/D;EAEAS,WAAW;IACT,IAAI,CAACd,IAAI,CAACU,IAAI,CAAC,IAAI,CAAC;IACpB,IAAI,CAACV,IAAI,CAACe,QAAQ,EAAE;EACtB;;AAxDWjC,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAkC,SAAnBlC,mBAAmB;EAAAmC,YAFlB;AAAM","names":["of","Subject","takeUntil","ValidCounterService","constructor","validCounter","formGroup","index","button","document","querySelectorAll","firstChecked","firstCheck","i","Object","keys","value","length","get","valueChanges","pipe","sub$","subscribe","c","counter","array","controls","control","valid","push","arraySubject","next","setButtonWidth","style","width","ngOnDestroy","complete","factory","providedIn"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/core/services/valid-counter.service.ts"],"sourcesContent":["import {Injectable, OnDestroy} from '@angular/core';\nimport {of, Subject, takeUntil} from \"rxjs\";\nimport {FormGroup} from \"@angular/forms\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidCounterService implements OnDestroy {\n\n  constructor() {\n  }\n\n  firstChecked: boolean = false;\n  array: number[] = []\n  arraySubject = new Subject<number[]>()\n  counter = 0;\n  controls = 0;\n  button?: any;\n\n  private sub$ = new Subject();\n\n  validCounter(formGroup: FormGroup, index: number) {\n    this.button = document.querySelectorAll('.next-button');\n    if (!this.firstChecked) {\n      this.firstCheck(formGroup, index)\n    }\n    for (let i = 0; i < Object.keys(formGroup.value).length; i++) {\n      formGroup.get(Object.keys(formGroup.value)[i])?.valueChanges\n        .pipe(takeUntil(this.sub$))\n        .subscribe(c => {\n          this.counter = 0;\n          this.array = [];\n          this.firstCheck(formGroup, index);\n        })\n    }\n  }\n\n  firstCheck(formGroup: FormGroup, index: number) {\n    this.controls = Object.keys(formGroup.value).length;\n    this.firstChecked = true;\n    for (let i = 0; i < Object.keys(formGroup.value).length; i++) {\n      of(formGroup.get(Object.keys(formGroup.value)[i]))\n        .pipe(takeUntil(this.sub$))\n        .subscribe(control => {\n          if (control?.valid) {\n            this.counter++;\n            this.array.push(this.counter);\n            this.arraySubject.next(this.array);\n          }\n        })\n    }\n\n    this.setButtonWidth(index)\n  }\n\n  setButtonWidth(index: number) {\n    const button = this.button[index] as HTMLElement;\n    button.style.width = this.counter / this.controls * 100 + '%';\n  }\n\n  ngOnDestroy(): void {\n    this.sub$.next(null);\n    this.sub$.complete();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}