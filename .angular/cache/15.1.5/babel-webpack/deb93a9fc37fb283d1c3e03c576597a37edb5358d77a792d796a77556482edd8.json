{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { loadProjects, loadProjectsFailure, loadProjectsSuccess } from \"./project.actions\";\nimport { catchError, of, switchMap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../core/services/project.service\";\nexport class ProjectEffects {\n  constructor(actions$, projectService) {\n    this.actions$ = actions$;\n    this.projectService = projectService;\n    this.lodProjects$ = createEffect(() => this.actions$.pipe(ofType(loadProjects), switchMap(() => this.projectService.getAllProjects().pipe(map(data => loadProjectsSuccess({\n      data\n    })), catchError(error => of(loadProjectsFailure({\n      error\n    })))))));\n  }\n}\nProjectEffects.ɵfac = function ProjectEffects_Factory(t) {\n  return new (t || ProjectEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ProjectService));\n};\nProjectEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProjectEffects,\n  factory: ProjectEffects.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAiBA,YAAY,EAAEC,MAAM,QAAO,eAAe;AAE3D,SAAQC,YAAY,EAAEC,mBAAmB,EAAEC,mBAAmB,QAAO,mBAAmB;AACxF,SAAQC,UAAU,EAAEC,EAAE,EAAEC,SAAS,QAAO,MAAM;;;;AAG9C,OAAM,MAAOC,cAAc;EACvBC,YACYC,QAAiB,EACjBC,cAA8B;IAD9B,aAAQ,GAARD,QAAQ;IACR,mBAAc,GAAdC,cAAc;IAI9B,iBAAY,GAAGX,YAAY,CAAC,MAAM,IAAI,CAACU,QAAQ,CAACE,IAAI,CAChDX,MAAM,CAACC,YAAY,CAAC,EACpBK,SAAS,CAAC,MAAM,IAAI,CAACI,cAAc,CAACE,cAAc,EAAE,CAC/CD,IAAI,CACDE,GAAG,CAAEC,IAAS,IAAKX,mBAAmB,CAAC;MAACW;IAAI,CAAC,CAAC,CAAC,EAC/CV,UAAU,CAAEW,KAAK,IAAKV,EAAE,CAACH,mBAAmB,CAAC;MAACa;IAAK,CAAC,CAAC,CAAC,CAAC,CAC1D,CAAC,CACL,CACJ;EAVG;;AALSR,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAS,SAAdT,cAAc;AAAA","names":["createEffect","ofType","loadProjects","loadProjectsFailure","loadProjectsSuccess","catchError","of","switchMap","ProjectEffects","constructor","actions$","projectService","pipe","getAllProjects","map","data","error","factory"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/store/rxProject/project.effect.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Actions, createEffect, ofType} from \"@ngrx/effects\";\nimport {ProjectService} from \"../../core/services/project.service\";\nimport {loadProjects, loadProjectsFailure, loadProjectsSuccess} from \"./project.actions\";\nimport {catchError, of, switchMap} from \"rxjs\";\n\n@Injectable()\nexport class ProjectEffects{\n    constructor(\n        private actions$: Actions,\n        private projectService: ProjectService,\n    ) {\n    }\n\nlodProjects$ = createEffect(() => this.actions$.pipe(\n    ofType(loadProjects),\n    switchMap(() => this.projectService.getAllProjects()\n        .pipe(\n            map((data: any) => loadProjectsSuccess({data})),\n            catchError((error) => of(loadProjectsFailure({error})))\n        ))\n    )\n);\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}