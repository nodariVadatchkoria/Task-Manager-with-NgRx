{"ast":null,"code":"import { BehaviorSubject, catchError, filter, finalize, of, switchMap, take } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services\";\nimport * as i2 from \"../services/cookie.service\";\nexport class AuthInterceptor {\n  static addTokenRequest(request, token) {\n    if (token) {\n      return request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return request;\n  }\n  constructor(authService, cookieService) {\n    this.authService = authService;\n    this.cookieService = cookieService;\n    this.isRefreshingToken = false;\n    this.tokenSubject = new BehaviorSubject(null);\n  }\n  intercept(request, next) {\n    const accessToken = this.cookieService.getCookie('token'); //accesTokenit ar inaxavdi cookieshi magitom ar atanda tokens\n    if (accessToken) {\n      request = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${accessToken}`)\n      });\n    }\n    return next.handle(request).pipe(catchError(err => {\n      switch (err.status) {\n        case 401:\n          return this.handle401Error(request, next);\n      }\n      const error = err.error.message || err.statusText;\n      return error;\n    }));\n  }\n  handle401Error(request, next) {\n    if (!this.isRefreshingToken) {\n      this.isRefreshingToken = true;\n      this.tokenSubject.next(null);\n      return this.authService.refreshToken(this.authService.getRefreshToken() || '').pipe(switchMap(token => {\n        if (token) {\n          this.tokenSubject.next(token.accessToken);\n          return next.handle(AuthInterceptor.addTokenRequest(request, token.accessToken));\n        }\n        this.authService.logout();\n        return of(false);\n      }), catchError(err => {\n        this.authService.logout();\n        return of(false);\n      }), finalize(() => {\n        this.isRefreshingToken = false;\n      }));\n    } else {\n      return this.tokenSubject.pipe(filter(token => token != null), take(1), switchMap(token => {\n        return next.handle(AuthInterceptor.addTokenRequest(request, token));\n      }), catchError(err => {\n        this.authService.logout();\n        return of(false);\n      }));\n    }\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.CookieService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","catchError","filter","finalize","of","switchMap","take","AuthInterceptor","addTokenRequest","request","token","clone","setHeaders","Authorization","constructor","authService","cookieService","intercept","next","accessToken","getCookie","headers","set","handle","pipe","err","status","handle401Error","error","message","statusText","isRefreshingToken","tokenSubject","refreshToken","getRefreshToken","logout","factory"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/core/interceptors/auth.interceptor.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpRequest, HttpHandler, HttpInterceptor, HttpEvent\n} from '@angular/common/http';\nimport {BehaviorSubject,\n  catchError,\n  filter, finalize, Observable, of,\n  switchMap, take, } from 'rxjs';\nimport {AuthService} from \"../services\";\nimport {CookieService} from \"../services/cookie.service\";\n\n\n\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  isRefreshingToken = false;\n  tokenSubject: BehaviorSubject<string | null> = new BehaviorSubject<\n    string | null\n  >(null);\n\n  static addTokenRequest(\n    request: HttpRequest<any>,\n    token: string | null\n  ): HttpRequest<any> {\n    if (token) {\n      return request.clone({\n        setHeaders: { Authorization: `Bearer ${token}` },\n      });\n    }\n    return request;\n  }\n\n  constructor(\n    private authService: AuthService,\n    private cookieService: CookieService\n  ) {\n  }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>>\n  | any\n  {\n    const accessToken = this.cookieService.getCookie('token');  //accesTokenit ar inaxavdi cookieshi magitom ar atanda tokens\n    if (accessToken) {\n      request = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${accessToken}`)\n      })\n    }\n    return next.handle(request).pipe(\n      catchError((err) => {\n        switch (err.status) {\n          case 401:\n            return this.handle401Error(request, next);\n        }\n        const error = err.error.message || err.statusText;\n        return error;\n      })\n    );\n  }\n\n  handle401Error(request: HttpRequest<unknown>, next: HttpHandler) {\n    if (!this.isRefreshingToken) {\n      this.isRefreshingToken = true;\n      this.tokenSubject.next(null);\n      return this.authService\n        .refreshToken(this.authService.getRefreshToken() || '')\n        .pipe(\n          switchMap((token: any) => {\n            if (token) {\n              this.tokenSubject.next(token.accessToken);\n              return next.handle(\n                AuthInterceptor.addTokenRequest(request, token.accessToken)\n              );\n            }\n            this.authService.logout();\n            return of(false);\n          }),\n          catchError((err) => {\n            this.authService.logout();\n            return of(false);\n          }),\n          finalize(() => {\n            this.isRefreshingToken = false;\n          })\n        );\n    } else {\n      return this.tokenSubject.pipe(\n        filter((token) => token != null),\n        take(1),\n        switchMap((token) => {\n          return next.handle(AuthInterceptor.addTokenRequest(request, token));\n        }),\n        catchError((err) => {\n          this.authService.logout();\n          return of(false);\n        })\n      );\n    }\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}