{"ast":null,"code":"import { createReducer, on } from \"@ngrx/store\";\nimport { loadProjects, loadProjectsFailure, loadProjectsSuccess, setProject } from \"./project.actions\";\nconst initialState = {\n  projects: [],\n  currentProject: null\n};\nexport const projectReducer = createReducer(initialState, on(loadProjects, state => state), on(loadProjectsSuccess, (state, action) => {\n  return {\n    ...state,\n    projects: action.data\n  };\n}), on(loadProjectsFailure, (state, action) => state), on(setProject, (state, action) => {\n  const project = state.projects.find(project => project.id === action.projectId);\n  project & localStorage.setItem('currentProject', JSON.stringify(project));\n  return {\n    ...state,\n    currentProject: action.projectId\n  };\n}));","map":{"version":3,"mappings":"AAAA,SAAQA,aAAa,EAAEC,EAAE,QAAO,aAAa;AAC7C,SAAQC,YAAY,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,UAAU,QAAO,mBAAmB;AAQpG,MAAMC,YAAY,GAAG;EACjBC,QAAQ,EAAE,EAAE;EACZC,cAAc,EAAE;CACnB;AACD,OAAO,MAAMC,cAAc,GAAGT,aAAa,CACvCM,YAAY,EACZL,EAAE,CAACC,YAAY,EAAEQ,KAAK,IAAIA,KAAK,CAAC,EAChCT,EAAE,CAACG,mBAAmB,EAAE,CAACM,KAAK,EAAEC,MAAM,KAAI;EACtC,OAAO;IACH,GAAGD,KAAK;IACRH,QAAQ,EAAEI,MAAM,CAACC;GACpB;AACL,CAAC,CACA,EACDX,EAAE,CAACE,mBAAmB,EAAE,CAACO,KAAK,EAAEC,MAAM,KAAKD,KAAK,CAAC,EACjDT,EAAE,CAACI,UAAU,EAAE,CAACK,KAAK,EAAEC,MAAM,KAAI;EAC7B,MAAME,OAAO,GAAGH,KAAK,CAACH,QAAQ,CAACO,IAAI,CAAED,OAAO,IAAKA,OAAO,CAACE,EAAE,KAAKJ,MAAM,CAACK,SAAS,CAAC;EACjFH,OAAO,GAAGI,YAAY,CAACC,OAAO,CAAC,gBAAgB,EAAEC,IAAI,CAACC,SAAS,CAACP,OAAO,CAAC,CAAC;EACzE,OAAO;IACH,GAAGH,KAAK;IACRF,cAAc,EAAEG,MAAM,CAACK;GAC1B;AACD,CAAC,CACJ","names":["createReducer","on","loadProjects","loadProjectsFailure","loadProjectsSuccess","setProject","initialState","projects","currentProject","projectReducer","state","action","data","project","find","id","projectId","localStorage","setItem","JSON","stringify"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/store/rxProject/project.reducer.ts"],"sourcesContent":["import {createReducer, on} from \"@ngrx/store\";\nimport {loadProjects, loadProjectsFailure, loadProjectsSuccess, setProject} from \"./project.actions\";\nimport {IProject} from \"../../core/interfaces/iproject\";\n\nexport interface ProjectState {\n    projects: IProject[];\n    currentProject: IProject | null;\n    error: any;\n}\nconst initialState = {\n    projects: [],\n    currentProject: null,\n};\nexport const projectReducer = createReducer(\n    initialState,\n    on(loadProjects, state => state),\n    on(loadProjectsSuccess, (state, action) => {\n        return {\n            ...state,\n            projects: action.data\n        };\n    }\n    ),\n    on(loadProjectsFailure, (state, action) => state),\n    on(setProject, (state, action) => {\n        const project = state.projects.find((project) => project.id === action.projectId);\n        project & localStorage.setItem('currentProject', JSON.stringify(project));\n        return {\n            ...state,\n            currentProject: action.projectId\n        };\n        }\n    );"]},"metadata":{},"sourceType":"module","externalDependencies":[]}