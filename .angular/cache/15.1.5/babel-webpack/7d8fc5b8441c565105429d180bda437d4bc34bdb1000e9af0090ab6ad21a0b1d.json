{"ast":null,"code":"import { of, Subject, takeUntil } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class ValidCounterService {\n  constructor() {\n    this.firstChecked = false;\n    this.array = [];\n    this.arraySubject = new Subject();\n    this.counter = 0;\n    this.controls = 0;\n    this.sub$ = new Subject();\n  }\n  validCounter(formGroup, index) {\n    this.button = document.querySelectorAll('.next-button');\n    if (!this.firstChecked) {\n      this.firstCheck(formGroup, index);\n    }\n    for (let i = 0; i < Object.keys(formGroup.value).length; i++) {\n      formGroup.get(Object.keys(formGroup.value)[i])?.valueChanges.pipe(takeUntil(this.sub$)).subscribe(c => {\n        this.counter = 0;\n        this.array = [];\n        this.firstCheck(formGroup, index);\n      });\n    }\n  }\n  firstCheck(formGroup, index) {\n    this.controls = Object.keys(formGroup.value).length;\n    this.firstChecked = true;\n    for (let i = 0; i < Object.keys(formGroup.value).length; i++) {\n      of(formGroup.get(Object.keys(formGroup.value)[i])).pipe(takeUntil(this.sub$)).subscribe(control => {\n        if (control?.valid) {\n          this.counter++;\n          this.array.push(this.counter);\n          this.arraySubject.next(this.array);\n        }\n      });\n    }\n    this.setButtonWidth(index);\n  }\n  setButtonWidth(index) {\n    const button = this.button[index];\n    button.style.width = this.counter / this.controls * 100 + '%';\n  }\n  ngOnDestroy() {\n    this.sub$.next(null);\n    this.sub$.complete();\n  }\n}\nValidCounterService.ɵfac = function ValidCounterService_Factory(t) {\n  return new (t || ValidCounterService)();\n};\nValidCounterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ValidCounterService,\n  factory: ValidCounterService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}