{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { loadProjects, loadProjectsFailure, loadProjectsSuccess, setProject } from \"./project.actions\";\nimport { catchError, of, switchMap, map } from \"rxjs\";\nimport { tap } from \"lodash\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../core/services/project.service\";\nimport * as i3 from \"@ngrx/store\";\nexport class ProjectEffects {\n  constructor(actions$, projectService, store) {\n    this.actions$ = actions$;\n    this.projectService = projectService;\n    this.store = store;\n    this.loadProjects$ = createEffect(() => this.actions$.pipe(ofType(loadProjects), switchMap(() => this.projectService.getMyProjects().pipe(map(data => loadProjectsSuccess({\n      data\n    })), catchError(error => of(loadProjectsFailure({\n      error\n    })))))));\n    this.createProject$ = createEffect(() => this.actions$.pipe(ofType(createProject), switchMap(action => this.projectService.createProject(action.project).pipe(tap(res => loadProjects()), map(res => {\n      this._snackBar.open('Project created', 'Close', {\n        duration: 2000\n      });\n      this.router.navigate(['/application/setting']).then();\n      return setProject({\n        projectId: res.id\n      });\n    }), catchError(error => of(loadProjectsFailure({\n      error\n    })))))));\n  }\n}\nProjectEffects.ɵfac = function ProjectEffects_Factory(t) {\n  return new (t || ProjectEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ProjectService), i0.ɵɵinject(i3.Store));\n};\nProjectEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProjectEffects,\n  factory: ProjectEffects.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAiBA,YAAY,EAAEC,MAAM,QAAO,eAAe;AAE3D,SAAQC,YAAY,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,UAAU,QAAO,mBAAmB;AACpG,SAAQC,UAAU,EAAEC,EAAE,EAAEC,SAAS,EAAEC,GAAG,QAAO,MAAM;AAInD,SAAQC,GAAG,QAAO,QAAQ;;;;;AAK1B,OAAM,MAAOC,cAAc;EACvBC,YACYC,QAAiB,EACjBC,cAA8B,EAC9BC,KAAY;IAFZ,aAAQ,GAARF,QAAQ;IACR,mBAAc,GAAdC,cAAc;IACd,UAAK,GAALC,KAAK;IAIjB,kBAAa,GAAGf,YAAY,CAAC,MAAM,IAAI,CAACa,QAAQ,CAACG,IAAI,CACjDf,MAAM,CAACC,YAAY,CAAC,EACpBM,SAAS,CAAC,MAAM,IAAI,CAACM,cAAc,CAACG,aAAa,EAAE,CAACD,IAAI,CACpDP,GAAG,CAAES,IAAI,IAAKd,mBAAmB,CAAC;MAACc;IAAI,CAAC,CAAC,CAAC,EAC1CZ,UAAU,CAAEa,KAAK,IAAKZ,EAAE,CAACJ,mBAAmB,CAAC;MAACgB;IAAK,CAAC,CAAC,CAAC,CAAC,CAC1D,CAAC,CACL,CAAC;IAEF,mBAAc,GAAGnB,YAAY,CAAC,MAAM,IAAI,CAACa,QAAQ,CAACG,IAAI,CAClDf,MAAM,CAACmB,aAAa,CAAC,EACrBZ,SAAS,CAAEa,MAAM,IAAK,IAAI,CAACP,cAAc,CAACM,aAAa,CAACC,MAAM,CAACC,OAAO,CAAC,CAACN,IAAI,CACxEN,GAAG,CAAEa,GAAa,IAAKrB,YAAY,EAAE,CAAC,EACtCO,GAAG,CAAEc,GAAa,IAAI;MAClB,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,iBAAiB,EAAE,OAAO,EAAE;QAC5CC,QAAQ,EAAE;OACb,CAAC;MAEF,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAACC,IAAI,EAAE;MACrD,OAAOxB,UAAU,CAAC;QAACyB,SAAS,EAAEP,GAAG,CAACQ;MAAE,CAAC,CAAC;IAC1C,CAAC,CAAC,EACFzB,UAAU,CAAEa,KAAK,IAAKZ,EAAE,CAACJ,mBAAmB,CAAC;MAACgB;IAAK,CAAC,CAAC,CAAC,CAAC,CAC1D,CAAC,CACL,CAAC;EAxBF;;AANSR,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAqB,SAAdrB,cAAc;AAAA","names":["createEffect","ofType","loadProjects","loadProjectsFailure","loadProjectsSuccess","setProject","catchError","of","switchMap","map","tap","ProjectEffects","constructor","actions$","projectService","store","pipe","getMyProjects","data","error","createProject","action","project","res","_snackBar","open","duration","router","navigate","then","projectId","id","factory"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/store/rxProject/project.effect.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Actions, createEffect, ofType} from \"@ngrx/effects\";\nimport {ProjectService} from \"../../core/services/project.service\";\nimport {loadProjects, loadProjectsFailure, loadProjectsSuccess, setProject} from \"./project.actions\";\nimport {catchError, of, switchMap, map} from \"rxjs\";\nimport {Store} from \"@ngrx/store\";\nimport {ProjectStateModule} from \"./project.reducer\";\nimport {state} from \"@angular/animations\";\nimport {tap} from \"lodash\";\nimport {IProject} from \"../../core/interfaces/iproject\";\n\n\n@Injectable()\nexport class ProjectEffects{\n    constructor(\n        private actions$: Actions,\n        private projectService: ProjectService,\n        private store: Store,\n    ) {\n    }\n\n    loadProjects$ = createEffect(() => this.actions$.pipe(\n        ofType(loadProjects),\n        switchMap(() => this.projectService.getMyProjects().pipe(\n            map((data) => loadProjectsSuccess({data})),\n            catchError((error) => of(loadProjectsFailure({error})))\n        ))\n    ))\n\n    createProject$ = createEffect(() => this.actions$.pipe(\n        ofType(createProject),\n        switchMap((action) => this.projectService.createProject(action.project).pipe(\n            tap((res: IProject) => loadProjects()),\n            map((res: IProject) => {\n                this._snackBar.open('Project created', 'Close', {\n                    duration: 2000,\n                })\n\n                this.router.navigate(['/application/setting']).then();\n                return setProject({projectId: res.id})\n            }),\n            catchError((error) => of(loadProjectsFailure({error})))\n        ))\n    ))\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}