{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/facades/project-facade.service\";\nexport class ProjectInterceptor {\n  constructor(projectFacade) {\n    this.projectFacade = projectFacade;\n  }\n  intercept(request, next) {\n    const project = this.projectFacade.getProject();\n    if (project) {\n      return next.handle(request.clone({\n        setHeaders: {\n          project: String(project.id)\n        }\n      }));\n    }\n    return next.handle(request);\n  }\n}\nProjectInterceptor.ɵfac = function ProjectInterceptor_Factory(t) {\n  return new (t || ProjectInterceptor)(i0.ɵɵinject(i1.ProjectFacade));\n};\nProjectInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProjectInterceptor,\n  factory: ProjectInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;AAYA,OAAM,MAAOA,kBAAkB;EAC7BC,YAAoBC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;EACjC;EAEAC,SAAS,CACPC,OAA6B,EAC7BC,IAAiB;IAEjB,MAAMC,OAAO,GAAG,IAAI,CAACJ,aAAa,CAACK,UAAU,EAAE;IAG/C,IAAID,OAAO,EAAE;MACX,OAAOD,IAAI,CAACG,MAAM,CAChBJ,OAAO,CAACK,KAAK,CAAC;QACZC,UAAU,EAAE;UAAEJ,OAAO,EAAEK,MAAM,CAACL,OAAO,CAACM,EAAE;QAAC;OAC1C,CAAC,CACH;;IAGH,OAAOP,IAAI,CAACG,MAAM,CAACJ,OAAO,CAAC;EAC7B;;AApBWJ,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAa,SAAlBb,kBAAkB;AAAA","names":["ProjectInterceptor","constructor","projectFacade","intercept","request","next","project","getProject","handle","clone","setHeaders","String","id","factory"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/core/interceptors/project.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ProjectFacade } from 'src/app/facades/project-facade.service';\nimport {AuthInterceptor} from \"./auth.interceptor\";\n\n@Injectable()\nexport class ProjectInterceptor implements HttpInterceptor {\n  constructor(private projectFacade: ProjectFacade) {\n  }\n\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    const project = this.projectFacade.getProject();\n\n\n    if (project) {\n      return next.handle(\n        request.clone({\n          setHeaders: { project: String(project.id) }\n        })\n      );\n    }\n\n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}