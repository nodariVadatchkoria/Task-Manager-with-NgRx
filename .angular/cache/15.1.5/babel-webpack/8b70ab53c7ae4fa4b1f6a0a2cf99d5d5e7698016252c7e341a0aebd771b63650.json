{"ast":null,"code":"import { BaseService } from \"./base.service\";\nimport * as i0 from \"@angular/core\";\nexport class UsersService extends BaseService {\n  // apiUrl = environment.apiUrl + 'users';\n  // constructor(\n  //   // private http: HttpClient\n  // ) {}\n  createUser(user) {\n    return this.post('users', user);\n  }\n  // getUsers(): Observable<any> {\n  //   return this.http.get(this.apiUrl);\n  // }\n  getUsers(params = {}) {\n    return this.get('users', params);\n  }\n  getUsersAll() {\n    return this.http.get(this.apiUrl + 'users' + '/all');\n  }\n  getUserByID(id) {\n    return this.get(`users/${id}`);\n  }\n  setUser(user) {\n    return this.http.post(this.apiUrl, user);\n  }\n  setUserRoles(userRole) {\n    return this.http.post(this.apiUrl, userRole);\n  }\n  updateUserById(id, user) {\n    return this.http.put(`${this.apiUrl}/${id}`, user);\n  }\n  deleteUserById(id) {\n    return this.delete(`users/${id}`);\n  }\n  updateUserRoles(params) {\n    return this.post(`users/roles`, params);\n  }\n}\nUsersService.ɵfac = /*@__PURE__*/function () {\n  let ɵUsersService_BaseFactory;\n  return function UsersService_Factory(t) {\n    return (ɵUsersService_BaseFactory || (ɵUsersService_BaseFactory = i0.ɵɵgetInheritedFactory(UsersService)))(t || UsersService);\n  };\n}();\nUsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersService,\n  factory: UsersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAQA,WAAW,QAAO,gBAAgB;;AAM1C,OAAM,MAAOC,YAAa,SAAQD,WAAW;EAC3C;EAEA;EACA;EACA;EACFE,UAAU,CAACC,IAAU;IACjB,OAAO,IAAI,CAACC,IAAI,CAAC,OAAO,EAAED,IAAI,CAAC;EACjC;EAEA;EACA;EACA;EAEAE,QAAQ,CAACC,MAAM,GAAG,EAAE;IAClB,OAAO,IAAI,CAACC,GAAG,CAAC,OAAO,EAAED,MAAM,CAAC;EAClC;EAEAE,WAAW;IACT,OAAO,IAAI,CAACC,IAAI,CAACF,GAAG,CAAC,IAAI,CAACG,MAAM,GAAG,OAAO,GAAG,MAAM,CAAC;EACtD;EAEAC,WAAW,CAACC,EAAU;IACpB,OAAO,IAAI,CAACL,GAAG,CAAC,SAASK,EAAE,EAAE,CAAC;EAChC;EAEAC,OAAO,CAACV,IAAS;IACf,OAAO,IAAI,CAACM,IAAI,CAACL,IAAI,CAAC,IAAI,CAACM,MAAM,EAAEP,IAAI,CAAC;EAC1C;EAEAW,YAAY,CAACC,QAAoB;IAC/B,OAAO,IAAI,CAACN,IAAI,CAACL,IAAI,CAAC,IAAI,CAACM,MAAM,EAAEK,QAAQ,CAAC;EAC9C;EAEAC,cAAc,CAACJ,EAAU,EAAET,IAAU;IACnC,OAAO,IAAI,CAACM,IAAI,CAACQ,GAAG,CAAC,GAAG,IAAI,CAACP,MAAM,IAAIE,EAAE,EAAE,EAAET,IAAI,CAAC;EACpD;EAEAe,cAAc,CAACN,EAAU;IACvB,OAAO,IAAI,CAACO,MAAM,CAAC,SAASP,EAAE,EAAE,CAAC;EACnC;EAEAQ,eAAe,CAACd,MAA6C;IAC3D,OAAO,IAAI,CAACF,IAAI,CAAC,aAAa,EAAEE,MAAM,CAAC;EACzC;;AA5CWL,YAAa;;;+FAAbA,YAAY,SAAZA,YAAY;EAAA;AAAA;AAAZA,YAAa;SAAbA,YAAY;EAAAoB,SAAZpB,YAAY;EAAAqB,YAFX;AAAM","names":["BaseService","UsersService","createUser","user","post","getUsers","params","get","getUsersAll","http","apiUrl","getUserByID","id","setUser","setUserRoles","userRole","updateUserById","put","deleteUserById","delete","updateUserRoles","factory","providedIn"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/core/services/users.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User, UsersRoles } from '../interfaces';\nimport { Observable } from 'rxjs';\nimport {BaseService} from \"./base.service\";\nimport {PaginationResponse} from \"../interfaces/pagination-response\";\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UsersService extends BaseService {\n  // apiUrl = environment.apiUrl + 'users';\n\n  // constructor(\n  //   // private http: HttpClient\n  // ) {}\ncreateUser(user: User){\n    return this.post('users', user)\n  }\n\n  // getUsers(): Observable<any> {\n  //   return this.http.get(this.apiUrl);\n  // }\n\n  getUsers(params = {}): Observable<PaginationResponse<User>> {\n    return this.get('users', params);\n  }\n\n  getUsersAll(): Observable<any> {\n    return this.http.get(this.apiUrl + 'users' + '/all');\n  }\n\n  getUserByID(id: number) :Observable<User> {\n    return this.get(`users/${id}`);\n  }\n\n  setUser(user: any) {\n    return this.http.post(this.apiUrl, user);\n  }\n\n  setUserRoles(userRole: UsersRoles) {\n    return this.http.post(this.apiUrl, userRole);\n  }\n\n  updateUserById(id: number, user: User) {\n    return this.http.put(`${this.apiUrl}/${id}`, user);\n  }\n\n  deleteUserById(id: number) {\n    return this.delete(`users/${id}`);\n  }\n\n  updateUserRoles(params: { userId: number, roleIds: number[] }): Observable<User> {\n    return this.post(`users/roles`, params);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}