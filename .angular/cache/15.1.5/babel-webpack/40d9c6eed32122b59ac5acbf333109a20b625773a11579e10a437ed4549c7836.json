{"ast":null,"code":"import { BaseService } from \"./base.service\";\nimport * as i0 from \"@angular/core\";\nexport class ProjectService extends BaseService {\n  constructor() {\n    super(...arguments);\n    this.projectName = '';\n  }\n  getProjects() {\n    return this.get('project');\n  }\n  getAllProjects() {\n    return this.get('project/all');\n  }\n  getProjectById(id) {\n    return this.get(`project/${id}`);\n  }\n  createProject(project) {\n    return this.post('project', project);\n  }\n  updateProject(id, project) {\n    return this.put(`project/${project.id}`, project);\n  }\n  deleteProject(id) {\n    return this.delete(`project/${id}`);\n  }\n  getProjectUsersId(id) {\n    return this.get('project/users');\n  }\n  getById(id) {\n    return this.get('project/' + `${id}`);\n  }\n  getProjectUsers() {\n    return this.get(`project/users`);\n  }\n  addProjectUserData(data) {\n    return this.post(`project/users`, data);\n  }\n}\nProjectService.ɵfac = /*@__PURE__*/function () {\n  let ɵProjectService_BaseFactory;\n  return function ProjectService_Factory(t) {\n    return (ɵProjectService_BaseFactory || (ɵProjectService_BaseFactory = i0.ɵɵgetInheritedFactory(ProjectService)))(t || ProjectService);\n  };\n}();\nProjectService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProjectService,\n  factory: ProjectService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAQA,WAAW,QAAO,gBAAgB;;AAQ1C,OAAM,MAAOC,cAAe,SAAQD,WAAW;EAH/CE;;IAIE,gBAAW,GAAG,EAAE;;EAEhBC,WAAW;IACb,OAAO,IAAI,CAACC,GAAG,CAA+B,SAAS,CAAC;EACtD;EACAC,cAAc;IACZ,OAAO,IAAI,CAACD,GAAG,CAAa,aAAa,CAAC;EAC5C;EACAE,cAAc,CAACC,EAAU;IACvB,OAAO,IAAI,CAACH,GAAG,CAAW,WAAWG,EAAE,EAAE,CAAC;EAC5C;EACAC,aAAa,CAACC,OAAiB;IAC7B,OAAO,IAAI,CAACC,IAAI,CAAW,SAAS,EAAED,OAAO,CAAC;EAChD;EACAE,aAAa,CAACJ,EAAU,EAAEE,OAAiB;IACzC,OAAO,IAAI,CAACG,GAAG,CAAW,WAAWH,OAAO,CAACF,EAAE,EAAE,EAAEE,OAAO,CAAC;EAC7D;EACAI,aAAa,CAACN,EAAU;IACtB,OAAO,IAAI,CAACO,MAAM,CAAC,WAAWP,EAAE,EAAE,CAAC;EACrC;EACAQ,iBAAiB,CAACR,EAAU;IAC1B,OAAO,IAAI,CAACH,GAAG,CAAC,eAAe,CAAC;EAClC;EAEAY,OAAO,CAACT,EAAO;IACb,OAAO,IAAI,CAACH,GAAG,CAAM,UAAU,GAAC,GAAGG,EAAE,EAAE,CAAC;EAC1C;EAEAU,eAAe;IACb,OAAO,IAAI,CAACb,GAAG,CAAC,eAAe,CAAC;EAClC;EAEAc,kBAAkB,CAAEC,IAGnB;IACC,OAAO,IAAI,CAACT,IAAI,CAAM,eAAe,EAAES,IAAI,CAAC;EAC9C;;AAtCWlB,cAAe;;;mGAAfA,cAAc,SAAdA,cAAc;EAAA;AAAA;AAAdA,cAAe;SAAfA,cAAc;EAAAmB,SAAdnB,cAAc;EAAAoB,YAFb;AAAM","names":["BaseService","ProjectService","constructor","getProjects","get","getAllProjects","getProjectById","id","createProject","project","post","updateProject","put","deleteProject","delete","getProjectUsersId","getById","getProjectUsers","addProjectUserData","data","factory","providedIn"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/core/services/project.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {BaseService} from \"./base.service\";\nimport {Observable} from \"rxjs\";\nimport {PaginationResponse} from \"../interfaces/pagination-response\";\nimport {IProject} from \"../interfaces/iproject\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService extends BaseService {\n  projectName = '';\n\n  getProjects():Observable<PaginationResponse<IProject>> {\nreturn this.get<PaginationResponse<IProject>>('project');\n  }\n  getAllProjects():Observable<IProject[]> {\n    return this.get<IProject[]>('project/all');\n  }\n  getProjectById(id: number):Observable<IProject> {\n    return this.get<IProject>(`project/${id}`);\n  }\n  createProject(project: IProject): Observable<IProject> {\n    return this.post<IProject>('project', project);\n  }\n  updateProject(id: number, project: IProject):Observable<IProject> {\n    return this.put<IProject>(`project/${project.id}`, project);\n  }\n  deleteProject(id: number):Observable<any> {\n    return this.delete(`project/${id}`);\n  }\n  getProjectUsersId(id: number):Observable<any>{\n    return this.get('project/users');\n  };\n\n  getById(id: any):Observable<any> {\n    return this.get<any>('project/'+`${id}`)\n  }\n\n  getProjectUsers(): Observable<any> {\n    return this.get(`project/users`);\n  }\n\n  addProjectUserData( data: {\n    projectId: number,\n    userIds: number[]\n  }): Observable<any> {\n    return this.post<any>(`project/users`, data);\n  }\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}