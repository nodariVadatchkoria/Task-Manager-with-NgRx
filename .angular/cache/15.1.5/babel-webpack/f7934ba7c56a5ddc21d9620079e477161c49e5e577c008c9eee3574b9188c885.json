{"ast":null,"code":"import * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../core/services/role.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction PermissionAddEditComponent_div_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"div\", 7);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 8)(4, \"input\", 9);\n    i0.ɵɵlistener(\"change\", function PermissionAddEditComponent_div_1_div_3_Template_input_change_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const permission_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r4.checkPermission(permission_r3));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const permission_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(permission_r3.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"checked\", ctx_r2.permissions.has(permission_r3.id));\n  }\n}\nfunction PermissionAddEditComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"div\", 4);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, PermissionAddEditComponent_div_1_div_3_Template, 5, 2, \"div\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const group_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(group_r1.key);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", group_r1.permissions);\n  }\n}\nexport class PermissionAddEditComponent {\n  constructor(roleService, route) {\n    this.roleService = roleService;\n    this.route = route;\n    this.groups = [];\n    this.permissions = new Set();\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      if (params['roleId']) {\n        this.roleId = params['roleId'];\n        this.getPermissionsByRole();\n      }\n    });\n    this.getPermissions();\n  }\n  getPermissionsByRole() {\n    this.roleService.getRole(this.roleId).subscribe(role => {\n      console.log(role);\n      role && role.permissions && role.permissions.length && role.permissions.forEach(p => this.permissions.add(p.id));\n    });\n  }\n  getPermissions() {\n    this.roleService.getPermissions().subscribe(permissions => {\n      console.log(permissions);\n      const grouped = _.groupBy(permissions, 'groupKey');\n      this.groups = Object.keys(grouped).map(key => {\n        return {\n          key,\n          permissions: grouped[key]\n        };\n      });\n      console.log(this.groups);\n    });\n  }\n  checkPermission(permission) {\n    this.permissions.has(permission.id) ? this.permissions.delete(permission.id) : this.permissions.add(permission.id);\n  }\n  save() {\n    this.roleService.setPermissions({\n      roleId: this.roleId,\n      permissions: Array.from(this.permissions)\n    }).subscribe(res => {\n      console.log(res);\n    });\n  }\n}\nPermissionAddEditComponent.ɵfac = function PermissionAddEditComponent_Factory(t) {\n  return new (t || PermissionAddEditComponent)(i0.ɵɵdirectiveInject(i1.RoleService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nPermissionAddEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PermissionAddEditComponent,\n  selectors: [[\"app-permission-add-edit\"]],\n  decls: 4,\n  vars: 1,\n  consts: [[1, \"container\"], [\"class\", \"group\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [1, \"group\"], [1, \"group-name\"], [\"class\", \"permission\", 4, \"ngFor\", \"ngForOf\"], [1, \"permission\"], [1, \"permission-name\"], [1, \"permission-value\"], [\"type\", \"checkbox\", 3, \"checked\", \"change\"]],\n  template: function PermissionAddEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, PermissionAddEditComponent_div_1_Template, 4, 2, \"div\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function PermissionAddEditComponent_Template_button_click_2_listener() {\n        return ctx.save();\n      });\n      i0.ɵɵtext(3, \"Save\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.groups);\n    }\n  },\n  dependencies: [i3.NgForOf],\n  styles: [\".container[_ngcontent-%COMP%] {\\n  display: grid;\\n  grid-template-columns: 1fr 1fr;\\n  grid-gap: 20px;\\n}\\n\\n.container[_ngcontent-%COMP%]   .group[_ngcontent-%COMP%] {\\n  border: 1px solid #ccc;\\n  padding: 10px;\\n}\\n\\n.container[_ngcontent-%COMP%]   .group[_ngcontent-%COMP%]   .permission[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvcm9sZXMvcGVybWlzc2lvbi1hZGQtZWRpdC9wZXJtaXNzaW9uLWFkZC1lZGl0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBQTtFQUNBLDhCQUFBO0VBQ0EsY0FBQTtBQUNGOztBQUNFO0VBQ0Usc0JBQUE7RUFDQSxhQUFBO0FBQ0o7O0FBQ0k7RUFDRSxhQUFBO0VBQ0EsOEJBQUE7RUFDQSxtQkFBQTtBQUNOIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lciB7XG4gIGRpc3BsYXk6Z3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xuICBncmlkLWdhcDogMjBweDtcblxuICAuZ3JvdXAge1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XG4gICAgcGFkZGluZzogMTBweDtcblxuICAgIC5wZXJtaXNzaW9uIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["_","i0","PermissionAddEditComponent","constructor","roleService","route","Set","ngOnInit","params","subscribe","roleId","getPermissionsByRole","getPermissions","getRole","role","console","log","permissions","length","forEach","p","add","id","grouped","groupBy","groups","Object","keys","map","key","checkPermission","permission","has","delete","save","setPermissions","Array","from","res","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/pages/roles/permission-add-edit/permission-add-edit.component.ts","/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/pages/roles/permission-add-edit/permission-add-edit.component.html"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {RoleService} from \"../../../core/services/role.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport * as _ from 'lodash';\n\n@Component({\n  selector: 'app-permission-add-edit',\n  templateUrl: './permission-add-edit.component.html',\n  styleUrls: ['./permission-add-edit.component.scss']\n})\nexport class PermissionAddEditComponent implements OnInit{\n\n  groups: any = [];\n  roleId!: string\n\n  permissions: Set<number> = new Set<number>();\n\n  constructor(\n    private roleService: RoleService,\n    private route: ActivatedRoute\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.route.params.subscribe(params => {\n      if (params['roleId']) {\n        this.roleId = params['roleId'];\n        this.getPermissionsByRole()\n      }\n    })\n    this.getPermissions()\n  }\n\n  getPermissionsByRole() {\n    this.roleService.getRole(this.roleId)\n      .subscribe(role => {\n        console.log(role)\n        role && role.permissions && role.permissions.length && role.permissions.forEach((p: any) => this.permissions.add(p.id))\n\n      })\n  }\n\n  getPermissions() {\n    this.roleService.getPermissions()\n      .subscribe(permissions => {\n        console.log(permissions)\n        const grouped = _.groupBy(permissions, 'groupKey');\n        this.groups = Object.keys(grouped).map(key => {\n          return {\n            key,\n            permissions: grouped[key]\n          }\n        })\n\n        console.log(this.groups)\n      });\n  }\n\n\n  checkPermission(permission: any) {\n    this.permissions.has(permission.id) ? this.permissions.delete(permission.id) : this.permissions.add(permission.id)\n  }\n\n  save() {\n    this.roleService.setPermissions({\n      roleId: this.roleId,\n      permissions: Array.from(this.permissions)\n    }).subscribe(res => {\n      console.log(res)\n    })\n  }\n}\n","\n<div class=\"container\">\n  <div class=\"group\" *ngFor=\"let group of groups\">\n    <div class=\"group-name\">{{group.key}}</div>\n    <div class=\"permission\" *ngFor=\"let permission of group.permissions\">\n      <div class=\"permission-name\">{{permission.name}}</div>\n      <div class=\"permission-value\">\n        <input type=\"checkbox\" [checked]=\"permissions.has(permission.id)\" (change)=\"checkPermission(permission)\">\n      </div>\n    </div>\n  </div>\n</div>\n\n<button (click)=\"save()\">Save</button>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}