{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../facades/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class PermissionGuard {\n  constructor(authFacade, router) {\n    this.authFacade = authFacade;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const permissions = route.data['permissions'];\n    const userPermissions = this.authFacade.permissions;\n    const hasPermission = userPermissions.some(permissions => permissions.includes(permissions));\n    return hasPermission ? true : this.router.createUrlTree(['/access-denied']);\n  }\n}\nPermissionGuard.ɵfac = function PermissionGuard_Factory(t) {\n  return new (t || PermissionGuard)(i0.ɵɵinject(i1.AuthFacade), i0.ɵɵinject(i2.Router));\n};\nPermissionGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PermissionGuard,\n  factory: PermissionGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,eAAe;EAE1BC,YACUC,UAAsB,EACtBC,MAAc;IADd,eAAU,GAAVD,UAAU;IACV,WAAM,GAANC,MAAM;EACZ;EAEJC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAC1B,MAAMC,WAAW,GAAGF,KAAK,CAACG,IAAI,CAAC,aAAa,CAAa;IACzD,MAAMC,eAAe,GAAG,IAAI,CAACP,UAAU,CAACK,WAAW;IAEnD,MAAMG,aAAa,GAAGD,eAAe,CAACE,IAAI,CAACJ,WAAW,IAAIA,WAAW,CAACK,QAAQ,CAACL,WAAW,CAAC,CAAC;IAC5F,OAAOG,aAAa,GAAG,IAAI,GAAG,IAAI,CAACP,MAAM,CAACU,aAAa,CAAC,CAAC,gBAAgB,CAAC,CAAC;EAC7E;;AAfWb,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAc,SAAfd,eAAe;EAAAe,YAFd;AAAM","names":["PermissionGuard","constructor","authFacade","router","canActivate","route","state","permissions","data","userPermissions","hasPermission","some","includes","createUrlTree","factory","providedIn"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/core/guards/permission.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {AuthFacade} from \"../../facades/auth.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PermissionGuard implements CanActivate {\n\n  constructor(\n    private authFacade: AuthFacade,\n    private router: Router,\n  ) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const permissions = route.data['permissions'] as string[];\n    const userPermissions = this.authFacade.permissions;\n\n    const hasPermission = userPermissions.some(permissions => permissions.includes(permissions));\n    return hasPermission ? true : this.router.createUrlTree(['/access-denied'])\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}