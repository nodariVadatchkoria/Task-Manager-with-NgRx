{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../facades/project-facade.service\";\nexport class ProjectInterceptor {\n  constructor(\n  // private store: Store<{ project: ProjectStateModule }>,\n  projectFacade) {\n    this.projectFacade = projectFacade;\n  }\n  intercept(request, next) {\n    // return this.store.select(currentProject)\n    //     .pipe(\n    //         switchMap((project) => {\n    //                 if (project) {\n    //\n    //                         request = request.clone({\n    //                             setHeaders: {\n    //                                 project: String(project.id)\n    //                             }\n    //                         })\n    //                 }\n    const project = this.projectFacade.getProject();\n    if (project) {\n      request = request.clone({\n        setHeaders: {\n          project: String(project.id)\n        }\n      });\n    }\n    return next.handle(request);\n    //         }\n    //     )\n    // )\n  }\n}\n\nProjectInterceptor.ɵfac = function ProjectInterceptor_Factory(t) {\n  return new (t || ProjectInterceptor)(i0.ɵɵinject(i1.ProjectFacade));\n};\nProjectInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProjectInterceptor,\n  factory: ProjectInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;AAcA,OAAM,MAAOA,kBAAkB;EAC3BC;EACI;EACQC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;EAEzB;EAEAC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACtD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACgB,MAAMC,OAAO,GAAG,IAAI,CAACJ,aAAa,CAACK,UAAU,EAAE;IAG/C,IAAID,OAAO,EAAE;MACTF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;QAChBC,UAAU,EAAE;UACRH,OAAO,EAAEI,MAAM,CAACJ,OAAO,CAACK,EAAE;;OAEjC,CAAC;;IAGV,OAAON,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;IACvC;IACA;IACA;EACR;;;AAlCSJ,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAa,SAAlBb,kBAAkB;AAAA","names":["ProjectInterceptor","constructor","projectFacade","intercept","request","next","project","getProject","clone","setHeaders","String","id","handle","factory"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/core/interceptors/project.interceptor.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {\n    HttpRequest,\n    HttpHandler,\n    HttpEvent,\n    HttpInterceptor,\n} from '@angular/common/http';\nimport {Observable, switchMap} from 'rxjs';\nimport {Store} from \"@ngrx/store\";\nimport {ProjectStateModule} from \"../../store\";\nimport {currentProject} from \"../../store/rxProject/project.selectors\";\nimport {ProjectFacade} from \"../../facades/project-facade.service\";\n\n@Injectable()\nexport class ProjectInterceptor implements HttpInterceptor {\n    constructor(\n        // private store: Store<{ project: ProjectStateModule }>,\n        private projectFacade: ProjectFacade,\n    ) {\n    }\n\n    intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n        // return this.store.select(currentProject)\n        //     .pipe(\n        //         switchMap((project) => {\n        //                 if (project) {\n        //\n        //                         request = request.clone({\n        //                             setHeaders: {\n        //                                 project: String(project.id)\n        //                             }\n        //                         })\n        //                 }\n                        const project = this.projectFacade.getProject();\n\n\n                        if (project) {\n                            request = request.clone({\n                                    setHeaders: {\n                                        project: String(project.id)\n                                    }\n                                })\n                        }\n\n                        return next.handle(request);\n            //         }\n            //     )\n            // )\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}