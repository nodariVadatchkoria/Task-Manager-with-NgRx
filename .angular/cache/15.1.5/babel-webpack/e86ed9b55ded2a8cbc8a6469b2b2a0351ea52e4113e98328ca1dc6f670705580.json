{"ast":null,"code":"import { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { IssueTypeEnum } from \"../../../../../core/enums\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../../core/services\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/checkbox\";\nimport * as i9 from \"@angular/material/select\";\nimport * as i10 from \"@angular/material/core\";\nfunction IssueTypeAddEditComponent_mat_option_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const issueType_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", issueType_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", issueType_r2, \" \");\n  }\n}\nfunction IssueTypeAddEditComponent_div_30_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"div\", 14)(2, \"mat-form-field\")(3, \"mat-label\");\n    i0.ɵɵtext(4, \"Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"mat-form-field\")(7, \"mat-label\");\n    i0.ɵɵtext(8, \"Field Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"input\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"mat-checkbox\", 16);\n    i0.ɵɵtext(11, \"Is required\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function IssueTypeAddEditComponent_div_30_Template_button_click_12_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const i_r4 = restoredCtx.index;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.removeColumn(i_r4));\n    });\n    i0.ɵɵtext(13, \"Remove Column\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const i_r4 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r4);\n  }\n}\nexport class IssueTypeAddEditComponent {\n  get columnsFormArray() {\n    return this.form.get('issueTypeColumns');\n  }\n  constructor(issueTypeService, router, route) {\n    this.issueTypeService = issueTypeService;\n    this.router = router;\n    this.route = route;\n    this.form = new FormGroup({\n      id: new FormControl(null),\n      name: new FormControl(null, Validators.required),\n      icon: new FormControl(null, Validators.required),\n      color: new FormControl(1, Validators.required),\n      description: new FormControl(null, Validators.required),\n      type: new FormControl(null, Validators.required),\n      issueTypeColumns: new FormArray([], Validators.required)\n    });\n    this.issueTypes = Object.values(IssueTypeEnum);\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      if (params['id']) {\n        this.issueTypeId = +params['id'];\n        this.getBoard();\n      }\n    });\n  }\n  getBoard() {\n    this.issueTypeService.getIssueTypeByID(this.issueTypeId).subscribe(res => {\n      this.form.patchValue(res);\n      res.issueTypeColumns.forEach(column => {\n        this.columnsFormArray.push(new FormGroup({\n          id: new FormControl(column.id),\n          name: new FormControl(column.name, Validators.required),\n          filedName: new FormControl(column.filedName, Validators.required),\n          isRequired: new FormControl(column.isRequired, Validators.required)\n        }, Validators.required));\n      });\n    });\n  }\n  addColumn() {\n    this.columnsFormArray.push(new FormGroup({\n      name: new FormControl(null, Validators.required),\n      filedName: new FormControl(null, Validators.required),\n      isRequired: new FormControl(false, Validators.required)\n    }, Validators.required));\n  }\n  save() {\n    this.form.markAllAsTouched();\n    if (this.form.invalid) {\n      return;\n    }\n    if (this.issueTypeId) {\n      this.issueTypeService.updateIssueType(this.form.value).subscribe(res => {\n        this.router.navigate(['/projects/setting/issue-types']).then();\n      });\n    } else {\n      this.issueTypeService.setIssueType(this.form.value).subscribe(res => {\n        this.router.navigate(['/projects/setting/issue-types']).then();\n      });\n    }\n  }\n  removeColumn(i) {\n    this.columnsFormArray.removeAt(i);\n  }\n}\nIssueTypeAddEditComponent.ɵfac = function IssueTypeAddEditComponent_Factory(t) {\n  return new (t || IssueTypeAddEditComponent)(i0.ɵɵdirectiveInject(i1.IssueTypesService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nIssueTypeAddEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: IssueTypeAddEditComponent,\n  selectors: [[\"app-issue-type-add-edit\"]],\n  decls: 31,\n  vars: 3,\n  consts: [[3, \"formGroup\"], [1, \"form-container\"], [\"matInput\", \"\", \"placeholder\", \"Name\", \"formControlName\", \"name\"], [\"matInput\", \"\", \"placeholder\", \"Description\", \"formControlName\", \"description\"], [\"formControlName\", \"type\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"matInput\", \"\", \"placeholder\", \"Color\", \"formControlName\", \"color\", \"type\", \"color\"], [\"matInput\", \"\", \"placeholder\", \"Icon\", \"formControlName\", \"icon\"], [1, \"btns\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [\"formArrayName\", \"issueTypeColumns\", 1, \"columns\"], [\"class\", \"item\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"item\"], [1, \"flex\", 3, \"formGroupName\"], [\"matInput\", \"\", \"placeholder\", \"Description\", \"formControlName\", \"filedName\"], [\"formControlName\", \"isRequired\", 1, \"example-margin\"]],\n  template: function IssueTypeAddEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"form\", 0)(2, \"div\", 1)(3, \"mat-form-field\")(4, \"mat-label\");\n      i0.ɵɵtext(5, \"Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"mat-form-field\")(8, \"mat-label\");\n      i0.ɵɵtext(9, \"Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"mat-form-field\")(12, \"mat-label\");\n      i0.ɵɵtext(13, \"Type\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"mat-select\", 4);\n      i0.ɵɵtemplate(15, IssueTypeAddEditComponent_mat_option_15_Template, 2, 2, \"mat-option\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"mat-form-field\")(17, \"mat-label\");\n      i0.ɵɵtext(18, \"Color\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"input\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"mat-form-field\")(21, \"mat-label\");\n      i0.ɵɵtext(22, \"Icon\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(23, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"div\", 8)(25, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function IssueTypeAddEditComponent_Template_button_click_25_listener() {\n        return ctx.addColumn();\n      });\n      i0.ɵɵtext(26, \"Add Field\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function IssueTypeAddEditComponent_Template_button_click_27_listener() {\n        return ctx.save();\n      });\n      i0.ɵɵtext(28, \"Save\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(29, \"div\", 10);\n      i0.ɵɵtemplate(30, IssueTypeAddEditComponent_div_30_Template, 14, 1, \"div\", 11);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(14);\n      i0.ɵɵproperty(\"ngForOf\", ctx.issueTypes);\n      i0.ɵɵadvance(15);\n      i0.ɵɵproperty(\"ngForOf\", ctx.columnsFormArray.controls);\n    }\n  },\n  dependencies: [i3.NgForOf, i4.MatButton, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormControlName, i5.FormGroupName, i5.FormArrayName, i6.MatFormField, i6.MatLabel, i7.MatInput, i8.MatCheckbox, i9.MatSelect, i10.MatOption],\n  styles: [\".form-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  width: 300px;\\n}\\n\\n.btns[_ngcontent-%COMP%] {\\n  display: flex;\\n  gap: 30px;\\n  margin-bottom: 40px;\\n}\\n\\n.flex[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvcHJvamVjdC9wcm9qZWN0LXNldHRpbmcvY29udGFpbmVycy9pc3N1ZS10eXBlLWFkZC1lZGl0L2lzc3VlLXR5cGUtYWRkLWVkaXQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSxhQUFBO0VBQ0EsU0FBQTtFQUNBLG1CQUFBO0FBQ0Y7O0FBRUE7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi5mb3JtLWNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHdpZHRoOiAzMDBweDtcbn1cblxuLmJ0bnMge1xuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDMwcHg7XG4gIG1hcmdpbi1ib3R0b206IDQwcHg7XG59XG5cbi5mbGV4IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["FormArray","FormControl","FormGroup","Validators","IssueTypeEnum","i0","IssueTypeAddEditComponent","columnsFormArray","form","get","constructor","issueTypeService","router","route","id","name","required","icon","color","description","type","issueTypeColumns","Object","values","ngOnInit","params","subscribe","issueTypeId","getBoard","getIssueTypeByID","res","patchValue","forEach","column","push","filedName","isRequired","addColumn","save","markAllAsTouched","invalid","updateIssueType","value","navigate","then","setIssueType","removeColumn","i","removeAt","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/pages/project/project-setting/containers/issue-type-add-edit/issue-type-add-edit.component.ts","/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/pages/project/project-setting/containers/issue-type-add-edit/issue-type-add-edit.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport {FormArray, FormControl, FormGroup, Validators} from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {IssueTypesService} from \"../../../../../core/services\";\nimport {IssueTypeEnum} from \"../../../../../core/enums\";\n\n@Component({\n  selector: 'app-issue-type-add-edit',\n  templateUrl: './issue-type-add-edit.component.html',\n  styleUrls: ['./issue-type-add-edit.component.scss']\n})\nexport class IssueTypeAddEditComponent {\n\n  form: FormGroup = new FormGroup({\n    id: new FormControl(null),\n    name: new FormControl(null, Validators.required),\n    icon: new FormControl(null, Validators.required),\n    color: new FormControl(1, Validators.required),\n    description: new FormControl(null, Validators.required),\n    type: new FormControl(null, Validators.required),\n    issueTypeColumns: new FormArray([], Validators.required),\n  })\n  issueTypes = Object.values(IssueTypeEnum);\n\n  issueTypeId!: number;\n\n  get columnsFormArray() {\n    return this.form.get('issueTypeColumns') as FormArray;\n  }\n\n  constructor(\n    private readonly issueTypeService: IssueTypesService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    this.route.params.subscribe(params => {\n      if (params['id']) {\n        this.issueTypeId = +params['id'];\n        this.getBoard()\n      }\n    })\n  }\n\n  getBoard() {\n    this.issueTypeService.getIssueTypeByID(this.issueTypeId).subscribe(res => {\n      this.form.patchValue(res)\n      res.issueTypeColumns.forEach((column: any) => {\n        this.columnsFormArray.push(new FormGroup({\n          id: new FormControl(column.id),\n          name: new FormControl(column.name, Validators.required),\n          filedName: new FormControl(column.filedName, Validators.required),\n          isRequired: new FormControl(column.isRequired, Validators.required)\n        }, Validators.required));\n      })\n    })\n  }\n\n  addColumn() {\n    this.columnsFormArray.push(new FormGroup({\n      name: new FormControl(null, Validators.required),\n      filedName: new FormControl(null, Validators.required),\n      isRequired: new FormControl(false, Validators.required),\n    }, Validators.required));\n  }\n\n\n  save() {\n    this.form.markAllAsTouched()\n    if (this.form.invalid) {\n      return;\n    }\n    if (this.issueTypeId) {\n      this.issueTypeService.updateIssueType(this.form.value)\n        .subscribe( res => {\n          this.router.navigate(['/projects/setting/issue-types']).then()\n        })\n    } else {\n      this.issueTypeService.setIssueType(this.form.value)\n        .subscribe( res => {\n          this.router.navigate(['/projects/setting/issue-types']).then()\n        })\n    }\n\n\n  }\n\n  removeColumn(i: number) {\n    this.columnsFormArray.removeAt(i);\n  }\n}\n","<div>\n  <form [formGroup]=\"form\">\n    <div class=\"form-container\">\n      <mat-form-field>\n        <mat-label>Name</mat-label>\n        <input matInput placeholder=\"Name\" formControlName=\"name\">\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Description</mat-label>\n        <input matInput placeholder=\"Description\" formControlName=\"description\">\n      </mat-form-field>\n\n      <mat-form-field>\n        <mat-label>Type</mat-label>\n        <mat-select formControlName=\"type\">\n          <mat-option *ngFor=\"let issueType of issueTypes\" [value]=\"issueType\">\n            {{issueType}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <mat-form-field>\n        <mat-label>Color</mat-label>\n        <input matInput placeholder=\"Color\" formControlName=\"color\" type=\"color\">\n      </mat-form-field>\n\n      <mat-form-field>\n        <mat-label>Icon</mat-label>\n        <input matInput placeholder=\"Icon\" formControlName=\"icon\">\n      </mat-form-field>\n\n<div class=\"btns\">\n  <button mat-raised-button color=\"primary\" (click)=\"addColumn()\">Add Field</button>\n  <button mat-raised-button color=\"primary\" (click)=\"save()\">Save</button>\n</div>\n\n    </div>\n\n    <div class=\"columns\" formArrayName=\"issueTypeColumns\">\n      <div *ngFor=\"let column of columnsFormArray.controls; let i = index\" class=\"item\">\n        <div class=\"flex\" [formGroupName]=\"i\">\n          <mat-form-field>\n            <mat-label>Name</mat-label>\n            <input matInput placeholder=\"Name\" formControlName=\"name\">\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>Field Name</mat-label>\n            <input matInput placeholder=\"Description\" formControlName=\"filedName\">\n          </mat-form-field>\n\n          <mat-checkbox class=\"example-margin\" formControlName=\"isRequired\">Is required</mat-checkbox>\n\n          <button mat-raised-button color=\"primary\" (click)=\"removeColumn(i)\">Remove Column</button>\n        </div>\n      </div>\n    </div>\n\n  </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}