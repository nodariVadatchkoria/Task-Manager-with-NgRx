{"ast":null,"code":"import { BehaviorSubject, tap } from \"rxjs\";\nimport { BaseService } from \"../core/services\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../core/services/project.service\";\nexport class ProjectFacade extends BaseService {\n  constructor(projectService) {\n    super();\n    this.projectService = projectService;\n    this.myProjects = new BehaviorSubject([]);\n    this.myProjects$ = this.myProjects.asObservable();\n  }\n  setProject(project) {\n    if (project) {\n      localStorage.setItem('project', JSON.stringify(project));\n    }\n  }\n  getMyProjects$() {\n    return this.projectService.getAllProjects().pipe(tap(projects => this.myProjects.next(projects)));\n  }\n  getProject() {\n    const project = localStorage.getItem('project');\n    return project ? JSON.parse(project) : null;\n  }\n  setProjectId(projectId) {\n    this.projectService.getProjectById(projectId).subscribe(project => {\n      localStorage.setItem('project', JSON.stringify(project));\n    });\n  }\n  getProjectId() {\n    const project = localStorage.getItem('project');\n    return project ? JSON.parse(project).id : null;\n  }\n}\nProjectFacade.ɵfac = function ProjectFacade_Factory(t) {\n  return new (t || ProjectFacade)(i0.ɵɵinject(i1.ProjectService));\n};\nProjectFacade.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProjectFacade,\n  factory: ProjectFacade.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAQA,eAAe,EAAcC,GAAG,QAAO,MAAM;AAGrD,SAAQC,WAAW,QAAO,kBAAkB;;;AAG5C,OAAM,MAAOC,aAAc,SAAQD,WAAW;EAK5CE,YAAoBC,cAA8B;IAChD,KAAK,EAAE;IADW,mBAAc,GAAdA,cAAc;IAHlC,eAAU,GAAgC,IAAIL,eAAe,CAAa,EAAE,CAAC;IAC7E,gBAAW,GAAG,IAAI,CAACM,UAAU,CAACC,YAAY,EAAE;EAGlC;EAEVC,UAAU,CAACC,OAAY;IACrB,IAAIA,OAAO,EAAE;MACXC,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC,CAAC;;EAE5D;EACFK,cAAc;IACV,OAAO,IAAI,CAACT,cAAc,CAACU,cAAc,EAAE,CACxCC,IAAI,CACHf,GAAG,CAACgB,QAAQ,IAAI,IAAI,CAACX,UAAU,CAACY,IAAI,CAACD,QAAQ,CAAC,CAAC,CAChD;EACL;EACAE,UAAU;IACR,MAAMV,OAAO,GAAGC,YAAY,CAACU,OAAO,CAAC,SAAS,CAAC;IAE/C,OAAOX,OAAO,GAAGG,IAAI,CAACS,KAAK,CAACZ,OAAO,CAAC,GAAG,IAAI;EAC7C;EACAa,YAAY,CAACC,SAAiB;IAC5B,IAAI,CAAClB,cAAc,CAACmB,cAAc,CAACD,SAAS,CAAC,CAACE,SAAS,CAAEhB,OAAO,IAAI;MAC9DC,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC,CAAC;IAE9D,CAAC,CACA;EACH;EACFiB,YAAY;IACR,MAAMjB,OAAO,GAAGC,YAAY,CAACU,OAAO,CAAC,SAAS,CAAC;IAC/C,OAAOX,OAAO,GAAGG,IAAI,CAACS,KAAK,CAACZ,OAAO,CAAC,CAACkB,EAAE,GAAG,IAAI;EAChD;;AAlCWxB,aAAc;mBAAdA,aAAa;AAAA;AAAbA,aAAc;SAAdA,aAAa;EAAAyB,SAAbzB,aAAa;EAAA0B,YADA;AAAM","names":["BehaviorSubject","tap","BaseService","ProjectFacade","constructor","projectService","myProjects","asObservable","setProject","project","localStorage","setItem","JSON","stringify","getMyProjects$","getAllProjects","pipe","projects","next","getProject","getItem","parse","setProjectId","projectId","getProjectById","subscribe","getProjectId","id","factory","providedIn"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/facades/project-facade.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {ProjectService} from \"../core/services/project.service\";\nimport {BehaviorSubject, Observable, tap} from \"rxjs\";\nimport {IProject} from \"../core/interfaces/iproject\";\nimport {PaginationResponse} from \"../core/interfaces/pagination-response\";\nimport {BaseService} from \"../core/services\";\n\n@Injectable({ providedIn: 'root' })\nexport class ProjectFacade extends BaseService{\n\n  myProjects: BehaviorSubject<IProject[]> = new BehaviorSubject<IProject[]>([]);\n  myProjects$ = this.myProjects.asObservable();\n\n  constructor(private projectService: ProjectService ) {\n    super();}\n\n  setProject(project: any) {\n    if (project) {\n      localStorage.setItem('project', JSON.stringify(project))\n    }\n  }\ngetMyProjects$(): Observable<IProject[]>{\n    return this.projectService.getAllProjects()\n      .pipe(\n        tap(projects => this.myProjects.next(projects)),\n      )\n  }\n  getProject():IProject {\n    const project = localStorage.getItem('project');\n\n    return project ? JSON.parse(project) : null;\n  }\n  setProjectId(projectId: number) {\n    this.projectService.getProjectById(projectId).subscribe((project) => {\n          localStorage.setItem('project', JSON.stringify(project));\n\n    }\n    )\n  }\ngetProjectId(): number {\n    const project = localStorage.getItem('project');\n    return project ? JSON.parse(project).id : null;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}