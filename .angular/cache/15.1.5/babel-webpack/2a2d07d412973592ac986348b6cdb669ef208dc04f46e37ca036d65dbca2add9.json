{"ast":null,"code":"import { FormArray, FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { MAT_DIALOG_DATA } from \"@angular/material/dialog\";\nimport { shareReplay, Subject, takeUntil } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../core/services/task.service\";\nimport * as i2 from \"../../core/services\";\nimport * as i3 from \"../../core/services/epic.service\";\nimport * as i4 from \"../../core/services/project.service\";\nimport * as i5 from \"@angular/material/dialog\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/forms\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"@angular/material/core\";\nimport * as i11 from \"@angular/material/input\";\nimport * as i12 from \"@angular/material/select\";\nfunction TaskAddEditComponent_mat_option_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r6.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", type_r6.name, \" \");\n  }\n}\nfunction TaskAddEditComponent_mat_option_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const epic_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", epic_r7.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", epic_r7.name, \" \");\n  }\n}\nfunction TaskAddEditComponent_mat_option_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const priority_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", priority_r8.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", priority_r8.name, \" \");\n  }\n}\nfunction TaskAddEditComponent_mat_option_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const user_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", user_r9.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", user_r9.firstName, \" \", user_r9.lastName, \" \");\n  }\n}\nfunction TaskAddEditComponent_mat_option_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const user_r10 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", user_r10.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", user_r10.firstName, \" \", user_r10.lastName, \" \");\n  }\n}\nfunction TaskAddEditComponent_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19)(1, \"mat-form-field\");\n    i0.ɵɵelement(2, \"input\", 20);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const property_r11 = ctx.$implicit;\n    const i_r12 = ctx.index;\n    const ctx_r5 = i0.ɵɵnextContext();\n    let tmp_1_0;\n    let tmp_2_0;\n    i0.ɵɵproperty(\"formGroupName\", i_r12);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"placeholder\", (tmp_1_0 = property_r11.get(\"name\")) == null ? null : tmp_1_0.value)(\"required\", (tmp_2_0 = ctx_r5.form.get(\"isRequired\")) == null ? null : tmp_2_0.value);\n  }\n}\nexport class TaskAddEditComponent {\n  constructor(taskService, issueTypeService, epicService, projectService, dialogRef, data) {\n    this.taskService = taskService;\n    this.issueTypeService = issueTypeService;\n    this.epicService = epicService;\n    this.projectService = projectService;\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.form = new FormGroup({\n      id: new FormControl(''),\n      name: new FormControl('', Validators.required),\n      description: new FormControl('', Validators.required),\n      issueTypeId: new FormControl('', Validators.required),\n      epicId: new FormControl(''),\n      boardId: new FormControl('', Validators.required),\n      boardColumnId: new FormControl(''),\n      isBacklog: new FormControl(false, Validators.required),\n      priority: new FormControl('', Validators.required),\n      taskStatus: new FormControl(this.data.column?.taskStatus || 'ToDo', Validators.required),\n      assigneeId: new FormControl(''),\n      reporterId: new FormControl('', Validators.required),\n      taskProperty: new FormArray([])\n    });\n    this.sub$ = new Subject();\n    this.types$ = this.issueTypeService.getIssueType();\n    this.epics$ = this.epicService.getEpics();\n    this.users$ = this.projectService.getProjectUsers().pipe(shareReplay(2));\n    this.priorities = [{\n      id: 'LOW',\n      name: 'Low'\n    }, {\n      id: 'MEDIUM',\n      name: 'Medium'\n    }, {\n      id: 'HIGH',\n      name: 'High'\n    }];\n  }\n  get taskProperty() {\n    return this.form.get('taskProperty');\n  }\n  ngOnInit() {\n    //this.getTask(this.data.taskId);\n    if (this.data.taskId) {\n      this.getTask(this.data.taskId);\n    } else {\n      this.form.get('issueTypeId')?.valueChanges.pipe(takeUntil(this.sub$)).subscribe(issueTypeId => {\n        this.getIssueTypeProperties(issueTypeId);\n      });\n    }\n    if (this.data.boardId) {\n      this.form.patchValue({\n        boardId: this.data.boardId\n      });\n    }\n    if (this.data.column) {\n      this.form.patchValue({\n        boardColumnId: this.data.column.id\n      });\n    }\n    console.log(this.types$);\n  }\n  getIssueTypeProperties(issueTypeId) {\n    this.issueTypeService.getIssueTypeByID(issueTypeId).pipe(takeUntil(this.sub$)).subscribe(res => {\n      this.taskProperty.clear();\n      res.issueTypeColumns.forEach(property => {\n        this.taskProperty.push(new FormGroup({\n          id: new FormControl(null),\n          name: new FormControl(property.name),\n          filedName: new FormControl(property.filedName),\n          value: new FormControl(null, property.isRequired ? Validators.required : null),\n          isRequired: new FormControl(property.isRequired)\n        }));\n      });\n    });\n  }\n  getTask(taskId) {\n    this.taskService.getTask(taskId).pipe(takeUntil(this.sub$)).subscribe(res => {\n      this.form.patchValue(res);\n      res.taskProperty.forEach(property => {\n        this.taskProperty.push(new FormGroup({\n          id: new FormControl(property.id),\n          name: new FormControl(property.name, Validators.required),\n          filedName: new FormControl(property.filedName, Validators.required),\n          value: new FormControl(property.value, Validators.required),\n          isRequired: new FormControl(property.isRequired, Validators.required)\n        }));\n      });\n    });\n  }\n  save() {\n    console.log(this.form);\n    this.form.markAllAsTouched();\n    if (this.form.invalid) return;\n    if (this.data.taskId) {\n      this.taskService.updateTask(this.data.taskId, this.form.value).pipe(takeUntil(this.sub$)).subscribe(res => {\n        this.dialogRef.close(res);\n      });\n    } else {\n      this.taskService.createTask(this.form.value).pipe(takeUntil(this.sub$)).subscribe(res => {\n        this.dialogRef.close(res);\n      });\n    }\n  }\n  ngOnDestroy() {\n    this.sub$.next(null);\n    this.sub$.complete();\n  }\n}\nTaskAddEditComponent.ɵfac = function TaskAddEditComponent_Factory(t) {\n  return new (t || TaskAddEditComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.IssueTypesService), i0.ɵɵdirectiveInject(i3.EpicService), i0.ɵɵdirectiveInject(i4.ProjectService), i0.ɵɵdirectiveInject(i5.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n};\nTaskAddEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TaskAddEditComponent,\n  selectors: [[\"app-task-add-edit\"]],\n  decls: 37,\n  vars: 16,\n  consts: [[1, \"container\"], [\"mat-dialog-title\", \"\"], [\"mat-dialog-content\", \"\", 3, \"formGroup\"], [1, \"content\"], [1, \"content-left\"], [\"matInput\", \"\", \"placeholder\", \"Task Name\", \"formControlName\", \"name\"], [\"matInput\", \"\", \"placeholder\", \"Description\", \"formControlName\", \"description\", 3, \"rows\"], [1, \"content-right\"], [\"placeholder\", \"Task Type\", \"formControlName\", \"issueTypeId\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"placeholder\", \"Epic\", \"formControlName\", \"epicId\"], [\"placeholder\", \"Task Priority\", \"formControlName\", \"priority\"], [\"placeholder\", \"Assign User\", \"formControlName\", \"assigneeId\"], [\"placeholder\", \"Reporter User\", \"formControlName\", \"reporterId\"], [\"formArrayName\", \"taskProperty\"], [3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"mat-dialog-actions\", \"\"], [\"mat-button\", \"\", 3, \"click\"], [3, \"value\"], [3, \"formGroupName\"], [\"matInput\", \"\", \"formControlName\", \"value\", 3, \"placeholder\", \"required\"]],\n  template: function TaskAddEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n      i0.ɵɵtext(2, \"Create Task\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3)(5, \"div\", 4)(6, \"mat-form-field\");\n      i0.ɵɵelement(7, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"mat-form-field\");\n      i0.ɵɵelement(9, \"textarea\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"div\", 7)(11, \"mat-form-field\")(12, \"mat-select\", 8);\n      i0.ɵɵtemplate(13, TaskAddEditComponent_mat_option_13_Template, 2, 2, \"mat-option\", 9);\n      i0.ɵɵpipe(14, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"mat-form-field\")(16, \"mat-select\", 10);\n      i0.ɵɵtemplate(17, TaskAddEditComponent_mat_option_17_Template, 2, 2, \"mat-option\", 9);\n      i0.ɵɵpipe(18, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"mat-form-field\")(20, \"mat-select\", 11);\n      i0.ɵɵtemplate(21, TaskAddEditComponent_mat_option_21_Template, 2, 2, \"mat-option\", 9);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(22, \"mat-form-field\")(23, \"mat-select\", 12);\n      i0.ɵɵtemplate(24, TaskAddEditComponent_mat_option_24_Template, 2, 3, \"mat-option\", 9);\n      i0.ɵɵpipe(25, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(26, \"mat-form-field\")(27, \"mat-select\", 13);\n      i0.ɵɵtemplate(28, TaskAddEditComponent_mat_option_28_Template, 2, 3, \"mat-option\", 9);\n      i0.ɵɵpipe(29, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(30, \"div\", 14);\n      i0.ɵɵtemplate(31, TaskAddEditComponent_div_31_Template, 3, 3, \"div\", 15);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(32, \"div\", 16)(33, \"button\", 17);\n      i0.ɵɵlistener(\"click\", function TaskAddEditComponent_Template_button_click_33_listener() {\n        return ctx.dialogRef.close();\n      });\n      i0.ɵɵtext(34, \"Cancel\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(35, \"button\", 17);\n      i0.ɵɵlistener(\"click\", function TaskAddEditComponent_Template_button_click_35_listener() {\n        return ctx.save();\n      });\n      i0.ɵɵtext(36, \"Create\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"rows\", 11);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(14, 8, ctx.types$));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(18, 10, ctx.epics$));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.priorities);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(25, 12, ctx.users$));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(29, 14, ctx.users$));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.taskProperty.controls);\n    }\n  },\n  dependencies: [i6.NgForOf, i7.DefaultValueAccessor, i7.NgControlStatus, i7.NgControlStatusGroup, i7.RequiredValidator, i7.FormGroupDirective, i7.FormControlName, i7.FormGroupName, i7.FormArrayName, i5.MatDialogTitle, i5.MatDialogContent, i5.MatDialogActions, i8.MatButton, i9.MatFormField, i10.MatOption, i11.MatInput, i12.MatSelect, i6.AsyncPipe],\n  styles: [\".content[_ngcontent-%COMP%]{width:100%;display:flex;gap:50px;justify-content:space-between}.content-left[_ngcontent-%COMP%]{display:flex;flex-direction:column}\"]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}