{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { loadProjects, loadProjectsFailure, loadProjectsSuccess, setProject } from \"./project.actions\";\nimport { catchError, of, switchMap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../core/services/project.service\";\nimport * as i3 from \"@ngrx/store\";\nexport class ProjectEffects {\n  constructor(actions$, projectService, store) {\n    this.actions$ = actions$;\n    this.projectService = projectService;\n    this.store = store;\n    this.loadProjects$ = createEffect(() => this.actions$.pipe(ofType(loadProjects), switchMap(() => this.store.select(state => state).pipe(tap(data => loadProjectsSuccess({\n      data\n    })), catchError(error => of(loadProjectsFailure({\n      error\n    })))))));\n    this.setProject$ = createEffect(() => this.actions$.pipe(ofType(setProject), switchMap(action => {\n      this.store.dispatch(loadProjectsSuccess({\n        data: action.projectId\n      }));\n    })));\n  }\n}\nProjectEffects.ɵfac = function ProjectEffects_Factory(t) {\n  return new (t || ProjectEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ProjectService), i0.ɵɵinject(i3.Store));\n};\nProjectEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProjectEffects,\n  factory: ProjectEffects.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAiBA,YAAY,EAAEC,MAAM,QAAO,eAAe;AAE3D,SAAQC,YAAY,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,UAAU,QAAO,mBAAmB;AACpG,SAAQC,UAAU,EAAEC,EAAE,EAAEC,SAAS,QAAY,MAAM;;;;;AAOnD,OAAM,MAAOC,cAAc;EACvBC,YACYC,QAAiB,EACjBC,cAA8B,EAC9BC,KAAY;IAFZ,aAAQ,GAARF,QAAQ;IACR,mBAAc,GAAdC,cAAc;IACd,UAAK,GAALC,KAAK;IAIrB,kBAAa,GAAGb,YAAY,CAAC,MAAM,IAAI,CAACW,QAAQ,CAACG,IAAI,CACjDb,MAAM,CAACC,YAAY,CAAC,EACpBM,SAAS,CAAC,MAAM,IAAI,CAACK,KAAK,CAACE,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAAC,CAC9CF,IAAI,CACDG,GAAG,CAAEC,IAAS,IAAKd,mBAAmB,CAAC;MAACc;IAAI,CAAC,CAAC,CAAC,EAC/CZ,UAAU,CAAEa,KAAK,IAAKZ,EAAE,CAACJ,mBAAmB,CAAC;MAACgB;IAAK,CAAC,CAAC,CAAC,CAAC,CAC1D,CAAC,CACL,CAAC;IAEF,gBAAW,GAAGnB,YAAY,CAAC,MAAM,IAAI,CAACW,QAAQ,CAACG,IAAI,CAC/Cb,MAAM,CAACI,UAAU,CAAC,EAClBG,SAAS,CAAEY,MAAM,IAAI;MACjB,IAAI,CAACP,KAAK,CAACQ,QAAQ,CAACjB,mBAAmB,CAAC;QAACc,IAAI,EAAEE,MAAM,CAACE;MAAS,CAAC,CAAC,CAAC;IACtE,CAAC,CACA,CACJ,CAAC;EAjBF;;AANSb,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAc,SAAdd,cAAc;AAAA","names":["createEffect","ofType","loadProjects","loadProjectsFailure","loadProjectsSuccess","setProject","catchError","of","switchMap","ProjectEffects","constructor","actions$","projectService","store","pipe","select","state","tap","data","error","action","dispatch","projectId","factory"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/store/rxProject/project.effect.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Actions, createEffect, ofType} from \"@ngrx/effects\";\nimport {ProjectService} from \"../../core/services/project.service\";\nimport {loadProjects, loadProjectsFailure, loadProjectsSuccess, setProject} from \"./project.actions\";\nimport {catchError, of, switchMap, map} from \"rxjs\";\nimport {Store} from \"@ngrx/store\";\nimport {ProjectState} from \"./project.reducer\";\nimport {state} from \"@angular/animations\";\n\n\n@Injectable()\nexport class ProjectEffects{\n    constructor(\n        private actions$: Actions,\n        private projectService: ProjectService,\n        private store: Store,\n    ) {\n    }\n\nloadProjects$ = createEffect(() => this.actions$.pipe(\n    ofType(loadProjects),\n    switchMap(() => this.store.select((state )=> state)\n        .pipe(\n            tap((data: any) => loadProjectsSuccess({data})),\n            catchError((error) => of(loadProjectsFailure({error})))\n        ))\n    ));\n\n    setProject$ = createEffect(() => this.actions$.pipe(\n        ofType(setProject),\n        switchMap((action) => {\n            this.store.dispatch(loadProjectsSuccess({data: action.projectId}))\n        }\n        )\n    ))\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}