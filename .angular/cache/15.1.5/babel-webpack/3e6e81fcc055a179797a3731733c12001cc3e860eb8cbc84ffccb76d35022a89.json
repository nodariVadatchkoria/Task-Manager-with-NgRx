{"ast":null,"code":"import { inject } from '@angular/core';\nimport { tap } from \"rxjs\";\nimport { BaseService } from \"./base.service\";\nimport { CookieService } from \"./cookie.service\";\nimport * as i0 from \"@angular/core\";\nexport class AuthService extends BaseService {\n  constructor() {\n    super(...arguments);\n    this.cookieService = inject(CookieService);\n  }\n  // get token(): string | null {\n  //   return localStorage.getItem('token');\n  // }\n  // get user(): User | null {\n  //   const user = localStorage.getItem('user');\n  //   return user ? JSON.parse(user) : null;\n  // }\n  login(payload) {\n    return this.post('auth/login', payload).pipe(tap(response => {\n      this.setToken(response.token.accessToken);\n      this.setUser(response.user);\n      this.setRefreshToken(response.token.refreshToken);\n      this.setUserInCookie(response.user, response);\n    }));\n  }\n  register(payload) {\n    return this.post('auth/signup', payload);\n  }\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n  setRefreshToken(refreshToken) {\n    localStorage.setItem('refreshToken', refreshToken);\n  }\n  setUser(user) {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n  setUserInCookie(user, Response) {\n    const expiereTime = 24 * 60 * 60 * 1000;\n    const cookieExpire = new Date(Date.now() + expiereTime);\n    this.cookieService.setCookie('user', JSON.stringify(user), cookieExpire);\n    this.cookieService.setCookie('token', Response.token.accessToken, cookieExpire);\n    this.cookieService.setCookie('refreshToken', Response.token.refreshToken, cookieExpire);\n  }\n  getUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n  logout() {\n    localStorage.clear();\n  }\n  signOut() {\n    return this.post('auth/signout', {});\n  }\n  refreshToken(refreshToken) {\n    return this.post('auth/token', {\n      refreshToken\n    });\n  }\n  getRefreshToken() {\n    return localStorage.getItem('refreshToken');\n  }\n  checkEmail(email) {\n    return this.post('auth/checkEmail', {\n      email\n    });\n  }\n  login2(payload) {\n    return this.post('auth/login', payload).pipe(tap(response => {\n      const expiereTime = 24 * 60 * 60 * 1000;\n      const cookieExpire = new Date(Date.now() + expiereTime);\n      this.cookieService.setCookie('token', response.token.accessToken, cookieExpire);\n      this.cookieService.setCookie('refreshToken', response.token.refreshToken, cookieExpire);\n      this.setUser(response.user);\n    }));\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n}\nAuthService.ɵfac = /*@__PURE__*/function () {\n  let ɵAuthService_BaseFactory;\n  return function AuthService_Factory(t) {\n    return (ɵAuthService_BaseFactory || (ɵAuthService_BaseFactory = i0.ɵɵgetInheritedFactory(AuthService)))(t || AuthService);\n  };\n}();\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}