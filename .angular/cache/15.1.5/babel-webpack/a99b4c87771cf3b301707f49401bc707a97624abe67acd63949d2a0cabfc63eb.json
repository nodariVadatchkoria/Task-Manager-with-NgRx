{"ast":null,"code":"import { first, switchMap } from 'rxjs';\nimport { select } from \"@ngrx/store\";\nimport { currentProject } from \"../../store/rxProject/project.selectors\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"../../facades/project-facade.service\";\nexport class ProjectInterceptor {\n  constructor(store, projectFacade) {\n    this.store = store;\n    this.projectFacade = projectFacade;\n  }\n  intercept(request, next) {\n    return this.store.pipe(select(currentProject), first(), switchMap(project => {\n      if (project) {\n        request = request.clone({\n          setHeaders: {\n            'project': project.id.toString()\n          }\n        });\n      }\n      // const project = this.projectFacade.getProject();\n      // if (project) {\n      //     request = request.clone({\n      //         setHeaders: {\n      //             project: String(project.id)\n      //         }\n      //     })\n      // }\n      return next.handle(request);\n    }));\n  }\n}\nProjectInterceptor.ɵfac = function ProjectInterceptor_Factory(t) {\n  return new (t || ProjectInterceptor)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.ProjectFacade));\n};\nProjectInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProjectInterceptor,\n  factory: ProjectInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAOA,SAAQA,KAAK,EAAcC,SAAS,QAAO,MAAM;AACjD,SAAQC,MAAM,QAAc,aAAa;AAEzC,SAAQC,cAAc,QAAO,yCAAyC;;;;AAItE,OAAM,MAAOC,kBAAkB;EAC3BC,YACYC,KAA6C,EAC7CC,aAA4B;IAD5B,UAAK,GAALD,KAAK;IACL,kBAAa,GAAbC,aAAa;EAEzB;EAEAC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACtD,OAAO,IAAI,CAACJ,KAAK,CAACK,IAAI,CAClBT,MAAM,CAACC,cAAc,CAAC,EACpBH,KAAK,EAAE,EACLC,SAAS,CAAEW,OAAO,IAAI;MACd,IAAIA,OAAO,EAAE;QAELH,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;UACpBC,UAAU,EAAE;YACR,SAAS,EAAEF,OAAO,CAACG,EAAE,CAACC,QAAQ;;SAErC,CAAC;;MAE1B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,OAAON,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;IAEvB,CAAC,CACJ,CACJ;EACD;;AAjCSL,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAc,SAAlBd,kBAAkB;AAAA","names":["first","switchMap","select","currentProject","ProjectInterceptor","constructor","store","projectFacade","intercept","request","next","pipe","project","clone","setHeaders","id","toString","handle","factory"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/core/interceptors/project.interceptor.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {\n    HttpRequest,\n    HttpHandler,\n    HttpEvent,\n    HttpInterceptor,\n} from '@angular/common/http';\nimport {first, Observable, switchMap} from 'rxjs';\nimport {select, Store} from \"@ngrx/store\";\nimport {ProjectStateModule} from \"../../store\";\nimport {currentProject} from \"../../store/rxProject/project.selectors\";\nimport {ProjectFacade} from \"../../facades/project-facade.service\";\n\n@Injectable()\nexport class ProjectInterceptor implements HttpInterceptor {\n    constructor(\n        private store: Store<{ project: ProjectStateModule }>,\n        private projectFacade: ProjectFacade,\n    ) {\n    }\n\n    intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n        return this.store.pipe(\n            select(currentProject),\n              first(),\n                switchMap((project) => {\n                        if (project) {\n\n                                request = request.clone({\n                                    setHeaders: {\n                                        'project': project.id.toString()\n                                    }\n                                })\n                        }\n        // const project = this.projectFacade.getProject();\n        // if (project) {\n        //     request = request.clone({\n        //         setHeaders: {\n        //             project: String(project.id)\n        //         }\n        //     })\n        // }\n        return next.handle(request);\n\n            }\n        )\n    )\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}