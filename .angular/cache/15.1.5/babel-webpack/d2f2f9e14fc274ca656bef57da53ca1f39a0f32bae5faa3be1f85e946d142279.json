{"ast":null,"code":"import { ComponentPortal, PortalModule } from '@angular/cdk/portal';\nimport * as i1$1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Output, Input, Component, HostListener, ViewEncapsulation, Injectable, InjectionToken, ChangeDetectionStrategy, ViewChild, Optional, Inject, forwardRef, NgModule } from '@angular/core';\nimport * as i4 from '@angular/forms';\nimport { FormGroup, FormControl, Validators, NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i3 from '@angular/material/legacy-button';\nimport { MatLegacyButtonModule } from '@angular/material/legacy-button';\nimport { MatLegacyCardModule } from '@angular/material/legacy-card';\nimport * as i2$1 from '@angular/material/legacy-dialog';\nimport { MatLegacyDialogModule } from '@angular/material/legacy-dialog';\nimport * as i2$2 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i2 from '@angular/material/legacy-input';\nimport { MAT_LEGACY_INPUT_VALUE_ACCESSOR, MatLegacyInputModule } from '@angular/material/legacy-input';\nimport { MatLegacyRadioModule } from '@angular/material/legacy-radio';\nimport { Subject, merge, Subscription, of } from 'rxjs';\nimport { takeUntil, debounceTime, distinctUntilChanged, take, filter } from 'rxjs/operators';\nimport * as i1 from '@angular/material/legacy-form-field';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport * as i3$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { mixinColor } from '@angular/material/core';\nimport { matDatepickerAnimations } from '@angular/material/datepicker';\nimport * as i5 from '@angular/cdk/bidi';\nconst _c0 = function (a0) {\n  return {\n    \"active\": a0\n  };\n};\nfunction NgxMatColorCollectionComponent_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function NgxMatColorCollectionComponent_button_1_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const c_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.select(c_r2));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const c_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-color\", c_r2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c0, ctx_r0.selectedColor === c_r2));\n  }\n}\nfunction NgxMatColorCollectionComponent_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function NgxMatColorCollectionComponent_button_3_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const c_r5 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.select(c_r5));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const c_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-color\", c_r5);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c0, ctx_r1.selectedColor === c_r5));\n  }\n}\nconst _c1 = [\"button\"];\nconst trimLeft = /^\\s+/;\nconst trimRight = /\\s+$/;\nconst tinyCounter = 0;\nconst mathRound = Math.round;\nconst mathMin = Math.min;\nconst mathMax = Math.max;\nconst mathRandom = Math.random;\nconst NUMERIC_REGEX = /[^0-9]/g;\nconst MAX_RGB = 255;\nconst MIN_RGB = 0;\n/** List basic colors */\nconst BASIC_COLORS = [\"#ffffff\", \"#ffff00\", \"#ff00ff\", \"#ff0000\", \"#c0c0c0\", \"#808080\", \"#808000\", \"#800080\", \"#800000\", \"#00ffff\", \"#00ff00\", \"#008080\", \"#008000\", \"#0000ff\", \"#000080\", \"#000000\"];\n/**\r\n * Get color at position\r\n * @param ctx\r\n * @param x\r\n * @param y\r\n */\nfunction getColorAtPosition(ctx, x, y) {\n  const imageData = ctx.getImageData(x, y, 1, 1).data;\n  return {\n    r: imageData[0],\n    g: imageData[1],\n    b: imageData[2]\n  };\n}\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n  var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16)), pad2(convertDecimalToHex(a))];\n  // Return a 4 character hex if possible\n  if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n  }\n  return hex.join(\"\");\n}\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n  return c.length == 1 ? '0' + c : '' + c;\n}\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n  return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n  return parseIntFromHex(h) / 255;\n}\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n  return parseInt(val, 16);\n}\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n  var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];\n  // Return a 3 character hex if possible\n  if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n  }\n  return hex.join(\"\");\n}\n// Actual matching.\n// Parentheses and commas are optional, but not required.\n// Whitespace can take the place of commas or opening parent\nconst CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\nconst CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\nconst CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\nconst PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\nconst PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\nconst matchers = {\n  CSS_UNIT: new RegExp(CSS_UNIT),\n  rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n  rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n  hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n  hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n  hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n  hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n  hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n  hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n  hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n  hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n};\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n  color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();\n  // Try to match string input using regular expressions.\n  // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n  // Just return an object and let the conversion functions handle that.\n  // This way the result will be the same whether the tinycolor is initialized with string or object.\n  let match;\n  let obj;\n  if (match = matchers.rgb.exec(color)) {\n    return {\n      r: match[1],\n      g: match[2],\n      b: match[3],\n      a: 1\n    };\n  }\n  if (match = matchers.rgba.exec(color)) {\n    return {\n      r: match[1],\n      g: match[2],\n      b: match[3],\n      a: match[4]\n    };\n  }\n  if (match = matchers.hex8.exec(color)) {\n    return {\n      r: parseIntFromHex(match[1]),\n      g: parseIntFromHex(match[2]),\n      b: parseIntFromHex(match[3]),\n      a: convertHexToDecimal(match[4])\n    };\n  }\n  if (match = matchers.hex6.exec(color)) {\n    return {\n      r: parseIntFromHex(match[1]),\n      g: parseIntFromHex(match[2]),\n      b: parseIntFromHex(match[3]),\n      a: 1\n    };\n  }\n  if (match = matchers.hex4.exec(color)) {\n    return {\n      r: parseIntFromHex(match[1] + '' + match[1]),\n      g: parseIntFromHex(match[2] + '' + match[2]),\n      b: parseIntFromHex(match[3] + '' + match[3]),\n      a: convertHexToDecimal(match[4] + '' + match[4])\n    };\n  }\n  if (match = matchers.hex3.exec(color)) {\n    return {\n      r: parseIntFromHex(match[1] + '' + match[1]),\n      g: parseIntFromHex(match[2] + '' + match[2]),\n      b: parseIntFromHex(match[3] + '' + match[3]),\n      a: 1\n    };\n  }\n  return null;\n}\nfunction createMissingDateImplError(provider) {\n  return Error(`NgxMatColorPicker: No provider found for ${provider}. You must define MAT_COLOR_FORMATS in your module`);\n}\nclass Color {\n  constructor(_r, _g, _b, _a) {\n    this.r = _r > MAX_RGB ? MAX_RGB : _r;\n    this.g = _g > MAX_RGB ? MAX_RGB : _g;\n    this.b = _b > MAX_RGB ? MAX_RGB : _b;\n    if (_a != null) {\n      this.a = _a > 1 ? 1 : _a;\n    } else {\n      this.a = 1;\n    }\n    this.roundA = Math.round(this.a);\n    this.hex = rgbToHex(this.r, this.g, this.b);\n    this.rgba = this.toRgba();\n  }\n  toHex(allow3Char) {\n    return rgbToHex(this.r, this.g, this.b, allow3Char);\n  }\n  toRgba() {\n    return `rgba(${this.r},${this.g},${this.b},${this.a})`;\n  }\n  toHexString(allow3Char) {\n    return '#' + this.toHex(allow3Char);\n  }\n  toRgbString() {\n    return this.a === 1 ? \"rgb(\" + Math.round(this.r) + \", \" + Math.round(this.g) + \", \" + Math.round(this.b) + \")\" : \"rgba(\" + Math.round(this.r) + \", \" + Math.round(this.g) + \", \" + Math.round(this.b) + \", \" + this.roundA + \")\";\n  }\n  toHex8(allow4Char) {\n    return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);\n  }\n  toHex8String(allow4Char) {\n    return '#' + this.toHex8(allow4Char);\n  }\n  toString(format) {\n    let formatSet = !!format;\n    let formattedString;\n    let hasAlpha = this.a < 1 && this.a >= 0;\n    let needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\");\n    if (needsAlphaFormat) {\n      return this.toRgbString();\n    }\n    if (format === \"rgb\") {\n      formattedString = this.toRgbString();\n    }\n    if (format === \"hex\" || format === \"hex6\") {\n      formattedString = this.toHexString();\n    }\n    if (format === \"hex3\") {\n      formattedString = this.toHexString(true);\n    }\n    if (format === \"hex4\") {\n      formattedString = this.toHex8String(true);\n    }\n    if (format === \"hex8\") {\n      formattedString = this.toHex8String();\n    }\n    return formattedString || this.toHexString();\n  }\n}\nclass NgxMatBaseColorCanvas {\n  constructor(zone, elementId) {\n    this.zone = zone;\n    this.colorChanged = new EventEmitter();\n    this.x = 0;\n    this.y = 0;\n    this.drag = false;\n    this._destroyed = new Subject();\n    this.elementId = elementId;\n  }\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  ngAfterViewInit() {\n    this.canvas = document.getElementById(this.elementId);\n    this.ctx = this.canvas.getContext('2d');\n    this.width = this.canvas.width;\n    this.height = this.canvas.height;\n    this.draw();\n  }\n  draw() {\n    this.ctx.clearRect(0, 0, this.width, this.height);\n    this.ctx.rect(0, 0, this.width, this.height);\n    this.fillGradient();\n    if (this.y != 0) {\n      this.redrawIndicator(this.x, this.y);\n    }\n  }\n  onMousedown(e) {\n    this.drag = true;\n    this.changeColor(e);\n    this.zone.runOutsideAngular(() => {\n      this.canvas.addEventListener('mousemove', this.onMousemove.bind(this));\n    });\n  }\n  onMousemove(e) {\n    if (this.drag) {\n      this.zone.run(() => {\n        this.changeColor(e);\n      });\n    }\n  }\n  onMouseup(e) {\n    this.drag = false;\n    this.canvas.removeEventListener('mousemove', this.onMousemove);\n  }\n  emitChange(color) {\n    this.colorChanged.emit(color);\n  }\n}\n/** @nocollapse */\nNgxMatBaseColorCanvas.ɵfac = function NgxMatBaseColorCanvas_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\n/** @nocollapse */\nNgxMatBaseColorCanvas.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMatBaseColorCanvas,\n  inputs: {\n    color: \"color\"\n  },\n  outputs: {\n    colorChanged: \"colorChanged\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatBaseColorCanvas, [{\n    type: Directive,\n    args: [{}]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: undefined\n    }];\n  }, {\n    colorChanged: [{\n      type: Output\n    }],\n    color: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatColorSliderComponent extends NgxMatBaseColorCanvas {\n  constructor(zone) {\n    super(zone, 'color-strip');\n    this.zone = zone;\n  }\n  ngOnInit() {}\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n  }\n  fillGradient() {\n    const grd = this.ctx.createLinearGradient(0, 0, 0, this.height);\n    grd.addColorStop(0, 'rgba(255, 0, 0, 1)');\n    grd.addColorStop(0.17, 'rgba(255, 255, 0, 1)');\n    grd.addColorStop(0.34, 'rgba(0, 255, 0, 1)');\n    grd.addColorStop(0.51, 'rgba(0, 255, 255, 1)');\n    grd.addColorStop(0.68, 'rgba(0, 0, 255, 1)');\n    grd.addColorStop(0.85, 'rgba(255, 0, 255, 1)');\n    grd.addColorStop(1, 'rgba(255, 0, 0, 1)');\n    this.ctx.fillStyle = grd;\n    this.ctx.fill();\n  }\n  redrawIndicator(x, y) {\n    this.ctx.beginPath();\n    this.ctx.strokeStyle = 'white';\n    this.ctx.lineWidth = 2;\n    this.ctx.arc(7.5, y, 7.5, 0, 2 * Math.PI, false);\n    this.ctx.stroke();\n    this.ctx.closePath();\n  }\n  changeColor(e) {\n    this.x = e.offsetX;\n    this.y = e.offsetY;\n    this.draw();\n    const {\n      r,\n      g,\n      b\n    } = getColorAtPosition(this.ctx, e.offsetX, e.offsetY);\n    this.emitChange(new Color(r, g, b));\n  }\n}\n/** @nocollapse */\nNgxMatColorSliderComponent.ɵfac = function NgxMatColorSliderComponent_Factory(t) {\n  return new (t || NgxMatColorSliderComponent)(i0.ɵɵdirectiveInject(i0.NgZone));\n};\n/** @nocollapse */\nNgxMatColorSliderComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatColorSliderComponent,\n  selectors: [[\"ngx-mat-color-slider\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"id\", \"color-strip\", \"width\", \"15\", \"height\", \"200\", 1, \"zone-strip\", 3, \"mousedown\", \"mouseup\"]],\n  template: function NgxMatColorSliderComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"canvas\", 0);\n      i0.ɵɵlistener(\"mousedown\", function NgxMatColorSliderComponent_Template_canvas_mousedown_0_listener($event) {\n        return ctx.onMousedown($event);\n      })(\"mouseup\", function NgxMatColorSliderComponent_Template_canvas_mouseup_0_listener($event) {\n        return ctx.onMouseup($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatColorSliderComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-color-slider',\n      template: \"<canvas id=\\\"color-strip\\\" class=\\\"zone-strip\\\" (mousedown)=\\\"onMousedown($event)\\\" (mouseup)=\\\"onMouseup($event)\\\"\\r\\n width=\\\"15\\\" height=\\\"200\\\"></canvas>\"\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, null);\n})();\nclass NumericColorInputDirective {\n  constructor() {}\n  onInput($event) {\n    this._formatInput($event.target);\n  }\n  /**\r\n  * Format input\r\n  * @param input\r\n  */\n  _formatInput(input) {\n    let val = Number(input.value.replace(NUMERIC_REGEX, ''));\n    val = isNaN(val) ? 0 : val;\n    input.value = val;\n  }\n}\n/** @nocollapse */\nNumericColorInputDirective.ɵfac = function NumericColorInputDirective_Factory(t) {\n  return new (t || NumericColorInputDirective)();\n};\n/** @nocollapse */\nNumericColorInputDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NumericColorInputDirective,\n  selectors: [[\"\", \"ngxMatNumericColorInput\", \"\"]],\n  hostBindings: function NumericColorInputDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"input\", function NumericColorInputDirective_input_HostBindingHandler($event) {\n        return ctx.onInput($event);\n      });\n    }\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NumericColorInputDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxMatNumericColorInput]'\n    }]\n  }], function () {\n    return [];\n  }, {\n    onInput: [{\n      type: HostListener,\n      args: ['input', ['$event']]\n    }]\n  });\n})();\nconst RADIUS_NOB = 5;\nclass NgxMatColorCanvasComponent extends NgxMatBaseColorCanvas {\n  constructor(zone) {\n    super(zone, 'color-block');\n    this.zone = zone;\n    this._resetBaseColor = true;\n    this.formGroup = new FormGroup({\n      r: new FormControl(null, [Validators.required]),\n      g: new FormControl(null, [Validators.required]),\n      b: new FormControl(null, [Validators.required]),\n      a: new FormControl(null, [Validators.required]),\n      hex: new FormControl(null, [Validators.required, Validators.pattern(matchers.hex6)])\n    });\n  }\n  get rCtrl() {\n    return this.formGroup.get('r');\n  }\n  get gCtrl() {\n    return this.formGroup.get('g');\n  }\n  get bCtrl() {\n    return this.formGroup.get('b');\n  }\n  get aCtrl() {\n    return this.formGroup.get('a');\n  }\n  get hexCtrl() {\n    return this.formGroup.get('hex');\n  }\n  ngOnInit() {\n    const rgbaCtrl$ = merge(this.rCtrl.valueChanges, this.gCtrl.valueChanges, this.bCtrl.valueChanges, this.aCtrl.valueChanges);\n    rgbaCtrl$.pipe(takeUntil(this._destroyed), debounceTime(400)).subscribe(_ => {\n      const color = new Color(Number(this.rCtrl.value), Number(this.gCtrl.value), Number(this.bCtrl.value), Number(this.aCtrl.value));\n      this.emitChange(color);\n    });\n    const hexCtrl$ = this.hexCtrl.valueChanges;\n    hexCtrl$.pipe(takeUntil(this._destroyed), debounceTime(400), distinctUntilChanged()).subscribe(hex => {\n      const obj = stringInputToObject(hex);\n      if (obj != null) {\n        const color = new Color(obj.r, obj.g, obj.b, obj.a);\n        this.emitChange(color);\n      }\n    });\n  }\n  ngOnChanges(changes) {\n    if (changes.color && changes.color.currentValue) {\n      this.updateForm(changes.color.currentValue);\n      if (this._resetBaseColor) {\n        this._baseColor = changes.color.currentValue;\n      }\n      this._resetBaseColor = true;\n      if (!changes.color.firstChange) {\n        this.draw();\n      }\n    }\n  }\n  updateForm(val) {\n    const config = {\n      emitEvent: false\n    };\n    this.rCtrl.setValue(val.r, config);\n    this.gCtrl.setValue(val.g, config);\n    this.bCtrl.setValue(val.b, config);\n    this.aCtrl.setValue(val.a, config);\n    this.hexCtrl.setValue(val.hex, config);\n  }\n  redrawIndicator(x, y) {\n    this.ctx.beginPath();\n    this.ctx.strokeStyle = 'white';\n    this.ctx.arc(x, y, RADIUS_NOB, 0, 2 * Math.PI, false);\n    this.ctx.stroke();\n    this.ctx.closePath();\n  }\n  fillGradient() {\n    this.ctx.fillStyle = this._baseColor ? this._baseColor.rgba : 'rgba(255,255,255,1)';\n    this.ctx.fillRect(0, 0, this.width, this.height);\n    const grdWhite = this.ctx.createLinearGradient(0, 0, this.width, 0);\n    grdWhite.addColorStop(0, 'rgba(255,255,255,1)');\n    grdWhite.addColorStop(1, 'rgba(255,255,255,0)');\n    this.ctx.fillStyle = grdWhite;\n    this.ctx.fillRect(0, 0, this.width, this.height);\n    const grdBlack = this.ctx.createLinearGradient(0, 0, 0, this.height);\n    grdBlack.addColorStop(0, 'rgba(0,0,0,0)');\n    grdBlack.addColorStop(1, 'rgba(0,0,0,1)');\n    this.ctx.fillStyle = grdBlack;\n    this.ctx.fillRect(0, 0, this.width, this.height);\n  }\n  onSliderColorChanged(c) {\n    this._baseColor = c;\n    this.color = c;\n    this.fillGradient();\n    this.emitChange(c);\n  }\n  changeColor(e) {\n    this.x = e.offsetX;\n    this.y = e.offsetY;\n    this._resetBaseColor = false;\n    this.draw();\n    const {\n      r,\n      g,\n      b\n    } = getColorAtPosition(this.ctx, e.offsetX, e.offsetY);\n    this.emitChange(new Color(r, g, b));\n  }\n}\n/** @nocollapse */\nNgxMatColorCanvasComponent.ɵfac = function NgxMatColorCanvasComponent_Factory(t) {\n  return new (t || NgxMatColorCanvasComponent)(i0.ɵɵdirectiveInject(i0.NgZone));\n};\n/** @nocollapse */\nNgxMatColorCanvasComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatColorCanvasComponent,\n  selectors: [[\"ngx-mat-color-canvas\"]],\n  hostAttrs: [1, \"ngx-mat-color-canvas\"],\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  decls: 30,\n  vars: 3,\n  consts: [[3, \"formGroup\"], [1, \"color-canvas-row\"], [1, \"zone-canvas\"], [\"id\", \"color-block\", \"width\", \"200\", \"height\", \"200\", 1, \"zone-block\", 3, \"mousedown\", \"mouseup\"], [3, \"colorChanged\"], [1, \"zone-inputs\"], [\"matInput\", \"\", \"formControlName\", \"r\", \"ngxMatNumericColorInput\", \"\", \"autocomplete\", \"off\"], [\"matInput\", \"\", \"formControlName\", \"g\", \"ngxMatNumericColorInput\", \"\", \"autocomplete\", \"off\"], [\"matInput\", \"\", \"formControlName\", \"b\", \"ngxMatNumericColorInput\", \"\", \"autocomplete\", \"off\"], [\"mat-mini-fab\", \"\", 1, \"preview\"], [\"matPrefix\", \"\", 1, \"symbol\"], [\"matInput\", \"\", \"formControlName\", \"hex\", \"autocomplete\", \"off\"], [\"matInput\", \"\", \"formControlName\", \"a\", \"type\", \"number\", \"min\", \"0\", \"max\", \"1\", \"step\", \"0.1\", \"autocomplete\", \"off\"]],\n  template: function NgxMatColorCanvasComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"canvas\", 3);\n      i0.ɵɵlistener(\"mousedown\", function NgxMatColorCanvasComponent_Template_canvas_mousedown_3_listener($event) {\n        return ctx.onMousedown($event);\n      })(\"mouseup\", function NgxMatColorCanvasComponent_Template_canvas_mouseup_3_listener($event) {\n        return ctx.onMouseup($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"ngx-mat-color-slider\", 4);\n      i0.ɵɵlistener(\"colorChanged\", function NgxMatColorCanvasComponent_Template_ngx_mat_color_slider_colorChanged_4_listener($event) {\n        return ctx.onSliderColorChanged($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 5)(6, \"mat-form-field\")(7, \"mat-label\");\n      i0.ɵɵtext(8, \"R\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"mat-form-field\")(11, \"mat-label\");\n      i0.ɵɵtext(12, \"G\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"mat-form-field\")(15, \"mat-label\");\n      i0.ɵɵtext(16, \"B\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 8);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(18, \"div\", 1);\n      i0.ɵɵelement(19, \"button\", 9);\n      i0.ɵɵelementStart(20, \"mat-form-field\")(21, \"mat-label\");\n      i0.ɵɵtext(22, \"HEX6\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"mat-label\", 10);\n      i0.ɵɵtext(24, \"#\\xA0\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(25, \"input\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"mat-form-field\")(27, \"mat-label\");\n      i0.ɵɵtext(28, \"A\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(29, \"input\", 12);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.formGroup);\n      i0.ɵɵadvance(19);\n      i0.ɵɵstyleProp(\"background-color\", (ctx.color == null ? null : ctx.color.rgba) || \"transparent\");\n    }\n  },\n  dependencies: [i1.MatLegacyFormField, i1.MatLegacyLabel, i1.MatLegacyPrefix, i2.MatLegacyInput, i3.MatLegacyButton, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.MinValidator, i4.MaxValidator, i4.FormGroupDirective, i4.FormControlName, NgxMatColorSliderComponent, NumericColorInputDirective],\n  styles: [\".ngx-mat-color-canvas .color-canvas-row{display:flex}.ngx-mat-color-canvas .color-canvas-row:first-of-type{height:200px;margin-bottom:12px}.ngx-mat-color-canvas .color-canvas-row:first-of-type .card{height:180px}.ngx-mat-color-canvas .color-canvas-row canvas:hover{cursor:crosshair}.ngx-mat-color-canvas .color-canvas-row .zone{display:flex}.ngx-mat-color-canvas .color-canvas-row .zone-canvas{height:200px}.ngx-mat-color-canvas .color-canvas-row .zone-canvas .zone-block{border:1px solid rgba(0,0,0,.12)}.ngx-mat-color-canvas .color-canvas-row .zone-strip{flex-basis:auto;margin-left:10px}.ngx-mat-color-canvas .color-canvas-row .zone-inputs{display:flex;width:40px;height:200px;flex-direction:column;margin-left:16px;margin-top:12px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2){display:flex}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .preview{min-width:40px;min-height:40px;height:40px;width:40px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field{margin-left:16px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field:first-of-type{width:170px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field:first-of-type .symbol{font-weight:700;color:#0000008a}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field:last-of-type{width:40px}.ngx-mat-color-canvas .mat-form-field-label{font-weight:700}\\n\"],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatColorCanvasComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-color-canvas',\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        'class': 'ngx-mat-color-canvas'\n      },\n      template: \"<form [formGroup]=\\\"formGroup\\\">\\r\\n    <div class=\\\"color-canvas-row\\\">\\r\\n        <div class=\\\"zone-canvas\\\">\\r\\n            <canvas id=\\\"color-block\\\" class=\\\"zone-block\\\" (mousedown)=\\\"onMousedown($event)\\\" (mouseup)=\\\"onMouseup($event)\\\"\\r\\n                width=\\\"200\\\" height=\\\"200\\\"></canvas>\\r\\n            <ngx-mat-color-slider (colorChanged)=\\\"onSliderColorChanged($event)\\\"></ngx-mat-color-slider>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"zone-inputs\\\">\\r\\n            <mat-form-field>\\r\\n                <mat-label>R</mat-label>\\r\\n                <input matInput formControlName=\\\"r\\\" ngxMatNumericColorInput autocomplete=\\\"off\\\">\\r\\n            </mat-form-field>\\r\\n\\r\\n            <mat-form-field>\\r\\n                <mat-label>G</mat-label>\\r\\n                <input matInput formControlName=\\\"g\\\" ngxMatNumericColorInput autocomplete=\\\"off\\\">\\r\\n            </mat-form-field>\\r\\n\\r\\n            <mat-form-field>\\r\\n                <mat-label>B</mat-label>\\r\\n                <input matInput formControlName=\\\"b\\\" ngxMatNumericColorInput autocomplete=\\\"off\\\">\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"color-canvas-row\\\">\\r\\n        <button mat-mini-fab [style.background-color]=\\\"color?.rgba || 'transparent'\\\" class=\\\"preview\\\"></button>\\r\\n        <mat-form-field>\\r\\n            <mat-label>HEX6</mat-label>\\r\\n            <mat-label matPrefix class=\\\"symbol\\\">#&nbsp;</mat-label>\\r\\n            <input matInput formControlName=\\\"hex\\\" autocomplete=\\\"off\\\">\\r\\n        </mat-form-field>\\r\\n        <mat-form-field>\\r\\n            <mat-label>A</mat-label>\\r\\n            <input matInput formControlName=\\\"a\\\" type=\\\"number\\\" min=\\\"0\\\" max=\\\"1\\\" step=\\\"0.1\\\" autocomplete=\\\"off\\\">\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n</form>\",\n      styles: [\".ngx-mat-color-canvas .color-canvas-row{display:flex}.ngx-mat-color-canvas .color-canvas-row:first-of-type{height:200px;margin-bottom:12px}.ngx-mat-color-canvas .color-canvas-row:first-of-type .card{height:180px}.ngx-mat-color-canvas .color-canvas-row canvas:hover{cursor:crosshair}.ngx-mat-color-canvas .color-canvas-row .zone{display:flex}.ngx-mat-color-canvas .color-canvas-row .zone-canvas{height:200px}.ngx-mat-color-canvas .color-canvas-row .zone-canvas .zone-block{border:1px solid rgba(0,0,0,.12)}.ngx-mat-color-canvas .color-canvas-row .zone-strip{flex-basis:auto;margin-left:10px}.ngx-mat-color-canvas .color-canvas-row .zone-inputs{display:flex;width:40px;height:200px;flex-direction:column;margin-left:16px;margin-top:12px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2){display:flex}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .preview{min-width:40px;min-height:40px;height:40px;width:40px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field{margin-left:16px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field:first-of-type{width:170px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field:first-of-type .symbol{font-weight:700;color:#0000008a}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field:last-of-type{width:40px}.ngx-mat-color-canvas .mat-form-field-label{font-weight:700}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, null);\n})();\nclass NgxMatColorCollectionComponent {\n  constructor() {\n    this.colorChanged = new EventEmitter();\n    this.colors1 = BASIC_COLORS.slice(0, 8);\n    this.colors2 = BASIC_COLORS.slice(8, 16);\n  }\n  set color(c) {\n    if (c) {\n      this.selectedColor = c.toHexString();\n    }\n  }\n  ngOnInit() {}\n  select(hex) {\n    this.selectedColor = hex;\n    const {\n      r,\n      g,\n      b,\n      a\n    } = stringInputToObject(hex);\n    this.colorChanged.emit(new Color(r, g, b, a));\n  }\n}\n/** @nocollapse */\nNgxMatColorCollectionComponent.ɵfac = function NgxMatColorCollectionComponent_Factory(t) {\n  return new (t || NgxMatColorCollectionComponent)();\n};\n/** @nocollapse */\nNgxMatColorCollectionComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatColorCollectionComponent,\n  selectors: [[\"ngx-mat-color-collection\"]],\n  hostAttrs: [1, \"ngx-mat-color-collection\"],\n  inputs: {\n    color: \"color\"\n  },\n  outputs: {\n    colorChanged: \"colorChanged\"\n  },\n  decls: 4,\n  vars: 2,\n  consts: [[1, \"color-collection-row\"], [\"mat-mini-fab\", \"\", \"class\", \"btn-color\", 3, \"background-color\", \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"mat-mini-fab\", \"\", 1, \"btn-color\", 3, \"ngClass\", \"click\"]],\n  template: function NgxMatColorCollectionComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, NgxMatColorCollectionComponent_button_1_Template, 1, 5, \"button\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 0);\n      i0.ɵɵtemplate(3, NgxMatColorCollectionComponent_button_3_Template, 1, 5, \"button\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.colors1);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.colors2);\n    }\n  },\n  dependencies: [i1$1.NgClass, i1$1.NgForOf, i3.MatLegacyButton],\n  styles: [\".ngx-mat-color-collection .btn-color{height:20px;width:20px;margin-right:11px;box-shadow:none;opacity:.3}.ngx-mat-color-collection .btn-color.active{box-shadow:0 3px 5px -1px #0003,0 6px 10px #00000024,0 1px 18px #0000001f;opacity:1}\\n\"],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatColorCollectionComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-color-collection',\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        'class': 'ngx-mat-color-collection'\n      },\n      template: \"<div class=\\\"color-collection-row\\\">\\r\\n  <button *ngFor=\\\"let c of colors1\\\" mat-mini-fab [style.background-color]=\\\"c\\\" class=\\\"btn-color\\\"\\r\\n    (click)=\\\"select(c)\\\" [ngClass]=\\\"{'active': selectedColor === c}\\\">\\r\\n  </button>\\r\\n</div>\\r\\n<div class=\\\"color-collection-row\\\">\\r\\n  <button *ngFor=\\\"let c of colors2\\\" mat-mini-fab [style.background-color]=\\\"c\\\" class=\\\"btn-color\\\"\\r\\n    (click)=\\\"select(c)\\\" [ngClass]=\\\"{'active': selectedColor === c}\\\">\\r\\n  </button>\\r\\n</div>\",\n      styles: [\".ngx-mat-color-collection .btn-color{height:20px;width:20px;margin-right:11px;box-shadow:none;opacity:.3}.ngx-mat-color-collection .btn-color.active{box-shadow:0 3px 5px -1px #0003,0 6px 10px #00000024,0 1px 18px #0000001f;opacity:1}\\n\"]\n    }]\n  }], function () {\n    return [];\n  }, {\n    colorChanged: [{\n      type: Output\n    }],\n    color: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatColorPaletteComponent {\n  constructor() {\n    this.colorChanged = new EventEmitter();\n  }\n  ngOnInit() {}\n  handleColorChanged(color) {\n    this.colorChanged.emit(color);\n  }\n}\n/** @nocollapse */\nNgxMatColorPaletteComponent.ɵfac = function NgxMatColorPaletteComponent_Factory(t) {\n  return new (t || NgxMatColorPaletteComponent)();\n};\n/** @nocollapse */\nNgxMatColorPaletteComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatColorPaletteComponent,\n  selectors: [[\"ngx-mat-color-palette\"]],\n  hostAttrs: [1, \"ngx-mat-color-palette\"],\n  inputs: {\n    color: \"color\"\n  },\n  outputs: {\n    colorChanged: \"colorChanged\"\n  },\n  decls: 2,\n  vars: 2,\n  consts: [[3, \"color\", \"colorChanged\"]],\n  template: function NgxMatColorPaletteComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-mat-color-canvas\", 0);\n      i0.ɵɵlistener(\"colorChanged\", function NgxMatColorPaletteComponent_Template_ngx_mat_color_canvas_colorChanged_0_listener($event) {\n        return ctx.handleColorChanged($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(1, \"ngx-mat-color-collection\", 0);\n      i0.ɵɵlistener(\"colorChanged\", function NgxMatColorPaletteComponent_Template_ngx_mat_color_collection_colorChanged_1_listener($event) {\n        return ctx.handleColorChanged($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"color\", ctx.color);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"color\", ctx.color);\n    }\n  },\n  dependencies: [NgxMatColorCanvasComponent, NgxMatColorCollectionComponent],\n  styles: [\".ngx-mat-color-palette .actions{margin-top:10px;display:flex}.ngx-mat-color-palette .actions .left{display:flex;flex-direction:column;margin-right:15px}.ngx-mat-color-palette .actions .left .preview{flex:2 1 auto;margin-bottom:10px}.ngx-mat-color-palette .actions .right{display:flex;width:40px;flex-direction:column}\\n\"],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatColorPaletteComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-color-palette',\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        'class': 'ngx-mat-color-palette'\n      },\n      template: \"<ngx-mat-color-canvas (colorChanged)=\\\"handleColorChanged($event)\\\" [color]=\\\"color\\\"></ngx-mat-color-canvas>\\r\\n<ngx-mat-color-collection (colorChanged)=\\\"handleColorChanged($event)\\\" [color]=\\\"color\\\"></ngx-mat-color-collection>\",\n      styles: [\".ngx-mat-color-palette .actions{margin-top:10px;display:flex}.ngx-mat-color-palette .actions .left{display:flex;flex-direction:column;margin-right:15px}.ngx-mat-color-palette .actions .left .preview{flex:2 1 auto;margin-bottom:10px}.ngx-mat-color-palette .actions .right{display:flex;width:40px;flex-direction:column}\\n\"]\n    }]\n  }], function () {\n    return [];\n  }, {\n    colorChanged: [{\n      type: Output\n    }],\n    color: [{\n      type: Input\n    }]\n  });\n})();\nclass ColorAdapter {\n  constructor() {}\n  sameColor(a, b) {\n    if (a == null && b == null) return true;\n    if (a != null && b != null) return a.rgba === b.rgba;\n    return false;\n  }\n  format(c, format) {\n    return c.toString(format);\n  }\n  parse(value) {\n    const obj = stringInputToObject(value);\n    if (obj) {\n      return new Color(obj.r, obj.g, obj.b, obj.a);\n    }\n    return null;\n  }\n}\n/** @nocollapse */\nColorAdapter.ɵfac = function ColorAdapter_Factory(t) {\n  return new (t || ColorAdapter)();\n};\n/** @nocollapse */\nColorAdapter.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ColorAdapter,\n  factory: ColorAdapter.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ColorAdapter, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\nconst NGX_MAT_COLOR_FORMATS = {\n  display: {\n    colorInput: 'hex'\n  }\n};\nconst MAT_COLOR_FORMATS = new InjectionToken('mat-color-formats');\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nconst NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY = new InjectionToken('ngx-mat-colorpicker-scroll-strategy');\nfunction NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\nconst NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY\n};\nconst _MatColorpickerContentBase = mixinColor(class {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n});\nclass NgxMatColorPickerContentComponent extends _MatColorpickerContentBase {\n  constructor(elementRef) {\n    super(elementRef);\n  }\n}\n/** @nocollapse */\nNgxMatColorPickerContentComponent.ɵfac = function NgxMatColorPickerContentComponent_Factory(t) {\n  return new (t || NgxMatColorPickerContentComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n/** @nocollapse */\nNgxMatColorPickerContentComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatColorPickerContentComponent,\n  selectors: [[\"ngx-mat-color-picker-content\"]],\n  viewQuery: function NgxMatColorPickerContentComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(NgxMatColorPaletteComponent, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._palette = _t.first);\n    }\n  },\n  hostAttrs: [1, \"ngx-mat-colorpicker-content\"],\n  hostVars: 3,\n  hostBindings: function NgxMatColorPickerContentComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵsyntheticHostProperty(\"@transformPanel\", \"enter\");\n      i0.ɵɵclassProp(\"ngx-mat-colorpicker-content-touch\", ctx.picker.touchUi);\n    }\n  },\n  inputs: {\n    color: \"color\"\n  },\n  exportAs: [\"ngxMatColorPickerContent\"],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"color\", \"colorChanged\"]],\n  template: function NgxMatColorPickerContentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-mat-color-palette\", 0);\n      i0.ɵɵlistener(\"colorChanged\", function NgxMatColorPickerContentComponent_Template_ngx_mat_color_palette_colorChanged_0_listener($event) {\n        return ctx.picker.select($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"color\", ctx.picker._selected);\n    }\n  },\n  dependencies: [NgxMatColorPaletteComponent],\n  styles: [\".ngx-mat-colorpicker-content{display:block;border-radius:4px;box-shadow:0 2px 4px -1px #0003,0 4px 5px #00000024,0 1px 10px #0000001f;background-color:#fff;color:#000000de;padding:16px}.ngx-mat-colorpicker-content .ngx-mat-color-palette{width:296px;height:354px}.ngx-mat-colorpicker-content-touch{display:block;max-height:80vh;overflow:auto}.ngx-mat-colorpicker-content-touch .ngx-mat-color-palette{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation: landscape){.mat-colorpicker-content-touch .ngx-mat-color-palette{width:64vh;height:80vh}}@media all and (orientation: portrait){.mat-colorpicker-content-touch .ngx-mat-color-palette{width:80vw;height:100vw}}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matDatepickerAnimations.transformPanel, matDatepickerAnimations.fadeInCalendar]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatColorPickerContentComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-color-picker-content',\n      host: {\n        'class': 'ngx-mat-colorpicker-content',\n        '[@transformPanel]': '\"enter\"',\n        '[class.ngx-mat-colorpicker-content-touch]': 'picker.touchUi'\n      },\n      animations: [matDatepickerAnimations.transformPanel, matDatepickerAnimations.fadeInCalendar],\n      exportAs: 'ngxMatColorPickerContent',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['color'],\n      template: \"<ngx-mat-color-palette (colorChanged)=\\\"picker.select($event)\\\" [color]=\\\"picker._selected\\\"></ngx-mat-color-palette>\",\n      styles: [\".ngx-mat-colorpicker-content{display:block;border-radius:4px;box-shadow:0 2px 4px -1px #0003,0 4px 5px #00000024,0 1px 10px #0000001f;background-color:#fff;color:#000000de;padding:16px}.ngx-mat-colorpicker-content .ngx-mat-color-palette{width:296px;height:354px}.ngx-mat-colorpicker-content-touch{display:block;max-height:80vh;overflow:auto}.ngx-mat-colorpicker-content-touch .ngx-mat-color-palette{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation: landscape){.mat-colorpicker-content-touch .ngx-mat-color-palette{width:64vh;height:80vh}}@media all and (orientation: portrait){.mat-colorpicker-content-touch .ngx-mat-color-palette{width:80vw;height:100vw}}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    _palette: [{\n      type: ViewChild,\n      args: [NgxMatColorPaletteComponent]\n    }]\n  });\n})();\nclass NgxMatColorPickerComponent {\n  constructor(_dialog, _overlay, _zone, _adapter, _dir, scrollStrategy, _document, _viewContainerRef) {\n    this._dialog = _dialog;\n    this._overlay = _overlay;\n    this._zone = _zone;\n    this._adapter = _adapter;\n    this._dir = _dir;\n    this._document = _document;\n    this._viewContainerRef = _viewContainerRef;\n    /** Emits when the datepicker has been opened. */\n    this.openedStream = new EventEmitter();\n    /** Emits when the datepicker has been closed. */\n    this.closedStream = new EventEmitter();\n    this._touchUi = false;\n    this._opened = false;\n    this._defaultColor = 'primary';\n    this._validSelected = null;\n    /** Emits when the datepicker is disabled. */\n    this._disabledChange = new Subject();\n    /** The element that was focused before the datepicker was opened. */\n    this._focusedElementBeforeOpen = null;\n    /** Subscription to value changes in the associated input element. */\n    this._inputSubscription = Subscription.EMPTY;\n    /** Emits new selected date when selected date changes. */\n    this._selectedChanged = new Subject();\n    this._scrollStrategy = scrollStrategy;\n  }\n  get disabled() {\n    return this._disabled === undefined && this._pickerInput ? this._pickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  get touchUi() {\n    return this._touchUi;\n  }\n  set touchUi(value) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  /** Whether the calendar is open. */\n  get opened() {\n    return this._opened;\n  }\n  set opened(value) {\n    value ? this.open() : this.close();\n  }\n  /** Default Color palette to use on the datepicker's calendar. */\n  get defaultColor() {\n    return this._defaultColor;\n  }\n  set defaultColor(value) {\n    this._defaultColor = value;\n  }\n  /** Color palette to use on the datepicker's calendar. */\n  get color() {\n    return this._color || (this._pickerInput ? this._pickerInput.getThemePalette() : undefined);\n  }\n  set color(value) {\n    this._color = value;\n  }\n  /** The currently selected date. */\n  get _selected() {\n    return this._validSelected;\n  }\n  set _selected(value) {\n    this._validSelected = value;\n  }\n  ngOnInit() {}\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n  /** Selects the given date */\n  select(nextVal) {\n    let oldValue = this._selected;\n    this._selected = nextVal;\n    if (!this._adapter.sameColor(oldValue, this._selected)) {\n      this._selectedChanged.next(nextVal);\n    }\n  }\n  /**\r\n  * Register an input with this datepicker.\r\n  * @param input The datepicker input to register with this datepicker.\r\n  */\n  registerInput(input) {\n    if (this._pickerInput) {\n      throw Error('A ColorPicker can only be associated with a single input.');\n    }\n    this._pickerInput = input;\n    this._inputSubscription = this._pickerInput._valueChange.subscribe(value => this._selected = value);\n  }\n  open() {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._pickerInput) {\n      throw Error('Attempted to open an ColorPicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n  /** Open the calendar as a dialog. */\n  _openAsDialog() {\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n    this._dialogRef = this._dialog.open(NgxMatColorPickerContentComponent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'ngx-mat-colorpicker-dialog'\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.picker = this;\n    this._setColor();\n  }\n  /** Open the calendar as a popup. */\n  _openAsPopup() {\n    if (!this._portal) {\n      this._portal = new ComponentPortal(NgxMatColorPickerContentComponent, this._viewContainerRef);\n    }\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._portal);\n      this._popupComponentRef.instance.picker = this;\n      this._setColor();\n      // Update the position once the calendar has rendered.\n      this._zone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n  /** Create the popup. */\n  _createPopup() {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-colorpicker-popup'\n    });\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n    merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter(event => {\n      // Closing on alt + up is only valid when there's an input associated with the datepicker.\n      return event.keyCode === ESCAPE || this._pickerInput && event.altKey && event.keyCode === UP_ARROW;\n    }))).subscribe(event => {\n      if (event) {\n        event.preventDefault();\n      }\n      this.close();\n    });\n  }\n  close() {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._portal && this._portal.isAttached) {\n      this._portal.detach();\n    }\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n    if (this._focusedElementBeforeOpen && typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n  /** Passes the current theme color along to the calendar overlay. */\n  _setColor() {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n  /** Create the popup PositionStrategy. */\n  _createPopupPositionStrategy() {\n    return this._overlay.position().flexibleConnectedTo(this._pickerInput.getConnectedOverlayOrigin()).withTransformOriginOn('.ngx-mat-colorpicker-content').withFlexibleDimensions(false).withViewportMargin(8).withLockedPosition().withPositions([{\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom'\n    }, {\n      originX: 'end',\n      originY: 'bottom',\n      overlayX: 'end',\n      overlayY: 'top'\n    }, {\n      originX: 'end',\n      originY: 'top',\n      overlayX: 'end',\n      overlayY: 'bottom'\n    }]);\n  }\n}\n/** @nocollapse */\nNgxMatColorPickerComponent.ɵfac = function NgxMatColorPickerComponent_Factory(t) {\n  return new (t || NgxMatColorPickerComponent)(i0.ɵɵdirectiveInject(i2$1.MatLegacyDialog), i0.ɵɵdirectiveInject(i3$1.Overlay), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(ColorAdapter), i0.ɵɵdirectiveInject(i5.Directionality, 8), i0.ɵɵdirectiveInject(NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n};\n/** @nocollapse */\nNgxMatColorPickerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatColorPickerComponent,\n  selectors: [[\"ngx-mat-color-picker\"]],\n  inputs: {\n    disabled: \"disabled\",\n    touchUi: \"touchUi\",\n    opened: \"opened\",\n    defaultColor: \"defaultColor\",\n    color: \"color\"\n  },\n  outputs: {\n    openedStream: \"opened\",\n    closedStream: \"closed\"\n  },\n  exportAs: [\"ngxMatColorPicker\"],\n  decls: 0,\n  vars: 0,\n  template: function NgxMatColorPickerComponent_Template(rf, ctx) {},\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatColorPickerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-color-picker',\n      template: '',\n      exportAs: 'ngxMatColorPicker',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: i2$1.MatLegacyDialog\n    }, {\n      type: i3$1.Overlay\n    }, {\n      type: i0.NgZone\n    }, {\n      type: ColorAdapter\n    }, {\n      type: i5.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.ViewContainerRef\n    }];\n  }, {\n    openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    disabled: [{\n      type: Input\n    }],\n    touchUi: [{\n      type: Input\n    }],\n    opened: [{\n      type: Input\n    }],\n    defaultColor: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatColorPickerInputEvent {\n  constructor( /** Reference to the colorpicker input component that emitted the event. */\n  target, /** Reference to the native input element associated with the colorpicker input. */\n  targetElement) {\n    this.target = target;\n    this.targetElement = targetElement;\n    this.value = this.target.value;\n  }\n}\nconst MAT_COLORPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NgxMatColorPickerInput),\n  multi: true\n};\nconst MAT_COLORPICKER_VALIDATORS = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NgxMatColorPickerInput),\n  multi: true\n};\nclass NgxMatColorPickerInput {\n  constructor(_elementRef, _formField, _colorFormats, _adapter) {\n    this._elementRef = _elementRef;\n    this._formField = _formField;\n    this._colorFormats = _colorFormats;\n    this._adapter = _adapter;\n    /** Emits when a `change` event is fired on this `<input>`. */\n    this.colorChange = new EventEmitter();\n    /** Emits when an `input` event is fired on this `<input>`. */\n    this.colorInput = new EventEmitter();\n    /** Emits when the disabled state has changed */\n    this._disabledChange = new EventEmitter();\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    this._valueChange = new EventEmitter();\n    this._onTouched = () => {};\n    this._cvaOnChange = () => {};\n    this._validatorOnChange = () => {};\n    this._pickerSubscription = Subscription.EMPTY;\n    /** The combined form control validator for this input. */\n    this._validator = Validators.compose([]);\n    /** Whether the last value set on the input was valid. */\n    this._lastValueValid = false;\n    if (!this._colorFormats) {\n      throw createMissingDateImplError('MAT_COLOR_FORMATS');\n    }\n  }\n  set ngxMatColorPicker(value) {\n    if (!value) {\n      return;\n    }\n    this._picker = value;\n    this._picker.registerInput(this);\n    this._pickerSubscription.unsubscribe();\n    this._pickerSubscription = this._picker._selectedChanged.subscribe(selected => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.colorInput.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\n      this.colorChange.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  /** Whether the colorpicker-input is disabled. */\n  get disabled() {\n    return !!this._disabled;\n  }\n  set disabled(value) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  /** The value of the input. */\n  get value() {\n    return this._value;\n  }\n  set value(value) {\n    const oldValue = this.value;\n    this._value = value;\n    this._formatValue(value);\n    if (!this._adapter.sameColor(oldValue, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  /** Returns the palette used by the input's form field, if any. */\n  getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n  registerOnValidatorChange(fn) {\n    this._validatorOnChange = fn;\n  }\n  validate(c) {\n    return this._validator ? this._validator(c) : null;\n  }\n  /**\r\n   * @deprecated\r\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\r\n   */\n  getPopupConnectionElementRef() {\n    return this.getConnectedOverlayOrigin();\n  }\n  /**\r\n  * Gets the element that the colorpicker popup should be connected to.\r\n  * @return The element to connect the popup to.\r\n  */\n  getConnectedOverlayOrigin() {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n  ngOnInit() {}\n  ngOnDestroy() {\n    this._pickerSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value) {\n    this.value = value;\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn) {\n    this._cvaOnChange = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  _onChange() {\n    this.colorChange.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\n  }\n  _onKeydown(event) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n    if (this._picker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._picker.open();\n      event.preventDefault();\n    }\n  }\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n    this._onTouched();\n  }\n  /** Formats a value and sets it on the input element. */\n  _formatValue(value) {\n    this._elementRef.nativeElement.value = value ? this._adapter.format(value, this._colorFormats.display.colorInput) : '';\n  }\n  _onInput(value) {\n    const lastValueWasValid = this._lastValueValid;\n    const nextValue = this._adapter.parse(value);\n    if (!this._adapter.sameColor(nextValue, this._value)) {\n      this._value = nextValue;\n      this._cvaOnChange(nextValue);\n      this._valueChange.emit(nextValue);\n      this.colorInput.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\n    } else if (lastValueWasValid !== this._lastValueValid) {\n      this._validatorOnChange();\n    }\n  }\n}\n/** @nocollapse */\nNgxMatColorPickerInput.ɵfac = function NgxMatColorPickerInput_Factory(t) {\n  return new (t || NgxMatColorPickerInput)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.MatLegacyFormField, 8), i0.ɵɵdirectiveInject(MAT_COLOR_FORMATS, 8), i0.ɵɵdirectiveInject(ColorAdapter));\n};\n/** @nocollapse */\nNgxMatColorPickerInput.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMatColorPickerInput,\n  selectors: [[\"input\", \"ngxMatColorPicker\", \"\"]],\n  hostVars: 3,\n  hostBindings: function NgxMatColorPickerInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"input\", function NgxMatColorPickerInput_input_HostBindingHandler($event) {\n        return ctx._onInput($event.target.value);\n      })(\"change\", function NgxMatColorPickerInput_change_HostBindingHandler() {\n        return ctx._onChange();\n      })(\"blur\", function NgxMatColorPickerInput_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      })(\"keydown\", function NgxMatColorPickerInput_keydown_HostBindingHandler($event) {\n        return ctx._onKeydown($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n      i0.ɵɵattribute(\"aria-haspopup\", ctx._picker ? \"dialog\" : null)(\"aria-owns\", (ctx._picker == null ? null : ctx._picker.opened) && ctx._picker.id || null);\n    }\n  },\n  inputs: {\n    ngxMatColorPicker: \"ngxMatColorPicker\",\n    disabled: \"disabled\",\n    value: \"value\"\n  },\n  outputs: {\n    colorChange: \"colorChange\",\n    colorInput: \"colorInput\"\n  },\n  exportAs: [\"ngxMatColorPickerInput\"],\n  features: [i0.ɵɵProvidersFeature([MAT_COLORPICKER_VALUE_ACCESSOR, MAT_COLORPICKER_VALIDATORS, {\n    provide: MAT_LEGACY_INPUT_VALUE_ACCESSOR,\n    useExisting: NgxMatColorPickerInput\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatColorPickerInput, [{\n    type: Directive,\n    args: [{\n      selector: 'input[ngxMatColorPicker]',\n      providers: [MAT_COLORPICKER_VALUE_ACCESSOR, MAT_COLORPICKER_VALIDATORS, {\n        provide: MAT_LEGACY_INPUT_VALUE_ACCESSOR,\n        useExisting: NgxMatColorPickerInput\n      }],\n      host: {\n        '[attr.aria-haspopup]': '_picker ? \"dialog\" : null',\n        '[attr.aria-owns]': '(_picker?.opened && _picker.id) || null',\n        '[disabled]': 'disabled',\n        '(input)': '_onInput($event.target.value)',\n        '(change)': '_onChange()',\n        '(blur)': '_onBlur()',\n        '(keydown)': '_onKeydown($event)'\n      },\n      exportAs: 'ngxMatColorPickerInput'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.MatLegacyFormField,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_COLOR_FORMATS]\n      }]\n    }, {\n      type: ColorAdapter\n    }];\n  }, {\n    ngxMatColorPicker: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    colorChange: [{\n      type: Output\n    }],\n    colorInput: [{\n      type: Output\n    }]\n  });\n})();\nclass NgxMatColorToggleComponent {\n  constructor(_cd) {\n    this._cd = _cd;\n    this._stateChanges = Subscription.EMPTY;\n  }\n  get disabled() {\n    if (this._disabled == null && this.picker) {\n      return this.picker.disabled;\n    }\n  }\n  set disabled(value) {\n    this._disabled = value;\n  }\n  ngOnInit() {}\n  ngOnChanges(changes) {\n    if (changes['picker']) {\n      this._watchStateChanges();\n    }\n  }\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n  open(event) {\n    if (this.picker && !this.disabled) {\n      this.picker.open();\n      event.stopPropagation();\n    }\n  }\n  _watchStateChanges() {\n    const disabled$ = this.picker ? this.picker._disabledChange : of();\n    const inputDisabled$ = this.picker && this.picker._pickerInput ? this.picker._pickerInput._disabledChange : of();\n    const pickerToggled$ = this.picker ? merge(this.picker.openedStream, this.picker.closedStream) : of();\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(disabled$, inputDisabled$, pickerToggled$).subscribe(() => this._cd.markForCheck());\n  }\n}\n/** @nocollapse */\nNgxMatColorToggleComponent.ɵfac = function NgxMatColorToggleComponent_Factory(t) {\n  return new (t || NgxMatColorToggleComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n/** @nocollapse */\nNgxMatColorToggleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatColorToggleComponent,\n  selectors: [[\"ngx-mat-color-toggle\"]],\n  viewQuery: function NgxMatColorToggleComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._button = _t.first);\n    }\n  },\n  hostAttrs: [1, \"ngx-mat-color-toggle\"],\n  hostVars: 7,\n  hostBindings: function NgxMatColorToggleComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focus\", function NgxMatColorToggleComponent_focus_HostBindingHandler() {\n        return ctx._button.focus();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"tabindex\", -1);\n      i0.ɵɵclassProp(\"ngx-mat-color-toggle-active\", ctx.picker && ctx.picker.opened)(\"mat-accent\", ctx.picker && ctx.picker.color === \"accent\")(\"mat-warn\", ctx.picker && ctx.picker.color === \"warn\");\n    }\n  },\n  inputs: {\n    picker: [\"for\", \"picker\"],\n    tabIndex: \"tabIndex\",\n    disabled: \"disabled\"\n  },\n  exportAs: [\"ngxMatColorPickerToggle\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 4,\n  vars: 5,\n  consts: [[\"mat-icon-button\", \"\", \"type\", \"button\", 3, \"disabled\", \"click\"], [\"button\", \"\"]],\n  template: function NgxMatColorToggleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0, 1);\n      i0.ɵɵlistener(\"click\", function NgxMatColorToggleComponent_Template_button_click_0_listener($event) {\n        return ctx.open($event);\n      });\n      i0.ɵɵelementStart(2, \"mat-icon\");\n      i0.ɵɵtext(3, \"palette\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"disabled\", ctx.disabled);\n      i0.ɵɵattribute(\"aria-haspopup\", ctx.picker ? \"dialog\" : null)(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex);\n      i0.ɵɵadvance(2);\n      i0.ɵɵstyleProp(\"color\", ctx.picker == null ? null : ctx.picker._selected == null ? null : ctx.picker._selected.rgba);\n    }\n  },\n  dependencies: [i3.MatLegacyButton, i2$2.MatIcon],\n  styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-color-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-color-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-color-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-color-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-color-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-color-toggle-default-icon{margin:auto}\\n\"],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatColorToggleComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-color-toggle',\n      host: {\n        'class': 'ngx-mat-color-toggle',\n        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n        // consumer may have provided, while still being able to receive focus.\n        '[attr.tabindex]': '-1',\n        '[class.ngx-mat-color-toggle-active]': 'picker && picker.opened',\n        '[class.mat-accent]': 'picker && picker.color === \"accent\"',\n        '[class.mat-warn]': 'picker && picker.color === \"warn\"',\n        '(focus)': '_button.focus()'\n      },\n      exportAs: 'ngxMatColorPickerToggle',\n      encapsulation: ViewEncapsulation.None,\n      template: \"<button #button mat-icon-button type=\\\"button\\\" [attr.aria-haspopup]=\\\"picker ? 'dialog' : null\\\"\\r\\n  [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [disabled]=\\\"disabled\\\" (click)=\\\"open($event)\\\">\\r\\n  <mat-icon [style.color]=\\\"picker?._selected?.rgba\\\">palette</mat-icon>\\r\\n</button>\",\n      styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-color-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-color-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-color-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-color-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-color-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-color-toggle-default-icon{margin:auto}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    picker: [{\n      type: Input,\n      args: ['for']\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    _button: [{\n      type: ViewChild,\n      args: ['button']\n    }]\n  });\n})();\nclass NgxMatColorPickerModule {}\n/** @nocollapse */\nNgxMatColorPickerModule.ɵfac = function NgxMatColorPickerModule_Factory(t) {\n  return new (t || NgxMatColorPickerModule)();\n};\n/** @nocollapse */\nNgxMatColorPickerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxMatColorPickerModule\n});\n/** @nocollapse */\nNgxMatColorPickerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ColorAdapter, NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [CommonModule, MatLegacyInputModule, MatLegacyButtonModule, MatLegacyCardModule, MatLegacyRadioModule, FormsModule, ReactiveFormsModule, MatLegacyDialogModule, PortalModule, MatIconModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatColorPickerModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxMatColorPaletteComponent, NgxMatColorCanvasComponent, NgxMatColorCollectionComponent, NgxMatColorSliderComponent, NumericColorInputDirective, NgxMatColorPickerContentComponent, NgxMatColorPickerComponent, NgxMatColorToggleComponent, NgxMatColorPickerInput],\n      imports: [CommonModule, MatLegacyInputModule, MatLegacyButtonModule, MatLegacyCardModule, MatLegacyRadioModule, FormsModule, ReactiveFormsModule, MatLegacyDialogModule, PortalModule, MatIconModule],\n      exports: [NgxMatColorToggleComponent, NgxMatColorPickerInput, NgxMatColorPickerComponent],\n      entryComponents: [NgxMatColorPickerContentComponent],\n      providers: [ColorAdapter, NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n/*\r\n * Public API Surface of color-picker\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { BASIC_COLORS, Color, ColorAdapter, MAT_COLORPICKER_VALIDATORS, MAT_COLORPICKER_VALUE_ACCESSOR, MAT_COLOR_FORMATS, MAX_RGB, MIN_RGB, NGX_MAT_COLOR_FORMATS, NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY, NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY, NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, NUMERIC_REGEX, NgxMatColorCanvasComponent, NgxMatColorCollectionComponent, NgxMatColorPaletteComponent, NgxMatColorPickerComponent, NgxMatColorPickerContentComponent, NgxMatColorPickerInput, NgxMatColorPickerInputEvent, NgxMatColorPickerModule, NgxMatColorSliderComponent, NgxMatColorToggleComponent, NumericColorInputDirective, convertDecimalToHex, createMissingDateImplError, getColorAtPosition, matchers, pad2, rgbToHex, rgbaToHex, stringInputToObject };","map":{"version":3,"names":["ComponentPortal","PortalModule","i1$1","DOCUMENT","CommonModule","i0","EventEmitter","Directive","Output","Input","Component","HostListener","ViewEncapsulation","Injectable","InjectionToken","ChangeDetectionStrategy","ViewChild","Optional","Inject","forwardRef","NgModule","i4","FormGroup","FormControl","Validators","NG_VALUE_ACCESSOR","NG_VALIDATORS","FormsModule","ReactiveFormsModule","i3","MatLegacyButtonModule","MatLegacyCardModule","i2$1","MatLegacyDialogModule","i2$2","MatIconModule","i2","MAT_LEGACY_INPUT_VALUE_ACCESSOR","MatLegacyInputModule","MatLegacyRadioModule","Subject","merge","Subscription","of","takeUntil","debounceTime","distinctUntilChanged","take","filter","i1","coerceBooleanProperty","ESCAPE","UP_ARROW","DOWN_ARROW","i3$1","Overlay","OverlayConfig","mixinColor","matDatepickerAnimations","i5","trimLeft","trimRight","tinyCounter","mathRound","Math","round","mathMin","min","mathMax","max","mathRandom","random","NUMERIC_REGEX","MAX_RGB","MIN_RGB","BASIC_COLORS","getColorAtPosition","ctx","x","y","imageData","getImageData","data","r","g","b","rgbaToHex","a","allow4Char","hex","pad2","toString","convertDecimalToHex","charAt","join","c","length","d","parseFloat","convertHexToDecimal","h","parseIntFromHex","val","parseInt","rgbToHex","allow3Char","CSS_INTEGER","CSS_NUMBER","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","matchers","RegExp","rgb","rgba","hsl","hsla","hsv","hsva","hex3","hex6","hex4","hex8","stringInputToObject","color","replace","toLowerCase","match","obj","exec","createMissingDateImplError","provider","Error","Color","constructor","_r","_g","_b","_a","roundA","toRgba","toHex","toHexString","toRgbString","toHex8","toHex8String","format","formatSet","formattedString","hasAlpha","needsAlphaFormat","NgxMatBaseColorCanvas","zone","elementId","colorChanged","drag","_destroyed","ngOnDestroy","next","complete","ngAfterViewInit","canvas","document","getElementById","getContext","width","height","draw","clearRect","rect","fillGradient","redrawIndicator","onMousedown","e","changeColor","runOutsideAngular","addEventListener","onMousemove","bind","run","onMouseup","removeEventListener","emitChange","emit","ɵfac","ɵdir","type","args","NgZone","undefined","NgxMatColorSliderComponent","ngOnInit","grd","createLinearGradient","addColorStop","fillStyle","fill","beginPath","strokeStyle","lineWidth","arc","PI","stroke","closePath","offsetX","offsetY","ɵcmp","selector","template","NumericColorInputDirective","onInput","$event","_formatInput","target","input","Number","value","isNaN","RADIUS_NOB","NgxMatColorCanvasComponent","_resetBaseColor","formGroup","required","pattern","rCtrl","get","gCtrl","bCtrl","aCtrl","hexCtrl","rgbaCtrl$","valueChanges","pipe","subscribe","_","hexCtrl$","ngOnChanges","changes","currentValue","updateForm","_baseColor","firstChange","config","emitEvent","setValue","fillRect","grdWhite","grdBlack","onSliderColorChanged","MatLegacyFormField","MatLegacyLabel","MatLegacyPrefix","MatLegacyInput","MatLegacyButton","ɵNgNoValidate","DefaultValueAccessor","NumberValueAccessor","NgControlStatus","NgControlStatusGroup","MinValidator","MaxValidator","FormGroupDirective","FormControlName","encapsulation","None","host","styles","NgxMatColorCollectionComponent","colors1","slice","colors2","selectedColor","select","NgClass","NgForOf","NgxMatColorPaletteComponent","handleColorChanged","ColorAdapter","sameColor","parse","ɵprov","NGX_MAT_COLOR_FORMATS","display","colorInput","MAT_COLOR_FORMATS","NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY","NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","_MatColorpickerContentBase","_elementRef","NgxMatColorPickerContentComponent","elementRef","ElementRef","transformPanel","fadeInCalendar","animations","exportAs","changeDetection","OnPush","inputs","_palette","NgxMatColorPickerComponent","_dialog","_overlay","_zone","_adapter","_dir","scrollStrategy","_document","_viewContainerRef","openedStream","closedStream","_touchUi","_opened","_defaultColor","_validSelected","_disabledChange","_focusedElementBeforeOpen","_inputSubscription","EMPTY","_selectedChanged","_scrollStrategy","disabled","_disabled","_pickerInput","newValue","touchUi","opened","open","close","defaultColor","_color","getThemePalette","_selected","unsubscribe","_popupRef","dispose","_popupComponentRef","nextVal","oldValue","registerInput","_valueChange","activeElement","_openAsDialog","_openAsPopup","_dialogRef","direction","viewContainerRef","panelClass","afterClosed","componentInstance","picker","_setColor","_portal","_createPopup","hasAttached","attach","instance","onStable","asObservable","updatePosition","overlayConfig","positionStrategy","_createPopupPositionStrategy","hasBackdrop","backdropClass","create","overlayElement","setAttribute","backdropClick","detachments","keydownEvents","event","keyCode","altKey","preventDefault","detach","isAttached","completeClose","focus","setTimeout","position","flexibleConnectedTo","getConnectedOverlayOrigin","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withLockedPosition","withPositions","originX","originY","overlayX","overlayY","MatLegacyDialog","Directionality","ViewContainerRef","decorators","NgxMatColorPickerInputEvent","targetElement","MAT_COLORPICKER_VALUE_ACCESSOR","useExisting","NgxMatColorPickerInput","multi","MAT_COLORPICKER_VALIDATORS","_formField","_colorFormats","colorChange","_onTouched","_cvaOnChange","_validatorOnChange","_pickerSubscription","_validator","compose","_lastValueValid","ngxMatColorPicker","_picker","selected","nativeElement","element","blur","_value","_formatValue","registerOnValidatorChange","fn","validate","getPopupConnectionElementRef","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_onChange","_onKeydown","isAltDownArrow","readOnly","_onBlur","_onInput","lastValueWasValid","nextValue","providers","NgxMatColorToggleComponent","_cd","_stateChanges","_watchStateChanges","ngAfterContentInit","stopPropagation","disabled$","inputDisabled$","pickerToggled$","markForCheck","ChangeDetectorRef","MatIcon","tabIndex","_button","NgxMatColorPickerModule","ɵmod","ɵinj","declarations","imports","exports","entryComponents"],"sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/node_modules/@angular-material-components/color-picker/fesm2020/angular-material-components-color-picker.mjs"],"sourcesContent":["import { ComponentPortal, PortalModule } from '@angular/cdk/portal';\nimport * as i1$1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Output, Input, Component, HostListener, ViewEncapsulation, Injectable, InjectionToken, ChangeDetectionStrategy, ViewChild, Optional, Inject, forwardRef, NgModule } from '@angular/core';\nimport * as i4 from '@angular/forms';\nimport { FormGroup, FormControl, Validators, NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i3 from '@angular/material/legacy-button';\nimport { MatLegacyButtonModule } from '@angular/material/legacy-button';\nimport { MatLegacyCardModule } from '@angular/material/legacy-card';\nimport * as i2$1 from '@angular/material/legacy-dialog';\nimport { MatLegacyDialogModule } from '@angular/material/legacy-dialog';\nimport * as i2$2 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i2 from '@angular/material/legacy-input';\nimport { MAT_LEGACY_INPUT_VALUE_ACCESSOR, MatLegacyInputModule } from '@angular/material/legacy-input';\nimport { MatLegacyRadioModule } from '@angular/material/legacy-radio';\nimport { Subject, merge, Subscription, of } from 'rxjs';\nimport { takeUntil, debounceTime, distinctUntilChanged, take, filter } from 'rxjs/operators';\nimport * as i1 from '@angular/material/legacy-form-field';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport * as i3$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { mixinColor } from '@angular/material/core';\nimport { matDatepickerAnimations } from '@angular/material/datepicker';\nimport * as i5 from '@angular/cdk/bidi';\n\nconst trimLeft = /^\\s+/;\r\nconst trimRight = /\\s+$/;\r\nconst tinyCounter = 0;\r\nconst mathRound = Math.round;\r\nconst mathMin = Math.min;\r\nconst mathMax = Math.max;\r\nconst mathRandom = Math.random;\r\nconst NUMERIC_REGEX = /[^0-9]/g;\r\nconst MAX_RGB = 255;\r\nconst MIN_RGB = 0;\r\n/** List basic colors */\r\nconst BASIC_COLORS = [\"#ffffff\", \"#ffff00\", \"#ff00ff\", \"#ff0000\",\r\n    \"#c0c0c0\", \"#808080\", \"#808000\", \"#800080\",\r\n    \"#800000\", \"#00ffff\", \"#00ff00\", \"#008080\",\r\n    \"#008000\", \"#0000ff\", \"#000080\", \"#000000\"\r\n];\r\n/**\r\n * Get color at position\r\n * @param ctx\r\n * @param x\r\n * @param y\r\n */\r\nfunction getColorAtPosition(ctx, x, y) {\r\n    const imageData = ctx.getImageData(x, y, 1, 1).data;\r\n    return { r: imageData[0], g: imageData[1], b: imageData[2] };\r\n}\r\n// `rgbaToHex`\r\n// Converts an RGBA color plus alpha transparency to hex\r\n// Assumes r, g, b are contained in the set [0, 255] and\r\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\r\nfunction rgbaToHex(r, g, b, a, allow4Char) {\r\n    var hex = [\r\n        pad2(mathRound(r).toString(16)),\r\n        pad2(mathRound(g).toString(16)),\r\n        pad2(mathRound(b).toString(16)),\r\n        pad2(convertDecimalToHex(a))\r\n    ];\r\n    // Return a 4 character hex if possible\r\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\r\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\r\n    }\r\n    return hex.join(\"\");\r\n}\r\n// Force a hex value to have 2 characters\r\nfunction pad2(c) {\r\n    return c.length == 1 ? '0' + c : '' + c;\r\n}\r\n// Converts a decimal to a hex value\r\nfunction convertDecimalToHex(d) {\r\n    return Math.round(parseFloat(d) * 255).toString(16);\r\n}\r\n// Converts a hex value to a decimal\r\nfunction convertHexToDecimal(h) {\r\n    return (parseIntFromHex(h) / 255);\r\n}\r\n// Parse a base-16 hex value into a base-10 integer\r\nfunction parseIntFromHex(val) {\r\n    return parseInt(val, 16);\r\n}\r\n// `rgbToHex`\r\n// Converts an RGB color to hex\r\n// Assumes r, g, and b are contained in the set [0, 255]\r\n// Returns a 3 or 6 character hex\r\nfunction rgbToHex(r, g, b, allow3Char) {\r\n    var hex = [\r\n        pad2(mathRound(r).toString(16)),\r\n        pad2(mathRound(g).toString(16)),\r\n        pad2(mathRound(b).toString(16))\r\n    ];\r\n    // Return a 3 character hex if possible\r\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\r\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\r\n    }\r\n    return hex.join(\"\");\r\n}\r\n// Actual matching.\r\n// Parentheses and commas are optional, but not required.\r\n// Whitespace can take the place of commas or opening parent\r\nconst CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\r\nconst CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\r\nconst CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\r\nconst PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\nconst PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\nconst matchers = {\r\n    CSS_UNIT: new RegExp(CSS_UNIT),\r\n    rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\r\n    rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\r\n    hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\r\n    hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\r\n    hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\r\n    hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\r\n    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\r\n};\r\n// `stringInputToObject`\r\n// Permissive string parsing.  Take in a number of formats, and output an object\r\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\r\nfunction stringInputToObject(color) {\r\n    color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();\r\n    // Try to match string input using regular expressions.\r\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\r\n    // Just return an object and let the conversion functions handle that.\r\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\r\n    let match;\r\n    let obj;\r\n    if ((match = matchers.rgb.exec(color))) {\r\n        return { r: match[1], g: match[2], b: match[3], a: 1 };\r\n    }\r\n    if ((match = matchers.rgba.exec(color))) {\r\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\r\n    }\r\n    if ((match = matchers.hex8.exec(color))) {\r\n        return {\r\n            r: parseIntFromHex(match[1]),\r\n            g: parseIntFromHex(match[2]),\r\n            b: parseIntFromHex(match[3]),\r\n            a: convertHexToDecimal(match[4]),\r\n        };\r\n    }\r\n    if ((match = matchers.hex6.exec(color))) {\r\n        return {\r\n            r: parseIntFromHex(match[1]),\r\n            g: parseIntFromHex(match[2]),\r\n            b: parseIntFromHex(match[3]),\r\n            a: 1\r\n        };\r\n    }\r\n    if ((match = matchers.hex4.exec(color))) {\r\n        return {\r\n            r: parseIntFromHex(match[1] + '' + match[1]),\r\n            g: parseIntFromHex(match[2] + '' + match[2]),\r\n            b: parseIntFromHex(match[3] + '' + match[3]),\r\n            a: convertHexToDecimal(match[4] + '' + match[4]),\r\n        };\r\n    }\r\n    if ((match = matchers.hex3.exec(color))) {\r\n        return {\r\n            r: parseIntFromHex(match[1] + '' + match[1]),\r\n            g: parseIntFromHex(match[2] + '' + match[2]),\r\n            b: parseIntFromHex(match[3] + '' + match[3]),\r\n            a: 1\r\n        };\r\n    }\r\n    return null;\r\n}\r\nfunction createMissingDateImplError(provider) {\r\n    return Error(`NgxMatColorPicker: No provider found for ${provider}. You must define MAT_COLOR_FORMATS in your module`);\r\n}\n\nclass Color {\r\n    constructor(_r, _g, _b, _a) {\r\n        this.r = _r > MAX_RGB ? MAX_RGB : _r;\r\n        this.g = _g > MAX_RGB ? MAX_RGB : _g;\r\n        this.b = _b > MAX_RGB ? MAX_RGB : _b;\r\n        if (_a != null) {\r\n            this.a = _a > 1 ? 1 : _a;\r\n        }\r\n        else {\r\n            this.a = 1;\r\n        }\r\n        this.roundA = Math.round(this.a);\r\n        this.hex = rgbToHex(this.r, this.g, this.b);\r\n        this.rgba = this.toRgba();\r\n    }\r\n    toHex(allow3Char) {\r\n        return rgbToHex(this.r, this.g, this.b, allow3Char);\r\n    }\r\n    toRgba() {\r\n        return `rgba(${this.r},${this.g},${this.b},${this.a})`;\r\n    }\r\n    toHexString(allow3Char) {\r\n        return '#' + this.toHex(allow3Char);\r\n    }\r\n    toRgbString() {\r\n        return (this.a === 1) ?\r\n            \"rgb(\" + Math.round(this.r) + \", \" + Math.round(this.g) + \", \" + Math.round(this.b) + \")\" :\r\n            \"rgba(\" + Math.round(this.r) + \", \" + Math.round(this.g) + \", \" + Math.round(this.b) + \", \" + this.roundA + \")\";\r\n    }\r\n    toHex8(allow4Char) {\r\n        return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);\r\n    }\r\n    toHex8String(allow4Char) {\r\n        return '#' + this.toHex8(allow4Char);\r\n    }\r\n    toString(format) {\r\n        let formatSet = !!format;\r\n        let formattedString;\r\n        let hasAlpha = this.a < 1 && this.a >= 0;\r\n        let needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\"\r\n            || format === \"hex3\" || format === \"hex4\" || format === \"hex8\");\r\n        if (needsAlphaFormat) {\r\n            return this.toRgbString();\r\n        }\r\n        if (format === \"rgb\") {\r\n            formattedString = this.toRgbString();\r\n        }\r\n        if (format === \"hex\" || format === \"hex6\") {\r\n            formattedString = this.toHexString();\r\n        }\r\n        if (format === \"hex3\") {\r\n            formattedString = this.toHexString(true);\r\n        }\r\n        if (format === \"hex4\") {\r\n            formattedString = this.toHex8String(true);\r\n        }\r\n        if (format === \"hex8\") {\r\n            formattedString = this.toHex8String();\r\n        }\r\n        return formattedString || this.toHexString();\r\n    }\r\n}\n\nclass NgxMatBaseColorCanvas {\r\n    constructor(zone, elementId) {\r\n        this.zone = zone;\r\n        this.colorChanged = new EventEmitter();\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.drag = false;\r\n        this._destroyed = new Subject();\r\n        this.elementId = elementId;\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n    }\r\n    ngAfterViewInit() {\r\n        this.canvas = document.getElementById(this.elementId);\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.width = this.canvas.width;\r\n        this.height = this.canvas.height;\r\n        this.draw();\r\n    }\r\n    draw() {\r\n        this.ctx.clearRect(0, 0, this.width, this.height);\r\n        this.ctx.rect(0, 0, this.width, this.height);\r\n        this.fillGradient();\r\n        if (this.y != 0) {\r\n            this.redrawIndicator(this.x, this.y);\r\n        }\r\n    }\r\n    onMousedown(e) {\r\n        this.drag = true;\r\n        this.changeColor(e);\r\n        this.zone.runOutsideAngular(() => {\r\n            this.canvas.addEventListener('mousemove', this.onMousemove.bind(this));\r\n        });\r\n    }\r\n    onMousemove(e) {\r\n        if (this.drag) {\r\n            this.zone.run(() => {\r\n                this.changeColor(e);\r\n            });\r\n        }\r\n    }\r\n    onMouseup(e) {\r\n        this.drag = false;\r\n        this.canvas.removeEventListener('mousemove', this.onMousemove);\r\n    }\r\n    emitChange(color) {\r\n        this.colorChanged.emit(color);\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatBaseColorCanvas.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatBaseColorCanvas, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\r\n/** @nocollapse */ NgxMatBaseColorCanvas.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: NgxMatBaseColorCanvas, inputs: { color: \"color\" }, outputs: { colorChanged: \"colorChanged\" }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatBaseColorCanvas, decorators: [{\r\n            type: Directive,\r\n            args: [{}]\r\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined }]; }, propDecorators: { colorChanged: [{\r\n                type: Output\r\n            }], color: [{\r\n                type: Input\r\n            }] } });\n\nclass NgxMatColorSliderComponent extends NgxMatBaseColorCanvas {\r\n    constructor(zone) {\r\n        super(zone, 'color-strip');\r\n        this.zone = zone;\r\n    }\r\n    ngOnInit() {\r\n    }\r\n    ngAfterViewInit() {\r\n        super.ngAfterViewInit();\r\n    }\r\n    fillGradient() {\r\n        const grd = this.ctx.createLinearGradient(0, 0, 0, this.height);\r\n        grd.addColorStop(0, 'rgba(255, 0, 0, 1)');\r\n        grd.addColorStop(0.17, 'rgba(255, 255, 0, 1)');\r\n        grd.addColorStop(0.34, 'rgba(0, 255, 0, 1)');\r\n        grd.addColorStop(0.51, 'rgba(0, 255, 255, 1)');\r\n        grd.addColorStop(0.68, 'rgba(0, 0, 255, 1)');\r\n        grd.addColorStop(0.85, 'rgba(255, 0, 255, 1)');\r\n        grd.addColorStop(1, 'rgba(255, 0, 0, 1)');\r\n        this.ctx.fillStyle = grd;\r\n        this.ctx.fill();\r\n    }\r\n    redrawIndicator(x, y) {\r\n        this.ctx.beginPath();\r\n        this.ctx.strokeStyle = 'white';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.arc(7.5, y, 7.5, 0, 2 * Math.PI, false);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n    changeColor(e) {\r\n        this.x = e.offsetX;\r\n        this.y = e.offsetY;\r\n        this.draw();\r\n        const { r, g, b } = getColorAtPosition(this.ctx, e.offsetX, e.offsetY);\r\n        this.emitChange(new Color(r, g, b));\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatColorSliderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorSliderComponent, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgxMatColorSliderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.2\", type: NgxMatColorSliderComponent, selector: \"ngx-mat-color-slider\", usesInheritance: true, ngImport: i0, template: \"<canvas id=\\\"color-strip\\\" class=\\\"zone-strip\\\" (mousedown)=\\\"onMousedown($event)\\\" (mouseup)=\\\"onMouseup($event)\\\"\\r\\n width=\\\"15\\\" height=\\\"200\\\"></canvas>\", styles: [\"\"] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorSliderComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ngx-mat-color-slider', template: \"<canvas id=\\\"color-strip\\\" class=\\\"zone-strip\\\" (mousedown)=\\\"onMousedown($event)\\\" (mouseup)=\\\"onMouseup($event)\\\"\\r\\n width=\\\"15\\\" height=\\\"200\\\"></canvas>\" }]\r\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\nclass NumericColorInputDirective {\r\n    constructor() { }\r\n    onInput($event) {\r\n        this._formatInput($event.target);\r\n    }\r\n    /**\r\n  * Format input\r\n  * @param input\r\n  */\r\n    _formatInput(input) {\r\n        let val = Number(input.value.replace(NUMERIC_REGEX, ''));\r\n        val = isNaN(val) ? 0 : val;\r\n        input.value = val;\r\n    }\r\n}\r\n/** @nocollapse */ NumericColorInputDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NumericColorInputDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\n/** @nocollapse */ NumericColorInputDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: NumericColorInputDirective, selector: \"[ngxMatNumericColorInput]\", host: { listeners: { \"input\": \"onInput($event)\" } }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NumericColorInputDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[ngxMatNumericColorInput]'\r\n                }]\r\n        }], ctorParameters: function () { return []; }, propDecorators: { onInput: [{\r\n                type: HostListener,\r\n                args: ['input', ['$event']]\r\n            }] } });\n\nconst RADIUS_NOB = 5;\r\nclass NgxMatColorCanvasComponent extends NgxMatBaseColorCanvas {\r\n    constructor(zone) {\r\n        super(zone, 'color-block');\r\n        this.zone = zone;\r\n        this._resetBaseColor = true;\r\n        this.formGroup = new FormGroup({\r\n            r: new FormControl(null, [Validators.required]),\r\n            g: new FormControl(null, [Validators.required]),\r\n            b: new FormControl(null, [Validators.required]),\r\n            a: new FormControl(null, [Validators.required]),\r\n            hex: new FormControl(null, [Validators.required, Validators.pattern(matchers.hex6)]),\r\n        });\r\n    }\r\n    get rCtrl() {\r\n        return this.formGroup.get('r');\r\n    }\r\n    get gCtrl() {\r\n        return this.formGroup.get('g');\r\n    }\r\n    get bCtrl() {\r\n        return this.formGroup.get('b');\r\n    }\r\n    get aCtrl() {\r\n        return this.formGroup.get('a');\r\n    }\r\n    get hexCtrl() {\r\n        return this.formGroup.get('hex');\r\n    }\r\n    ngOnInit() {\r\n        const rgbaCtrl$ = merge(this.rCtrl.valueChanges, this.gCtrl.valueChanges, this.bCtrl.valueChanges, this.aCtrl.valueChanges);\r\n        rgbaCtrl$.pipe(takeUntil(this._destroyed), debounceTime(400))\r\n            .subscribe(_ => {\r\n            const color = new Color(Number(this.rCtrl.value), Number(this.gCtrl.value), Number(this.bCtrl.value), Number(this.aCtrl.value));\r\n            this.emitChange(color);\r\n        });\r\n        const hexCtrl$ = this.hexCtrl.valueChanges;\r\n        hexCtrl$.pipe(takeUntil(this._destroyed), debounceTime(400), distinctUntilChanged())\r\n            .subscribe(hex => {\r\n            const obj = stringInputToObject(hex);\r\n            if (obj != null) {\r\n                const color = new Color(obj.r, obj.g, obj.b, obj.a);\r\n                this.emitChange(color);\r\n            }\r\n        });\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.color && changes.color.currentValue) {\r\n            this.updateForm(changes.color.currentValue);\r\n            if (this._resetBaseColor) {\r\n                this._baseColor = changes.color.currentValue;\r\n            }\r\n            this._resetBaseColor = true;\r\n            if (!changes.color.firstChange) {\r\n                this.draw();\r\n            }\r\n        }\r\n    }\r\n    updateForm(val) {\r\n        const config = { emitEvent: false };\r\n        this.rCtrl.setValue(val.r, config);\r\n        this.gCtrl.setValue(val.g, config);\r\n        this.bCtrl.setValue(val.b, config);\r\n        this.aCtrl.setValue(val.a, config);\r\n        this.hexCtrl.setValue(val.hex, config);\r\n    }\r\n    redrawIndicator(x, y) {\r\n        this.ctx.beginPath();\r\n        this.ctx.strokeStyle = 'white';\r\n        this.ctx.arc(x, y, RADIUS_NOB, 0, 2 * Math.PI, false);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n    fillGradient() {\r\n        this.ctx.fillStyle = this._baseColor ? this._baseColor.rgba : 'rgba(255,255,255,1)';\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n        const grdWhite = this.ctx.createLinearGradient(0, 0, this.width, 0);\r\n        grdWhite.addColorStop(0, 'rgba(255,255,255,1)');\r\n        grdWhite.addColorStop(1, 'rgba(255,255,255,0)');\r\n        this.ctx.fillStyle = grdWhite;\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n        const grdBlack = this.ctx.createLinearGradient(0, 0, 0, this.height);\r\n        grdBlack.addColorStop(0, 'rgba(0,0,0,0)');\r\n        grdBlack.addColorStop(1, 'rgba(0,0,0,1)');\r\n        this.ctx.fillStyle = grdBlack;\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n    }\r\n    onSliderColorChanged(c) {\r\n        this._baseColor = c;\r\n        this.color = c;\r\n        this.fillGradient();\r\n        this.emitChange(c);\r\n    }\r\n    changeColor(e) {\r\n        this.x = e.offsetX;\r\n        this.y = e.offsetY;\r\n        this._resetBaseColor = false;\r\n        this.draw();\r\n        const { r, g, b } = getColorAtPosition(this.ctx, e.offsetX, e.offsetY);\r\n        this.emitChange(new Color(r, g, b));\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatColorCanvasComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorCanvasComponent, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgxMatColorCanvasComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.2\", type: NgxMatColorCanvasComponent, selector: \"ngx-mat-color-canvas\", host: { classAttribute: \"ngx-mat-color-canvas\" }, usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<form [formGroup]=\\\"formGroup\\\">\\r\\n    <div class=\\\"color-canvas-row\\\">\\r\\n        <div class=\\\"zone-canvas\\\">\\r\\n            <canvas id=\\\"color-block\\\" class=\\\"zone-block\\\" (mousedown)=\\\"onMousedown($event)\\\" (mouseup)=\\\"onMouseup($event)\\\"\\r\\n                width=\\\"200\\\" height=\\\"200\\\"></canvas>\\r\\n            <ngx-mat-color-slider (colorChanged)=\\\"onSliderColorChanged($event)\\\"></ngx-mat-color-slider>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"zone-inputs\\\">\\r\\n            <mat-form-field>\\r\\n                <mat-label>R</mat-label>\\r\\n                <input matInput formControlName=\\\"r\\\" ngxMatNumericColorInput autocomplete=\\\"off\\\">\\r\\n            </mat-form-field>\\r\\n\\r\\n            <mat-form-field>\\r\\n                <mat-label>G</mat-label>\\r\\n                <input matInput formControlName=\\\"g\\\" ngxMatNumericColorInput autocomplete=\\\"off\\\">\\r\\n            </mat-form-field>\\r\\n\\r\\n            <mat-form-field>\\r\\n                <mat-label>B</mat-label>\\r\\n                <input matInput formControlName=\\\"b\\\" ngxMatNumericColorInput autocomplete=\\\"off\\\">\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"color-canvas-row\\\">\\r\\n        <button mat-mini-fab [style.background-color]=\\\"color?.rgba || 'transparent'\\\" class=\\\"preview\\\"></button>\\r\\n        <mat-form-field>\\r\\n            <mat-label>HEX6</mat-label>\\r\\n            <mat-label matPrefix class=\\\"symbol\\\">#&nbsp;</mat-label>\\r\\n            <input matInput formControlName=\\\"hex\\\" autocomplete=\\\"off\\\">\\r\\n        </mat-form-field>\\r\\n        <mat-form-field>\\r\\n            <mat-label>A</mat-label>\\r\\n            <input matInput formControlName=\\\"a\\\" type=\\\"number\\\" min=\\\"0\\\" max=\\\"1\\\" step=\\\"0.1\\\" autocomplete=\\\"off\\\">\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n</form>\", styles: [\".ngx-mat-color-canvas .color-canvas-row{display:flex}.ngx-mat-color-canvas .color-canvas-row:first-of-type{height:200px;margin-bottom:12px}.ngx-mat-color-canvas .color-canvas-row:first-of-type .card{height:180px}.ngx-mat-color-canvas .color-canvas-row canvas:hover{cursor:crosshair}.ngx-mat-color-canvas .color-canvas-row .zone{display:flex}.ngx-mat-color-canvas .color-canvas-row .zone-canvas{height:200px}.ngx-mat-color-canvas .color-canvas-row .zone-canvas .zone-block{border:1px solid rgba(0,0,0,.12)}.ngx-mat-color-canvas .color-canvas-row .zone-strip{flex-basis:auto;margin-left:10px}.ngx-mat-color-canvas .color-canvas-row .zone-inputs{display:flex;width:40px;height:200px;flex-direction:column;margin-left:16px;margin-top:12px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2){display:flex}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .preview{min-width:40px;min-height:40px;height:40px;width:40px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field{margin-left:16px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field:first-of-type{width:170px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field:first-of-type .symbol{font-weight:700;color:#0000008a}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field:last-of-type{width:40px}.ngx-mat-color-canvas .mat-form-field-label{font-weight:700}\\n\"], dependencies: [{ kind: \"component\", type: i1.MatLegacyFormField, selector: \"mat-form-field\", inputs: [\"color\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\", \"floatLabel\"], exportAs: [\"matFormField\"] }, { kind: \"directive\", type: i1.MatLegacyLabel, selector: \"mat-label\" }, { kind: \"directive\", type: i1.MatLegacyPrefix, selector: \"[matPrefix]\" }, { kind: \"directive\", type: i2.MatLegacyInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", exportAs: [\"matInput\"] }, { kind: \"component\", type: i3.MatLegacyButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"directive\", type: i4.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i4.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i4.NumberValueAccessor, selector: \"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]\" }, { kind: \"directive\", type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i4.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i4.MinValidator, selector: \"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]\", inputs: [\"min\"] }, { kind: \"directive\", type: i4.MaxValidator, selector: \"input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]\", inputs: [\"max\"] }, { kind: \"directive\", type: i4.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i4.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"component\", type: NgxMatColorSliderComponent, selector: \"ngx-mat-color-slider\" }, { kind: \"directive\", type: NumericColorInputDirective, selector: \"[ngxMatNumericColorInput]\" }], encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorCanvasComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ngx-mat-color-canvas', encapsulation: ViewEncapsulation.None, host: {\r\n                        'class': 'ngx-mat-color-canvas'\r\n                    }, template: \"<form [formGroup]=\\\"formGroup\\\">\\r\\n    <div class=\\\"color-canvas-row\\\">\\r\\n        <div class=\\\"zone-canvas\\\">\\r\\n            <canvas id=\\\"color-block\\\" class=\\\"zone-block\\\" (mousedown)=\\\"onMousedown($event)\\\" (mouseup)=\\\"onMouseup($event)\\\"\\r\\n                width=\\\"200\\\" height=\\\"200\\\"></canvas>\\r\\n            <ngx-mat-color-slider (colorChanged)=\\\"onSliderColorChanged($event)\\\"></ngx-mat-color-slider>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"zone-inputs\\\">\\r\\n            <mat-form-field>\\r\\n                <mat-label>R</mat-label>\\r\\n                <input matInput formControlName=\\\"r\\\" ngxMatNumericColorInput autocomplete=\\\"off\\\">\\r\\n            </mat-form-field>\\r\\n\\r\\n            <mat-form-field>\\r\\n                <mat-label>G</mat-label>\\r\\n                <input matInput formControlName=\\\"g\\\" ngxMatNumericColorInput autocomplete=\\\"off\\\">\\r\\n            </mat-form-field>\\r\\n\\r\\n            <mat-form-field>\\r\\n                <mat-label>B</mat-label>\\r\\n                <input matInput formControlName=\\\"b\\\" ngxMatNumericColorInput autocomplete=\\\"off\\\">\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"color-canvas-row\\\">\\r\\n        <button mat-mini-fab [style.background-color]=\\\"color?.rgba || 'transparent'\\\" class=\\\"preview\\\"></button>\\r\\n        <mat-form-field>\\r\\n            <mat-label>HEX6</mat-label>\\r\\n            <mat-label matPrefix class=\\\"symbol\\\">#&nbsp;</mat-label>\\r\\n            <input matInput formControlName=\\\"hex\\\" autocomplete=\\\"off\\\">\\r\\n        </mat-form-field>\\r\\n        <mat-form-field>\\r\\n            <mat-label>A</mat-label>\\r\\n            <input matInput formControlName=\\\"a\\\" type=\\\"number\\\" min=\\\"0\\\" max=\\\"1\\\" step=\\\"0.1\\\" autocomplete=\\\"off\\\">\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n</form>\", styles: [\".ngx-mat-color-canvas .color-canvas-row{display:flex}.ngx-mat-color-canvas .color-canvas-row:first-of-type{height:200px;margin-bottom:12px}.ngx-mat-color-canvas .color-canvas-row:first-of-type .card{height:180px}.ngx-mat-color-canvas .color-canvas-row canvas:hover{cursor:crosshair}.ngx-mat-color-canvas .color-canvas-row .zone{display:flex}.ngx-mat-color-canvas .color-canvas-row .zone-canvas{height:200px}.ngx-mat-color-canvas .color-canvas-row .zone-canvas .zone-block{border:1px solid rgba(0,0,0,.12)}.ngx-mat-color-canvas .color-canvas-row .zone-strip{flex-basis:auto;margin-left:10px}.ngx-mat-color-canvas .color-canvas-row .zone-inputs{display:flex;width:40px;height:200px;flex-direction:column;margin-left:16px;margin-top:12px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2){display:flex}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .preview{min-width:40px;min-height:40px;height:40px;width:40px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field{margin-left:16px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field:first-of-type{width:170px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field:first-of-type .symbol{font-weight:700;color:#0000008a}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field:last-of-type{width:40px}.ngx-mat-color-canvas .mat-form-field-label{font-weight:700}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\nclass NgxMatColorCollectionComponent {\r\n    constructor() {\r\n        this.colorChanged = new EventEmitter();\r\n        this.colors1 = BASIC_COLORS.slice(0, 8);\r\n        this.colors2 = BASIC_COLORS.slice(8, 16);\r\n    }\r\n    set color(c) {\r\n        if (c) {\r\n            this.selectedColor = c.toHexString();\r\n        }\r\n    }\r\n    ngOnInit() {\r\n    }\r\n    select(hex) {\r\n        this.selectedColor = hex;\r\n        const { r, g, b, a } = stringInputToObject(hex);\r\n        this.colorChanged.emit(new Color(r, g, b, a));\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatColorCollectionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorCollectionComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgxMatColorCollectionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.2\", type: NgxMatColorCollectionComponent, selector: \"ngx-mat-color-collection\", inputs: { color: \"color\" }, outputs: { colorChanged: \"colorChanged\" }, host: { classAttribute: \"ngx-mat-color-collection\" }, ngImport: i0, template: \"<div class=\\\"color-collection-row\\\">\\r\\n  <button *ngFor=\\\"let c of colors1\\\" mat-mini-fab [style.background-color]=\\\"c\\\" class=\\\"btn-color\\\"\\r\\n    (click)=\\\"select(c)\\\" [ngClass]=\\\"{'active': selectedColor === c}\\\">\\r\\n  </button>\\r\\n</div>\\r\\n<div class=\\\"color-collection-row\\\">\\r\\n  <button *ngFor=\\\"let c of colors2\\\" mat-mini-fab [style.background-color]=\\\"c\\\" class=\\\"btn-color\\\"\\r\\n    (click)=\\\"select(c)\\\" [ngClass]=\\\"{'active': selectedColor === c}\\\">\\r\\n  </button>\\r\\n</div>\", styles: [\".ngx-mat-color-collection .btn-color{height:20px;width:20px;margin-right:11px;box-shadow:none;opacity:.3}.ngx-mat-color-collection .btn-color.active{box-shadow:0 3px 5px -1px #0003,0 6px 10px #00000024,0 1px 18px #0000001f;opacity:1}\\n\"], dependencies: [{ kind: \"directive\", type: i1$1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"component\", type: i3.MatLegacyButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorCollectionComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ngx-mat-color-collection', encapsulation: ViewEncapsulation.None, host: {\r\n                        'class': 'ngx-mat-color-collection'\r\n                    }, template: \"<div class=\\\"color-collection-row\\\">\\r\\n  <button *ngFor=\\\"let c of colors1\\\" mat-mini-fab [style.background-color]=\\\"c\\\" class=\\\"btn-color\\\"\\r\\n    (click)=\\\"select(c)\\\" [ngClass]=\\\"{'active': selectedColor === c}\\\">\\r\\n  </button>\\r\\n</div>\\r\\n<div class=\\\"color-collection-row\\\">\\r\\n  <button *ngFor=\\\"let c of colors2\\\" mat-mini-fab [style.background-color]=\\\"c\\\" class=\\\"btn-color\\\"\\r\\n    (click)=\\\"select(c)\\\" [ngClass]=\\\"{'active': selectedColor === c}\\\">\\r\\n  </button>\\r\\n</div>\", styles: [\".ngx-mat-color-collection .btn-color{height:20px;width:20px;margin-right:11px;box-shadow:none;opacity:.3}.ngx-mat-color-collection .btn-color.active{box-shadow:0 3px 5px -1px #0003,0 6px 10px #00000024,0 1px 18px #0000001f;opacity:1}\\n\"] }]\r\n        }], ctorParameters: function () { return []; }, propDecorators: { colorChanged: [{\r\n                type: Output\r\n            }], color: [{\r\n                type: Input\r\n            }] } });\n\nclass NgxMatColorPaletteComponent {\r\n    constructor() {\r\n        this.colorChanged = new EventEmitter();\r\n    }\r\n    ngOnInit() {\r\n    }\r\n    handleColorChanged(color) {\r\n        this.colorChanged.emit(color);\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatColorPaletteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorPaletteComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgxMatColorPaletteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.2\", type: NgxMatColorPaletteComponent, selector: \"ngx-mat-color-palette\", inputs: { color: \"color\" }, outputs: { colorChanged: \"colorChanged\" }, host: { classAttribute: \"ngx-mat-color-palette\" }, ngImport: i0, template: \"<ngx-mat-color-canvas (colorChanged)=\\\"handleColorChanged($event)\\\" [color]=\\\"color\\\"></ngx-mat-color-canvas>\\r\\n<ngx-mat-color-collection (colorChanged)=\\\"handleColorChanged($event)\\\" [color]=\\\"color\\\"></ngx-mat-color-collection>\", styles: [\".ngx-mat-color-palette .actions{margin-top:10px;display:flex}.ngx-mat-color-palette .actions .left{display:flex;flex-direction:column;margin-right:15px}.ngx-mat-color-palette .actions .left .preview{flex:2 1 auto;margin-bottom:10px}.ngx-mat-color-palette .actions .right{display:flex;width:40px;flex-direction:column}\\n\"], dependencies: [{ kind: \"component\", type: NgxMatColorCanvasComponent, selector: \"ngx-mat-color-canvas\" }, { kind: \"component\", type: NgxMatColorCollectionComponent, selector: \"ngx-mat-color-collection\", inputs: [\"color\"], outputs: [\"colorChanged\"] }], encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorPaletteComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ngx-mat-color-palette', encapsulation: ViewEncapsulation.None, host: {\r\n                        'class': 'ngx-mat-color-palette'\r\n                    }, template: \"<ngx-mat-color-canvas (colorChanged)=\\\"handleColorChanged($event)\\\" [color]=\\\"color\\\"></ngx-mat-color-canvas>\\r\\n<ngx-mat-color-collection (colorChanged)=\\\"handleColorChanged($event)\\\" [color]=\\\"color\\\"></ngx-mat-color-collection>\", styles: [\".ngx-mat-color-palette .actions{margin-top:10px;display:flex}.ngx-mat-color-palette .actions .left{display:flex;flex-direction:column;margin-right:15px}.ngx-mat-color-palette .actions .left .preview{flex:2 1 auto;margin-bottom:10px}.ngx-mat-color-palette .actions .right{display:flex;width:40px;flex-direction:column}\\n\"] }]\r\n        }], ctorParameters: function () { return []; }, propDecorators: { colorChanged: [{\r\n                type: Output\r\n            }], color: [{\r\n                type: Input\r\n            }] } });\n\nclass ColorAdapter {\r\n    constructor() { }\r\n    sameColor(a, b) {\r\n        if (a == null && b == null)\r\n            return true;\r\n        if (a != null && b != null)\r\n            return a.rgba === b.rgba;\r\n        return false;\r\n    }\r\n    format(c, format) {\r\n        return c.toString(format);\r\n    }\r\n    parse(value) {\r\n        const obj = stringInputToObject(value);\r\n        if (obj) {\r\n            return new Color(obj.r, obj.g, obj.b, obj.a);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n/** @nocollapse */ ColorAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: ColorAdapter, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ ColorAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: ColorAdapter });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: ColorAdapter, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return []; } });\n\nconst NGX_MAT_COLOR_FORMATS = {\r\n    display: {\r\n        colorInput: 'hex'\r\n    }\r\n};\r\nconst MAT_COLOR_FORMATS = new InjectionToken('mat-color-formats');\n\n/** Injection token that determines the scroll handling while the calendar is open. */\r\nconst NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY = new InjectionToken('ngx-mat-colorpicker-scroll-strategy');\r\nfunction NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY(overlay) {\r\n    return () => overlay.scrollStrategies.reposition();\r\n}\r\nconst NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\r\n    provide: NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY,\r\n    deps: [Overlay],\r\n    useFactory: NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY,\r\n};\r\nconst _MatColorpickerContentBase = mixinColor(class {\r\n    constructor(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n});\r\nclass NgxMatColorPickerContentComponent extends _MatColorpickerContentBase {\r\n    constructor(elementRef) {\r\n        super(elementRef);\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatColorPickerContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorPickerContentComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgxMatColorPickerContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.2\", type: NgxMatColorPickerContentComponent, selector: \"ngx-mat-color-picker-content\", inputs: { color: \"color\" }, host: { properties: { \"@transformPanel\": \"\\\"enter\\\"\", \"class.ngx-mat-colorpicker-content-touch\": \"picker.touchUi\" }, classAttribute: \"ngx-mat-colorpicker-content\" }, viewQueries: [{ propertyName: \"_palette\", first: true, predicate: NgxMatColorPaletteComponent, descendants: true }], exportAs: [\"ngxMatColorPickerContent\"], usesInheritance: true, ngImport: i0, template: \"<ngx-mat-color-palette (colorChanged)=\\\"picker.select($event)\\\" [color]=\\\"picker._selected\\\"></ngx-mat-color-palette>\", styles: [\".ngx-mat-colorpicker-content{display:block;border-radius:4px;box-shadow:0 2px 4px -1px #0003,0 4px 5px #00000024,0 1px 10px #0000001f;background-color:#fff;color:#000000de;padding:16px}.ngx-mat-colorpicker-content .ngx-mat-color-palette{width:296px;height:354px}.ngx-mat-colorpicker-content-touch{display:block;max-height:80vh;overflow:auto}.ngx-mat-colorpicker-content-touch .ngx-mat-color-palette{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation: landscape){.mat-colorpicker-content-touch .ngx-mat-color-palette{width:64vh;height:80vh}}@media all and (orientation: portrait){.mat-colorpicker-content-touch .ngx-mat-color-palette{width:80vw;height:100vw}}\\n\"], dependencies: [{ kind: \"component\", type: NgxMatColorPaletteComponent, selector: \"ngx-mat-color-palette\", inputs: [\"color\"], outputs: [\"colorChanged\"] }], animations: [\r\n        matDatepickerAnimations.transformPanel,\r\n        matDatepickerAnimations.fadeInCalendar,\r\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorPickerContentComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ngx-mat-color-picker-content', host: {\r\n                        'class': 'ngx-mat-colorpicker-content',\r\n                        '[@transformPanel]': '\"enter\"',\r\n                        '[class.ngx-mat-colorpicker-content-touch]': 'picker.touchUi',\r\n                    }, animations: [\r\n                        matDatepickerAnimations.transformPanel,\r\n                        matDatepickerAnimations.fadeInCalendar,\r\n                    ], exportAs: 'ngxMatColorPickerContent', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['color'], template: \"<ngx-mat-color-palette (colorChanged)=\\\"picker.select($event)\\\" [color]=\\\"picker._selected\\\"></ngx-mat-color-palette>\", styles: [\".ngx-mat-colorpicker-content{display:block;border-radius:4px;box-shadow:0 2px 4px -1px #0003,0 4px 5px #00000024,0 1px 10px #0000001f;background-color:#fff;color:#000000de;padding:16px}.ngx-mat-colorpicker-content .ngx-mat-color-palette{width:296px;height:354px}.ngx-mat-colorpicker-content-touch{display:block;max-height:80vh;overflow:auto}.ngx-mat-colorpicker-content-touch .ngx-mat-color-palette{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation: landscape){.mat-colorpicker-content-touch .ngx-mat-color-palette{width:64vh;height:80vh}}@media all and (orientation: portrait){.mat-colorpicker-content-touch .ngx-mat-color-palette{width:80vw;height:100vw}}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { _palette: [{\r\n                type: ViewChild,\r\n                args: [NgxMatColorPaletteComponent]\r\n            }] } });\r\nclass NgxMatColorPickerComponent {\r\n    constructor(_dialog, _overlay, _zone, _adapter, _dir, scrollStrategy, _document, _viewContainerRef) {\r\n        this._dialog = _dialog;\r\n        this._overlay = _overlay;\r\n        this._zone = _zone;\r\n        this._adapter = _adapter;\r\n        this._dir = _dir;\r\n        this._document = _document;\r\n        this._viewContainerRef = _viewContainerRef;\r\n        /** Emits when the datepicker has been opened. */\r\n        this.openedStream = new EventEmitter();\r\n        /** Emits when the datepicker has been closed. */\r\n        this.closedStream = new EventEmitter();\r\n        this._touchUi = false;\r\n        this._opened = false;\r\n        this._defaultColor = 'primary';\r\n        this._validSelected = null;\r\n        /** Emits when the datepicker is disabled. */\r\n        this._disabledChange = new Subject();\r\n        /** The element that was focused before the datepicker was opened. */\r\n        this._focusedElementBeforeOpen = null;\r\n        /** Subscription to value changes in the associated input element. */\r\n        this._inputSubscription = Subscription.EMPTY;\r\n        /** Emits new selected date when selected date changes. */\r\n        this._selectedChanged = new Subject();\r\n        this._scrollStrategy = scrollStrategy;\r\n    }\r\n    get disabled() {\r\n        return this._disabled === undefined && this._pickerInput ?\r\n            this._pickerInput.disabled : !!this._disabled;\r\n    }\r\n    set disabled(value) {\r\n        const newValue = coerceBooleanProperty(value);\r\n        if (newValue !== this._disabled) {\r\n            this._disabled = newValue;\r\n            this._disabledChange.next(newValue);\r\n        }\r\n    }\r\n    get touchUi() { return this._touchUi; }\r\n    set touchUi(value) {\r\n        this._touchUi = coerceBooleanProperty(value);\r\n    }\r\n    /** Whether the calendar is open. */\r\n    get opened() { return this._opened; }\r\n    set opened(value) { value ? this.open() : this.close(); }\r\n    /** Default Color palette to use on the datepicker's calendar. */\r\n    get defaultColor() {\r\n        return this._defaultColor;\r\n    }\r\n    set defaultColor(value) {\r\n        this._defaultColor = value;\r\n    }\r\n    /** Color palette to use on the datepicker's calendar. */\r\n    get color() {\r\n        return this._color ||\r\n            (this._pickerInput ? this._pickerInput.getThemePalette() : undefined);\r\n    }\r\n    set color(value) {\r\n        this._color = value;\r\n    }\r\n    /** The currently selected date. */\r\n    get _selected() { return this._validSelected; }\r\n    set _selected(value) { this._validSelected = value; }\r\n    ngOnInit() {\r\n    }\r\n    ngOnDestroy() {\r\n        this.close();\r\n        this._inputSubscription.unsubscribe();\r\n        this._disabledChange.complete();\r\n        if (this._popupRef) {\r\n            this._popupRef.dispose();\r\n            this._popupComponentRef = null;\r\n        }\r\n    }\r\n    /** Selects the given date */\r\n    select(nextVal) {\r\n        let oldValue = this._selected;\r\n        this._selected = nextVal;\r\n        if (!this._adapter.sameColor(oldValue, this._selected)) {\r\n            this._selectedChanged.next(nextVal);\r\n        }\r\n    }\r\n    /**\r\n   * Register an input with this datepicker.\r\n   * @param input The datepicker input to register with this datepicker.\r\n   */\r\n    registerInput(input) {\r\n        if (this._pickerInput) {\r\n            throw Error('A ColorPicker can only be associated with a single input.');\r\n        }\r\n        this._pickerInput = input;\r\n        this._inputSubscription =\r\n            this._pickerInput._valueChange.subscribe((value) => this._selected = value);\r\n    }\r\n    open() {\r\n        if (this._opened || this.disabled) {\r\n            return;\r\n        }\r\n        if (!this._pickerInput) {\r\n            throw Error('Attempted to open an ColorPicker with no associated input.');\r\n        }\r\n        if (this._document) {\r\n            this._focusedElementBeforeOpen = this._document.activeElement;\r\n        }\r\n        this.touchUi ? this._openAsDialog() : this._openAsPopup();\r\n        this._opened = true;\r\n        this.openedStream.emit();\r\n    }\r\n    /** Open the calendar as a dialog. */\r\n    _openAsDialog() {\r\n        if (this._dialogRef) {\r\n            this._dialogRef.close();\r\n        }\r\n        this._dialogRef = this._dialog.open(NgxMatColorPickerContentComponent, {\r\n            direction: this._dir ? this._dir.value : 'ltr',\r\n            viewContainerRef: this._viewContainerRef,\r\n            panelClass: 'ngx-mat-colorpicker-dialog',\r\n        });\r\n        this._dialogRef.afterClosed().subscribe(() => this.close());\r\n        this._dialogRef.componentInstance.picker = this;\r\n        this._setColor();\r\n    }\r\n    /** Open the calendar as a popup. */\r\n    _openAsPopup() {\r\n        if (!this._portal) {\r\n            this._portal = new ComponentPortal(NgxMatColorPickerContentComponent, this._viewContainerRef);\r\n        }\r\n        if (!this._popupRef) {\r\n            this._createPopup();\r\n        }\r\n        if (!this._popupRef.hasAttached()) {\r\n            this._popupComponentRef = this._popupRef.attach(this._portal);\r\n            this._popupComponentRef.instance.picker = this;\r\n            this._setColor();\r\n            // Update the position once the calendar has rendered.\r\n            this._zone.onStable.asObservable().pipe(take(1)).subscribe(() => {\r\n                this._popupRef.updatePosition();\r\n            });\r\n        }\r\n    }\r\n    /** Create the popup. */\r\n    _createPopup() {\r\n        const overlayConfig = new OverlayConfig({\r\n            positionStrategy: this._createPopupPositionStrategy(),\r\n            hasBackdrop: true,\r\n            backdropClass: 'mat-overlay-transparent-backdrop',\r\n            direction: this._dir,\r\n            scrollStrategy: this._scrollStrategy(),\r\n            panelClass: 'mat-colorpicker-popup',\r\n        });\r\n        this._popupRef = this._overlay.create(overlayConfig);\r\n        this._popupRef.overlayElement.setAttribute('role', 'dialog');\r\n        merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter(event => {\r\n            // Closing on alt + up is only valid when there's an input associated with the datepicker.\r\n            return event.keyCode === ESCAPE ||\r\n                (this._pickerInput && event.altKey && event.keyCode === UP_ARROW);\r\n        }))).subscribe(event => {\r\n            if (event) {\r\n                event.preventDefault();\r\n            }\r\n            this.close();\r\n        });\r\n    }\r\n    close() {\r\n        if (!this._opened) {\r\n            return;\r\n        }\r\n        if (this._popupRef && this._popupRef.hasAttached()) {\r\n            this._popupRef.detach();\r\n        }\r\n        if (this._dialogRef) {\r\n            this._dialogRef.close();\r\n            this._dialogRef = null;\r\n        }\r\n        if (this._portal && this._portal.isAttached) {\r\n            this._portal.detach();\r\n        }\r\n        const completeClose = () => {\r\n            // The `_opened` could've been reset already if\r\n            // we got two events in quick succession.\r\n            if (this._opened) {\r\n                this._opened = false;\r\n                this.closedStream.emit();\r\n                this._focusedElementBeforeOpen = null;\r\n            }\r\n        };\r\n        if (this._focusedElementBeforeOpen &&\r\n            typeof this._focusedElementBeforeOpen.focus === 'function') {\r\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\r\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\r\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\r\n            // able to close the calendar at all. We work around it by making the logic, that marks\r\n            // the datepicker as closed, async as well.\r\n            this._focusedElementBeforeOpen.focus();\r\n            setTimeout(completeClose);\r\n        }\r\n        else {\r\n            completeClose();\r\n        }\r\n    }\r\n    /** Passes the current theme color along to the calendar overlay. */\r\n    _setColor() {\r\n        const color = this.color;\r\n        if (this._popupComponentRef) {\r\n            this._popupComponentRef.instance.color = color;\r\n        }\r\n        if (this._dialogRef) {\r\n            this._dialogRef.componentInstance.color = color;\r\n        }\r\n    }\r\n    /** Create the popup PositionStrategy. */\r\n    _createPopupPositionStrategy() {\r\n        return this._overlay.position()\r\n            .flexibleConnectedTo(this._pickerInput.getConnectedOverlayOrigin())\r\n            .withTransformOriginOn('.ngx-mat-colorpicker-content')\r\n            .withFlexibleDimensions(false)\r\n            .withViewportMargin(8)\r\n            .withLockedPosition()\r\n            .withPositions([\r\n            {\r\n                originX: 'start',\r\n                originY: 'bottom',\r\n                overlayX: 'start',\r\n                overlayY: 'top'\r\n            },\r\n            {\r\n                originX: 'start',\r\n                originY: 'top',\r\n                overlayX: 'start',\r\n                overlayY: 'bottom'\r\n            },\r\n            {\r\n                originX: 'end',\r\n                originY: 'bottom',\r\n                overlayX: 'end',\r\n                overlayY: 'top'\r\n            },\r\n            {\r\n                originX: 'end',\r\n                originY: 'top',\r\n                overlayX: 'end',\r\n                overlayY: 'bottom'\r\n            }\r\n        ]);\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatColorPickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorPickerComponent, deps: [{ token: i2$1.MatLegacyDialog }, { token: i3$1.Overlay }, { token: i0.NgZone }, { token: ColorAdapter }, { token: i5.Directionality, optional: true }, { token: NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY }, { token: DOCUMENT, optional: true }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgxMatColorPickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.2\", type: NgxMatColorPickerComponent, selector: \"ngx-mat-color-picker\", inputs: { disabled: \"disabled\", touchUi: \"touchUi\", opened: \"opened\", defaultColor: \"defaultColor\", color: \"color\" }, outputs: { openedStream: \"opened\", closedStream: \"closed\" }, exportAs: [\"ngxMatColorPicker\"], ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorPickerComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-mat-color-picker',\r\n                    template: '',\r\n                    exportAs: 'ngxMatColorPicker',\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    encapsulation: ViewEncapsulation.None,\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i2$1.MatLegacyDialog }, { type: i3$1.Overlay }, { type: i0.NgZone }, { type: ColorAdapter }, { type: i5.Directionality, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }, { type: i0.ViewContainerRef }]; }, propDecorators: { openedStream: [{\r\n                type: Output,\r\n                args: ['opened']\r\n            }], closedStream: [{\r\n                type: Output,\r\n                args: ['closed']\r\n            }], disabled: [{\r\n                type: Input\r\n            }], touchUi: [{\r\n                type: Input\r\n            }], opened: [{\r\n                type: Input\r\n            }], defaultColor: [{\r\n                type: Input\r\n            }], color: [{\r\n                type: Input\r\n            }] } });\n\nclass NgxMatColorPickerInputEvent {\r\n    constructor(\r\n    /** Reference to the colorpicker input component that emitted the event. */\r\n    target, \r\n    /** Reference to the native input element associated with the colorpicker input. */\r\n    targetElement) {\r\n        this.target = target;\r\n        this.targetElement = targetElement;\r\n        this.value = this.target.value;\r\n    }\r\n}\r\nconst MAT_COLORPICKER_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => NgxMatColorPickerInput),\r\n    multi: true\r\n};\r\nconst MAT_COLORPICKER_VALIDATORS = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => NgxMatColorPickerInput),\r\n    multi: true\r\n};\r\nclass NgxMatColorPickerInput {\r\n    constructor(_elementRef, _formField, _colorFormats, _adapter) {\r\n        this._elementRef = _elementRef;\r\n        this._formField = _formField;\r\n        this._colorFormats = _colorFormats;\r\n        this._adapter = _adapter;\r\n        /** Emits when a `change` event is fired on this `<input>`. */\r\n        this.colorChange = new EventEmitter();\r\n        /** Emits when an `input` event is fired on this `<input>`. */\r\n        this.colorInput = new EventEmitter();\r\n        /** Emits when the disabled state has changed */\r\n        this._disabledChange = new EventEmitter();\r\n        /** Emits when the value changes (either due to user input or programmatic change). */\r\n        this._valueChange = new EventEmitter();\r\n        this._onTouched = () => { };\r\n        this._cvaOnChange = () => { };\r\n        this._validatorOnChange = () => { };\r\n        this._pickerSubscription = Subscription.EMPTY;\r\n        /** The combined form control validator for this input. */\r\n        this._validator = Validators.compose([]);\r\n        /** Whether the last value set on the input was valid. */\r\n        this._lastValueValid = false;\r\n        if (!this._colorFormats) {\r\n            throw createMissingDateImplError('MAT_COLOR_FORMATS');\r\n        }\r\n    }\r\n    set ngxMatColorPicker(value) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n        this._picker = value;\r\n        this._picker.registerInput(this);\r\n        this._pickerSubscription.unsubscribe();\r\n        this._pickerSubscription = this._picker._selectedChanged.subscribe((selected) => {\r\n            this.value = selected;\r\n            this._cvaOnChange(selected);\r\n            this._onTouched();\r\n            this.colorInput.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\r\n            this.colorChange.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\r\n        });\r\n    }\r\n    /** Whether the colorpicker-input is disabled. */\r\n    get disabled() { return !!this._disabled; }\r\n    set disabled(value) {\r\n        const newValue = coerceBooleanProperty(value);\r\n        const element = this._elementRef.nativeElement;\r\n        if (this._disabled !== newValue) {\r\n            this._disabled = newValue;\r\n            this._disabledChange.emit(newValue);\r\n        }\r\n        // We need to null check the `blur` method, because it's undefined during SSR.\r\n        if (newValue && element.blur) {\r\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\r\n            // is problematic, because it would mean that it triggers another change detection cycle,\r\n            // which then causes a changed after checked error if the input element was focused before.\r\n            element.blur();\r\n        }\r\n    }\r\n    /** The value of the input. */\r\n    get value() { return this._value; }\r\n    set value(value) {\r\n        const oldValue = this.value;\r\n        this._value = value;\r\n        this._formatValue(value);\r\n        if (!this._adapter.sameColor(oldValue, value)) {\r\n            this._valueChange.emit(value);\r\n        }\r\n    }\r\n    /** Returns the palette used by the input's form field, if any. */\r\n    getThemePalette() {\r\n        return this._formField ? this._formField.color : undefined;\r\n    }\r\n    registerOnValidatorChange(fn) {\r\n        this._validatorOnChange = fn;\r\n    }\r\n    validate(c) {\r\n        return this._validator ? this._validator(c) : null;\r\n    }\r\n    /**\r\n     * @deprecated\r\n     * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\r\n     */\r\n    getPopupConnectionElementRef() {\r\n        return this.getConnectedOverlayOrigin();\r\n    }\r\n    /**\r\n    * Gets the element that the colorpicker popup should be connected to.\r\n    * @return The element to connect the popup to.\r\n    */\r\n    getConnectedOverlayOrigin() {\r\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\r\n    }\r\n    ngOnInit() {\r\n    }\r\n    ngOnDestroy() {\r\n        this._pickerSubscription.unsubscribe();\r\n        this._valueChange.complete();\r\n        this._disabledChange.complete();\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    writeValue(value) {\r\n        this.value = value;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnChange(fn) {\r\n        this._cvaOnChange = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n    }\r\n    _onChange() {\r\n        this.colorChange.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\r\n    }\r\n    _onKeydown(event) {\r\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\r\n        if (this._picker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\r\n            this._picker.open();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    /** Handles blur events on the input. */\r\n    _onBlur() {\r\n        // Reformat the input only if we have a valid value.\r\n        if (this.value) {\r\n            this._formatValue(this.value);\r\n        }\r\n        this._onTouched();\r\n    }\r\n    /** Formats a value and sets it on the input element. */\r\n    _formatValue(value) {\r\n        this._elementRef.nativeElement.value = value ? this._adapter.format(value, this._colorFormats.display.colorInput) : '';\r\n    }\r\n    _onInput(value) {\r\n        const lastValueWasValid = this._lastValueValid;\r\n        const nextValue = this._adapter.parse(value);\r\n        if (!this._adapter.sameColor(nextValue, this._value)) {\r\n            this._value = nextValue;\r\n            this._cvaOnChange(nextValue);\r\n            this._valueChange.emit(nextValue);\r\n            this.colorInput.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\r\n        }\r\n        else if (lastValueWasValid !== this._lastValueValid) {\r\n            this._validatorOnChange();\r\n        }\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatColorPickerInput.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorPickerInput, deps: [{ token: i0.ElementRef }, { token: i1.MatLegacyFormField, optional: true }, { token: MAT_COLOR_FORMATS, optional: true }, { token: ColorAdapter }], target: i0.ɵɵFactoryTarget.Directive });\r\n/** @nocollapse */ NgxMatColorPickerInput.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: NgxMatColorPickerInput, selector: \"input[ngxMatColorPicker]\", inputs: { ngxMatColorPicker: \"ngxMatColorPicker\", disabled: \"disabled\", value: \"value\" }, outputs: { colorChange: \"colorChange\", colorInput: \"colorInput\" }, host: { listeners: { \"input\": \"_onInput($event.target.value)\", \"change\": \"_onChange()\", \"blur\": \"_onBlur()\", \"keydown\": \"_onKeydown($event)\" }, properties: { \"attr.aria-haspopup\": \"_picker ? \\\"dialog\\\" : null\", \"attr.aria-owns\": \"(_picker?.opened && _picker.id) || null\", \"disabled\": \"disabled\" } }, providers: [\r\n        MAT_COLORPICKER_VALUE_ACCESSOR,\r\n        MAT_COLORPICKER_VALIDATORS,\r\n        { provide: MAT_LEGACY_INPUT_VALUE_ACCESSOR, useExisting: NgxMatColorPickerInput },\r\n    ], exportAs: [\"ngxMatColorPickerInput\"], ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorPickerInput, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'input[ngxMatColorPicker]',\r\n                    providers: [\r\n                        MAT_COLORPICKER_VALUE_ACCESSOR,\r\n                        MAT_COLORPICKER_VALIDATORS,\r\n                        { provide: MAT_LEGACY_INPUT_VALUE_ACCESSOR, useExisting: NgxMatColorPickerInput },\r\n                    ],\r\n                    host: {\r\n                        '[attr.aria-haspopup]': '_picker ? \"dialog\" : null',\r\n                        '[attr.aria-owns]': '(_picker?.opened && _picker.id) || null',\r\n                        '[disabled]': 'disabled',\r\n                        '(input)': '_onInput($event.target.value)',\r\n                        '(change)': '_onChange()',\r\n                        '(blur)': '_onBlur()',\r\n                        '(keydown)': '_onKeydown($event)',\r\n                    },\r\n                    exportAs: 'ngxMatColorPickerInput',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.MatLegacyFormField, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [MAT_COLOR_FORMATS]\r\n                }] }, { type: ColorAdapter }]; }, propDecorators: { ngxMatColorPicker: [{\r\n                type: Input\r\n            }], disabled: [{\r\n                type: Input\r\n            }], value: [{\r\n                type: Input\r\n            }], colorChange: [{\r\n                type: Output\r\n            }], colorInput: [{\r\n                type: Output\r\n            }] } });\n\nclass NgxMatColorToggleComponent {\r\n    constructor(_cd) {\r\n        this._cd = _cd;\r\n        this._stateChanges = Subscription.EMPTY;\r\n    }\r\n    get disabled() {\r\n        if (this._disabled == null && this.picker) {\r\n            return this.picker.disabled;\r\n        }\r\n    }\r\n    set disabled(value) {\r\n        this._disabled = value;\r\n    }\r\n    ngOnInit() {\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes['picker']) {\r\n            this._watchStateChanges();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._stateChanges.unsubscribe();\r\n    }\r\n    ngAfterContentInit() {\r\n        this._watchStateChanges();\r\n    }\r\n    open(event) {\r\n        if (this.picker && !this.disabled) {\r\n            this.picker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n    _watchStateChanges() {\r\n        const disabled$ = this.picker ? this.picker._disabledChange : of();\r\n        const inputDisabled$ = this.picker && this.picker._pickerInput ?\r\n            this.picker._pickerInput._disabledChange : of();\r\n        const pickerToggled$ = this.picker ?\r\n            merge(this.picker.openedStream, this.picker.closedStream) : of();\r\n        this._stateChanges.unsubscribe();\r\n        this._stateChanges = merge(disabled$, inputDisabled$, pickerToggled$).subscribe(() => this._cd.markForCheck());\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatColorToggleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorToggleComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgxMatColorToggleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.2\", type: NgxMatColorToggleComponent, selector: \"ngx-mat-color-toggle\", inputs: { picker: [\"for\", \"picker\"], tabIndex: \"tabIndex\", disabled: \"disabled\" }, host: { listeners: { \"focus\": \"_button.focus()\" }, properties: { \"attr.tabindex\": \"-1\", \"class.ngx-mat-color-toggle-active\": \"picker && picker.opened\", \"class.mat-accent\": \"picker && picker.color === \\\"accent\\\"\", \"class.mat-warn\": \"picker && picker.color === \\\"warn\\\"\" }, classAttribute: \"ngx-mat-color-toggle\" }, viewQueries: [{ propertyName: \"_button\", first: true, predicate: [\"button\"], descendants: true }], exportAs: [\"ngxMatColorPickerToggle\"], usesOnChanges: true, ngImport: i0, template: \"<button #button mat-icon-button type=\\\"button\\\" [attr.aria-haspopup]=\\\"picker ? 'dialog' : null\\\"\\r\\n  [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [disabled]=\\\"disabled\\\" (click)=\\\"open($event)\\\">\\r\\n  <mat-icon [style.color]=\\\"picker?._selected?.rgba\\\">palette</mat-icon>\\r\\n</button>\", styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-color-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-color-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-color-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-color-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-color-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-color-toggle-default-icon{margin:auto}\\n\"], dependencies: [{ kind: \"component\", type: i3.MatLegacyButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i2$2.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }], encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorToggleComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ngx-mat-color-toggle', host: {\r\n                        'class': 'ngx-mat-color-toggle',\r\n                        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\r\n                        // consumer may have provided, while still being able to receive focus.\r\n                        '[attr.tabindex]': '-1',\r\n                        '[class.ngx-mat-color-toggle-active]': 'picker && picker.opened',\r\n                        '[class.mat-accent]': 'picker && picker.color === \"accent\"',\r\n                        '[class.mat-warn]': 'picker && picker.color === \"warn\"',\r\n                        '(focus)': '_button.focus()',\r\n                    }, exportAs: 'ngxMatColorPickerToggle', encapsulation: ViewEncapsulation.None, template: \"<button #button mat-icon-button type=\\\"button\\\" [attr.aria-haspopup]=\\\"picker ? 'dialog' : null\\\"\\r\\n  [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [disabled]=\\\"disabled\\\" (click)=\\\"open($event)\\\">\\r\\n  <mat-icon [style.color]=\\\"picker?._selected?.rgba\\\">palette</mat-icon>\\r\\n</button>\", styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-color-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-color-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-color-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-color-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-color-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-color-toggle-default-icon{margin:auto}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { picker: [{\r\n                type: Input,\r\n                args: ['for']\r\n            }], tabIndex: [{\r\n                type: Input\r\n            }], disabled: [{\r\n                type: Input\r\n            }], _button: [{\r\n                type: ViewChild,\r\n                args: ['button']\r\n            }] } });\n\nclass NgxMatColorPickerModule {\r\n}\r\n/** @nocollapse */ NgxMatColorPickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorPickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgxMatColorPickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorPickerModule, declarations: [NgxMatColorPaletteComponent,\r\n        NgxMatColorCanvasComponent,\r\n        NgxMatColorCollectionComponent,\r\n        NgxMatColorSliderComponent,\r\n        NumericColorInputDirective,\r\n        NgxMatColorPickerContentComponent,\r\n        NgxMatColorPickerComponent,\r\n        NgxMatColorToggleComponent,\r\n        NgxMatColorPickerInput], imports: [CommonModule,\r\n        MatLegacyInputModule,\r\n        MatLegacyButtonModule,\r\n        MatLegacyCardModule,\r\n        MatLegacyRadioModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatLegacyDialogModule,\r\n        PortalModule,\r\n        MatIconModule], exports: [NgxMatColorToggleComponent,\r\n        NgxMatColorPickerInput,\r\n        NgxMatColorPickerComponent] });\r\n/** @nocollapse */ NgxMatColorPickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorPickerModule, providers: [\r\n        ColorAdapter,\r\n        NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\r\n    ], imports: [CommonModule,\r\n        MatLegacyInputModule,\r\n        MatLegacyButtonModule,\r\n        MatLegacyCardModule,\r\n        MatLegacyRadioModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatLegacyDialogModule,\r\n        PortalModule,\r\n        MatIconModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatColorPickerModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        NgxMatColorPaletteComponent,\r\n                        NgxMatColorCanvasComponent,\r\n                        NgxMatColorCollectionComponent,\r\n                        NgxMatColorSliderComponent,\r\n                        NumericColorInputDirective,\r\n                        NgxMatColorPickerContentComponent,\r\n                        NgxMatColorPickerComponent,\r\n                        NgxMatColorToggleComponent,\r\n                        NgxMatColorPickerInput\r\n                    ],\r\n                    imports: [\r\n                        CommonModule,\r\n                        MatLegacyInputModule,\r\n                        MatLegacyButtonModule,\r\n                        MatLegacyCardModule,\r\n                        MatLegacyRadioModule,\r\n                        FormsModule,\r\n                        ReactiveFormsModule,\r\n                        MatLegacyDialogModule,\r\n                        PortalModule,\r\n                        MatIconModule\r\n                    ],\r\n                    exports: [\r\n                        NgxMatColorToggleComponent,\r\n                        NgxMatColorPickerInput,\r\n                        NgxMatColorPickerComponent\r\n                    ],\r\n                    entryComponents: [\r\n                        NgxMatColorPickerContentComponent\r\n                    ],\r\n                    providers: [\r\n                        ColorAdapter,\r\n                        NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\r\n                    ]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of color-picker\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { BASIC_COLORS, Color, ColorAdapter, MAT_COLORPICKER_VALIDATORS, MAT_COLORPICKER_VALUE_ACCESSOR, MAT_COLOR_FORMATS, MAX_RGB, MIN_RGB, NGX_MAT_COLOR_FORMATS, NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY, NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY, NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, NUMERIC_REGEX, NgxMatColorCanvasComponent, NgxMatColorCollectionComponent, NgxMatColorPaletteComponent, NgxMatColorPickerComponent, NgxMatColorPickerContentComponent, NgxMatColorPickerInput, NgxMatColorPickerInputEvent, NgxMatColorPickerModule, NgxMatColorSliderComponent, NgxMatColorToggleComponent, NumericColorInputDirective, convertDecimalToHex, createMissingDateImplError, getColorAtPosition, matchers, pad2, rgbToHex, rgbaToHex, stringInputToObject };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}