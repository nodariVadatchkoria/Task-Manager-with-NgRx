{"ast":null,"code":"import { createReducer, on } from \"@ngrx/store\";\nimport { loadProjects, loadProjectsFailure, loadProjectsSuccess, setProject, setProjectFailure } from \"./project.actions\";\nconst initialState = {\n  projects: [],\n  currentProject: null,\n  error: null\n};\nexport const projectReducer = createReducer(initialState, on(loadProjects, state => state), on(loadProjectsSuccess, (state, action) => {\n  return {\n    ...state,\n    projects: action.data\n  };\n}), on(loadProjectsFailure, (state, action) => state), on(setProject, (state, action) => state), on(setProjectFailure, {\n  const: project = state.projects.find(project => project.id === action.projectId),\n  // project & localStorage.setItem('project', JSON.stringify(project));\n  return: {\n    ...state,\n    currentProject: project || null\n  }\n}));","map":{"version":3,"mappings":"AAAA,SAAQA,aAAa,EAAEC,EAAE,QAAO,aAAa;AAC7C,SAAQC,YAAY,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,UAAU,EAAEC,iBAAiB,QAAO,mBAAmB;AAQvH,MAAMC,YAAY,GAAwB;EACtCC,QAAQ,EAAE,EAAE;EACZC,cAAc,EAAE,IAAI;EACpBC,KAAK,EAAE;CACV;AACD,OAAO,MAAMC,cAAc,GAAGX,aAAa,CACvCO,YAAY,EACZN,EAAE,CAACC,YAAY,EAAEU,KAAK,IAAIA,KAAK,CAAC,EAChCX,EAAE,CAACG,mBAAmB,EAAE,CAACQ,KAAK,EAAEC,MAAM,KAAI;EACtC,OAAO;IACH,GAAGD,KAAK;IACRJ,QAAQ,EAAEK,MAAM,CAACC;GACpB;AACL,CAAC,CACA,EACDb,EAAE,CAACE,mBAAmB,EAAE,CAACS,KAAK,EAAEC,MAAM,KAAKD,KAAK,CAAC,EACjDX,EAAE,CAACI,UAAU,EAAE,CAACO,KAAK,EAAEC,MAAM,KAAKD,KAAK,CAAC,EACxCX,EAAE,CAACK,iBAAiB,EAChB;EACAS,KAAK,EAACC,OAAO,GAAGJ,KAAK,CAACJ,QAAQ,CAACS,IAAI,CAAED,OAAiB,IAAKA,OAAO,CAACE,EAAE,KAAKL,MAAM,CAACM,SAAS,CAAC;EAC3F;EACAC,MAAM,EAAC;IACH,GAAGR,KAAK;IACRH,cAAc,EAAEO,OAAO,IAAI;;CAE9B,CACJ,CACJ","names":["createReducer","on","loadProjects","loadProjectsFailure","loadProjectsSuccess","setProject","setProjectFailure","initialState","projects","currentProject","error","projectReducer","state","action","data","const","project","find","id","projectId","return"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/store/rxProject/project.reducer.ts"],"sourcesContent":["import {createReducer, on} from \"@ngrx/store\";\nimport {loadProjects, loadProjectsFailure, loadProjectsSuccess, setProject, setProjectFailure} from \"./project.actions\";\nimport {IProject} from \"../../core/interfaces/iproject\";\n\nexport interface ProjectStateModule {\n    projects: IProject[];\n    currentProject: IProject | null;\n    error: any;\n}\nconst initialState : ProjectStateModule = {\n    projects: [],\n    currentProject: null,\n    error: null\n};\nexport const projectReducer = createReducer(\n    initialState,\n    on(loadProjects, state => state),\n    on(loadProjectsSuccess, (state, action) => {\n        return {\n            ...state,\n            projects: action.data\n        };\n    }\n    ),\n    on(loadProjectsFailure, (state, action) => state),\n    on(setProject, (state, action) => state),\n    on(setProjectFailure\n        {\n        const project = state.projects.find((project: IProject) => project.id === action.projectId);\n        // project & localStorage.setItem('project', JSON.stringify(project));\n        return {\n            ...state,\n            currentProject: project || null\n        };\n        }\n    )\n);"]},"metadata":{},"sourceType":"module","externalDependencies":[]}