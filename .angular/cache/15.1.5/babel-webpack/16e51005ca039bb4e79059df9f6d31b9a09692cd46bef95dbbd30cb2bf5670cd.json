{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { currentProject } from \"../../../../store/rxProject/project.selectors\";\nlet ProjectInfoComponent = class ProjectInfoComponent {\n  constructor(projectsService, boardService, sharedService, router,\n  // private projectFacade: ProjectFacade,\n  store) {\n    this.projectsService = projectsService;\n    this.boardService = boardService;\n    this.sharedService = sharedService;\n    this.router = router;\n    this.store = store;\n    this.projects = [];\n    this.projectsLength = 0;\n    this.pageSize = 10;\n    this.page = 1;\n    this.currentProject$ = this.store.select(currentProject);\n  }\n  /*  @Input('length') length!: number;\n    @Input('pageSize') pageSize!: number;\n    @Input('pageSizeOptions') pageSizeOptions!: number;*/\n  // get project(): IProject {\n  //   return this.projectFacade.getProject();\n  //\n  // }\n  ngOnInit() {\n    this.getProjects('DESC', this.page, this.pageSize);\n    this.projectsService.getAllProjects().subscribe(res => {\n      this.projectsLength = res.length;\n    });\n  }\n  getProjects(order, page, pageSize) {\n    this.projectsService.getProjects(order, page, pageSize).subscribe({\n      next: res => res.data.forEach(project => {\n        this.projects.push(project);\n      }),\n      error: err => console.log(err)\n    });\n  }\n  settingsChanged(event) {\n    console.log(event);\n    this.page = event.pageIndex + 1;\n    this.pageSize = event.pageSize;\n    this.projects = [];\n    this.getProjects('DESC', this.page, this.pageSize);\n  }\n};\nProjectInfoComponent = __decorate([Component({\n  selector: 'app-project-info',\n  templateUrl: 'project-info.component.html',\n  styleUrls: ['./project-info.component.scss']\n})], ProjectInfoComponent);\nexport { ProjectInfoComponent };","map":{"version":3,"mappings":";AAAA,SAAQA,SAAS,QAAe,eAAe;AAa/C,SAAQC,cAAc,QAAO,+CAA+C;AASrE,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAE/BC,YAAoBC,eAAuC,EACvCC,YAA0B,EAC1BC,aAA4B,EAC5BC,MAAc;EACtB;EACiBC,KAA2C;IALpD,oBAAe,GAAfJ,eAAe;IACf,iBAAY,GAAZC,YAAY;IACZ,kBAAa,GAAbC,aAAa;IACb,WAAM,GAANC,MAAM;IAEG,UAAK,GAALC,KAAK;IAKlC,aAAQ,GAAe,EAAE;IACzB,mBAAc,GAAW,CAAC;IAC1B,aAAQ,GAAW,EAAE;IACrB,SAAI,GAAW,CAAC;IAEhB,oBAAe,GAAkC,IAAI,CAACA,KAAK,CAACC,MAAM,CAACR,cAAc,CAAC;EAPlF;EASA;;;EAGF;EACA;EACA;EACA;EACES,QAAQ;IACN,IAAI,CAACC,WAAW,CAAC,MAAM,EAAE,IAAI,CAACC,IAAI,EAAE,IAAI,CAACC,QAAQ,CAAC;IAElD,IAAI,CAACT,eAAe,CAACU,cAAc,EAAE,CAClCC,SAAS,CAACC,GAAG,IAAG;MACf,IAAI,CAACC,cAAc,GAAGD,GAAG,CAACE,MAAM;IAElC,CAAC,CAAC;EACN;EAEAP,WAAW,CAACQ,KAAa,EAAEP,IAAY,EAAEC,QAAgB;IACvD,IAAI,CAACT,eAAe,CAACO,WAAW,CAACQ,KAAK,EAAEP,IAAI,EAAEC,QAAQ,CAAC,CAACE,SAAS,CAAC;MAChEK,IAAI,EAAEJ,GAAG,IAAIA,GAAG,CAACK,IAAI,CAACC,OAAO,CAAEC,OAAY,IAAI;QAE7C,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACF,OAAO,CAAC;MAC7B,CAAC,CAAC;MACFG,KAAK,EAAEC,GAAG,IAAIC,OAAO,CAACC,GAAG,CAACF,GAAG;KAC9B,CAAC;EACJ;EAGAG,eAAe,CAACC,KAAgB;IAC9BH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;IAClB,IAAI,CAACnB,IAAI,GAAGmB,KAAK,CAACC,SAAS,GAAG,CAAC;IAC/B,IAAI,CAACnB,QAAQ,GAAGkB,KAAK,CAAClB,QAAQ;IAE9B,IAAI,CAACW,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACb,WAAW,CAAC,MAAM,EAAE,IAAI,CAACC,IAAI,EAAE,IAAI,CAACC,QAAQ,CAAC;EACpD;CAGD;AAzDYX,oBAAoB,eANhCF,SAAS,CAAC;EACTiC,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,GAEWjC,oBAAoB,CAyDhC;SAzDYA,oBAAoB","names":["Component","currentProject","ProjectInfoComponent","constructor","projectsService","boardService","sharedService","router","store","select","ngOnInit","getProjects","page","pageSize","getAllProjects","subscribe","res","projectsLength","length","order","next","data","forEach","project","projects","push","error","err","console","log","settingsChanged","event","pageIndex","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/pages/application/project-setting/project-info/project-info.component.ts"],"sourcesContent":["import {Component, OnInit} from \"@angular/core\";\nimport {ControlProjectsService} from \"../../../../core/services/control-projects.service\";\nimport {BoardService} from \"../../../../core/services/board.service\";\nimport {Router} from \"@angular/router\";\nimport {IProject} from \"../../../../core/interfaces/iproject\";\nimport {PageEvent} from \"@angular/material/paginator\";\nimport {SharedService} from \"../../../../core/services/shared.service\";\nimport {ProjectFacade} from \"../../../../facades/project-facade.service\";\n\nimport {DescriptionComponent} from \"./description.component\";\nimport {Observable} from \"rxjs\";\nimport {Store} from \"@ngrx/store\";\nimport {ProjectStateModule} from \"../../../../store\";\nimport {currentProject} from \"../../../../store/rxProject/project.selectors\";\n\n\n@Component({\n  selector: 'app-project-info',\n  templateUrl: 'project-info.component.html',\n  styleUrls: ['./project-info.component.scss']\n})\n\nexport class ProjectInfoComponent implements OnInit {\n\n  constructor(private projectsService: ControlProjectsService,\n              private boardService: BoardService,\n              private sharedService: SharedService,\n              private router: Router,\n              // private projectFacade: ProjectFacade,\n              private readonly store: Store<{project: ProjectStateModule}>,\n\n  ) {\n  }\n\n  projects: IProject[] = [];\n  projectsLength: number = 0;\n  pageSize: number = 10;\n  page: number = 1;\n\n  currentProject$: Observable <IProject | null > = this.store.select(currentProject)\n\n  /*  @Input('length') length!: number;\n    @Input('pageSize') pageSize!: number;\n    @Input('pageSizeOptions') pageSizeOptions!: number;*/\n// get project(): IProject {\n//   return this.projectFacade.getProject();\n//\n// }\n  ngOnInit() {\n    this.getProjects('DESC', this.page, this.pageSize);\n\n    this.projectsService.getAllProjects()\n      .subscribe(res => {\n        this.projectsLength = res.length;\n\n      })\n  }\n\n  getProjects(order: string, page: number, pageSize: number) {\n    this.projectsService.getProjects(order, page, pageSize).subscribe({\n      next: res => res.data.forEach((project: any) => {\n\n        this.projects.push(project);\n      }),\n      error: err => console.log(err),\n    })\n  }\n\n\n  settingsChanged(event: PageEvent) {\n    console.log(event)\n    this.page = event.pageIndex + 1;\n    this.pageSize = event.pageSize;\n\n    this.projects = [];\n    this.getProjects('DESC', this.page, this.pageSize);\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}