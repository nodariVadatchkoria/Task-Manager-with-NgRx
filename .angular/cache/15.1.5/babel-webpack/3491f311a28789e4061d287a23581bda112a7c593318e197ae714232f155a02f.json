{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { createProject, loadProjects, loadProjectsFailure, loadProjectsSuccess, loadProjectUsers, loadProjectUsersSuccess, setProject, setProjectSuccess, setProjectUsers, updateProject } from \"./project.actions\";\nimport { catchError, of, switchMap, map, tap, mergeMap, exhaustMap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../core/services/project.service\";\nimport * as i3 from \"@ngrx/store\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"../../facades/project-facade.service\";\nexport class ProjectEffects {\n  constructor(actions$, projectService, store, _snackBar, router, projectFacade) {\n    this.actions$ = actions$;\n    this.projectService = projectService;\n    this.store = store;\n    this._snackBar = _snackBar;\n    this.router = router;\n    this.projectFacade = projectFacade;\n    this.loadProjects$ = createEffect(() => this.actions$.pipe(ofType(loadProjects), mergeMap(() => this.projectService.getMyProjects().pipe(map(projects => loadProjectsSuccess({\n      projects\n    })), catchError(error => of(loadProjectsFailure({\n      error\n    })))))));\n    // setProject$ = createEffect(() => this.actions$.pipe(\n    //     ofType(setProject),\n    //     mergeMap((action) => this.projectService.getProjectById(action.projectId).pipe(\n    //         map((res) => setProjectSuccess({project: res})),\n    //         catchError((error) => of(loadProjectsFailure({error})))\n    //     ))\n    // ))\n    this.setProject$ = createEffect(() => this.actions$.pipe(ofType(setProject), mergeMap(action => this.projectFacade.setProjectId().pipe(map(res => setProjectSuccess({\n      project: res\n    })), catchError(error => of(loadProjectsFailure({\n      error\n    })))))));\n    this.setProjectSuccess$ = createEffect(() => this.actions$.pipe(ofType(setProjectSuccess), map(action => {\n      localStorage.setItem('project', JSON.stringify(action.project));\n    })), {\n      dispatch: false\n    });\n    this.createProject$ = createEffect(() => this.actions$.pipe(ofType(createProject), mergeMap(action => this.projectService.createProject(action.project).pipe(tap(res => setProject({\n      projectId: res.id\n    })), map(res => {\n      this._snackBar.open('Project created', 'Close', {\n        duration: 2000\n      });\n      this.router.navigate(['/application/setting/info']).then();\n      return setProject({\n        projectId: res.id\n      });\n    }), catchError(error => of(loadProjectsFailure({\n      error\n    })))))));\n    this.updateProject$ = createEffect(() => this.actions$.pipe(ofType(updateProject), switchMap(action => this.projectService.updateProject(action.project).pipe(tap(res => loadProjects()), map(res => {\n      this._snackBar.open('Project updated', 'Close', {\n        duration: 2000\n      });\n      this.router.navigate(['/application/setting/info']).then();\n      return setProject({\n        projectId: res.id\n      });\n    }), catchError(error => of(loadProjectsFailure({\n      error\n    })))))));\n    this.loadProjectUsers$ = createEffect(() => this.actions$.pipe(ofType(loadProjectUsers), exhaustMap(action => this.projectService.getProjectUsers().pipe(map(data => loadProjectUsersSuccess({\n      users: data\n    })), catchError(error => of(loadProjectsFailure({\n      error\n    })))))));\n    this.setProjectUsers$ = createEffect(() => this.actions$.pipe(ofType(setProjectUsers), exhaustMap(action => this.projectService.addProjectUserData(action).pipe(\n    // map((data) => loadProjectUsers()),\n    catchError(error => of(loadProjectsFailure({\n      error\n    })))))));\n  }\n}\nProjectEffects.ɵfac = function ProjectEffects_Factory(t) {\n  return new (t || ProjectEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ProjectService), i0.ɵɵinject(i3.Store), i0.ɵɵinject(i4.MatSnackBar), i0.ɵɵinject(i5.Router), i0.ɵɵinject(i6.ProjectFacade));\n};\nProjectEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProjectEffects,\n  factory: ProjectEffects.ɵfac\n});","map":{"version":3,"mappings":"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","names":["createEffect","ofType","createProject","loadProjects","loadProjectsFailure","loadProjectsSuccess","loadProjectUsers","loadProjectUsersSuccess","setProject","setProjectSuccess","setProjectUsers","updateProject","catchError","of","switchMap","map","tap","mergeMap","exhaustMap","ProjectEffects","constructor","actions$","projectService","store","_snackBar","router","projectFacade","pipe","getMyProjects","projects","error","action","setProjectId","res","project","localStorage","setItem","JSON","stringify","dispatch","projectId","id","open","duration","navigate","then","getProjectUsers","data","users","addProjectUserData","factory"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/store/rxProject/project.effect.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Actions, createEffect, ofType} from \"@ngrx/effects\";\nimport {ProjectService} from \"../../core/services/project.service\";\nimport {\n    createProject,\n    initCurrentProject,\n    loadProjects,\n    loadProjectsFailure,\n    loadProjectsSuccess,\n    loadProjectUsers,\n    loadProjectUsersSuccess,\n    setProject,\n    setProjectSuccess, setProjectUsers,\n    updateProject\n} from \"./project.actions\";\nimport {catchError, of, switchMap, map, tap, mergeMap, exhaustMap} from \"rxjs\";\nimport {Store} from \"@ngrx/store\";\nimport {ProjectStateModule} from \"./project.reducer\";\nimport {state} from \"@angular/animations\";\n\nimport {IProject} from \"../../core/interfaces/iproject\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {Router} from \"@angular/router\";\nimport {ProjectFacade} from \"../../facades/project-facade.service\";\nimport {BaseService} from \"../../core/services\";\n\n\n@Injectable()\nexport class ProjectEffects {\n    constructor(\n        private actions$: Actions,\n        private projectService: ProjectService,\n        private store: Store,\n        private _snackBar: MatSnackBar,\n        private router: Router,\n        private projectFacade: ProjectFacade\n\n    ) {\n    }\n\n    loadProjects$ = createEffect(() => this.actions$.pipe(\n        ofType(loadProjects),\n        mergeMap(() => this.projectService.getMyProjects().pipe(\n            map((projects) => loadProjectsSuccess({projects})),\n            catchError((error) => of(loadProjectsFailure({error})))\n        ))\n    ))\n\n    // setProject$ = createEffect(() => this.actions$.pipe(\n    //     ofType(setProject),\n    //     mergeMap((action) => this.projectService.getProjectById(action.projectId).pipe(\n    //         map((res) => setProjectSuccess({project: res})),\n    //         catchError((error) => of(loadProjectsFailure({error})))\n    //     ))\n    // ))\n    setProject$ = createEffect(() => this.actions$.pipe(\n        ofType(setProject),\n        mergeMap((action) => this.projectFacade.setProjectId().pipe(\n            map((res) => setProjectSuccess({project: res})),\n            catchError((error) => of(loadProjectsFailure({error})))\n        ))\n    ))\n\n    setProjectSuccess$ = createEffect(() => this.actions$.pipe(\n        ofType(setProjectSuccess),\n    map((action) => {\n        localStorage.setItem('project', JSON.stringify(action.project));\n    })\n    ), {dispatch: false});\n\n createProject$ = createEffect(() => this.actions$.pipe(\n        ofType(createProject),\n        mergeMap((action) => this.projectService.createProject(action.project).pipe(\n            tap((res: IProject) => setProject({projectId: res.id})),\n            map((res: IProject) => {\n                this._snackBar.open('Project created', 'Close', {\n                        duration: 2000,\n                    })\n                this.router.navigate(['/application/setting/info']).then()\n\n\n              return  setProject({projectId: res.id})\n            }),\n            catchError((error) => of(loadProjectsFailure({error})))\n        ))\n    ))\n\n    updateProject$ = createEffect(() => this.actions$.pipe(\n        ofType(updateProject),\n        switchMap((action) => this.projectService.updateProject(action.project).pipe(\n            tap((res: IProject) => loadProjects()),\n            map((res: IProject) => {\n                this._snackBar.open('Project updated', 'Close', {\n                    duration: 2000,\n                })\n                this.router.navigate(['/application/setting/info']).then()\n\n\n                return  setProject({projectId: res.id})\n            }),\n            catchError((error) => of(loadProjectsFailure({error})))\n        ))\n    ))\n\n    loadProjectUsers$ = createEffect(() => this.actions$.pipe(\n        ofType(loadProjectUsers),\n        exhaustMap((action) => this.projectService.getProjectUsers().pipe(\n            map((data) => loadProjectUsersSuccess({users: data})),\n            catchError((error) => of(loadProjectsFailure({error})))\n        ))\n    ))\n\n    setProjectUsers$ = createEffect(() => this.actions$.pipe(\n        ofType(setProjectUsers),\n        exhaustMap((action) => this.projectService.addProjectUserData(action).pipe(\n            // map((data) => loadProjectUsers()),\n            catchError((error) => of(loadProjectsFailure({error})))\n        ))\n    ))\n\n\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}