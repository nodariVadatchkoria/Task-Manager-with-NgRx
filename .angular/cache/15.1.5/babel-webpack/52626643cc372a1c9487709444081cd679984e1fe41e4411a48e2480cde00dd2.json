{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../../core/services/board.service\";\nimport * as i3 from \"../../../core/services/project.service\";\nimport * as i4 from \"../../../facades/project-facade.service\";\nimport * as i5 from \"@angular/common\";\nconst _c0 = function (a1) {\n  return [\"/main/board\", a1];\n};\nfunction BoardsComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 4)(2, \"div\", 5)(3, \"p\", 6);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\", 7);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const board_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(3, _c0, board_r1.id));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(board_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(board_r1.description);\n  }\n}\nexport class BoardsComponent {\n  constructor(route, boardService, projectService, projectFacade) {\n    this.route = route;\n    this.boardService = boardService;\n    this.projectService = projectService;\n    this.projectFacade = projectFacade;\n    this.boards = [];\n  }\n  ngOnInit() {\n    this.route.data.subscribe(({\n      projects\n    }) => {\n      console.log(projects);\n      if (projects['id']) {\n        this.boardService.getBoards(projects['id']).subscribe({\n          next: res => {\n            this.boards = res;\n          }\n        });\n      }\n    });\n  }\n}\nBoardsComponent.ɵfac = function BoardsComponent_Factory(t) {\n  return new (t || BoardsComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.BoardService), i0.ɵɵdirectiveInject(i3.ProjectService), i0.ɵɵdirectiveInject(i4.ProjectFacade));\n};\nBoardsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BoardsComponent,\n  selectors: [[\"app-boards\"]],\n  decls: 4,\n  vars: 1,\n  consts: [[1, \"container\"], [1, \"board-container\"], [1, \"brd-container\", \"grid\"], [4, \"ngFor\", \"ngForOf\"], [1, \"inner-container\", 3, \"routerLink\"], [1, \"board\"], [1, \"board-title\"], [1, \"desc\"]],\n  template: function BoardsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵtemplate(3, BoardsComponent_div_3_Template, 7, 5, \"div\", 3);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.boards);\n    }\n  },\n  dependencies: [i5.NgForOf, i1.RouterLink],\n  styles: [\".inner-container[_ngcontent-%COMP%] {\\n  border-radius: 5px;\\n  cursor: pointer;\\n  background-image: linear-gradient(to right, #1a1a59, #1cb5e0);\\n  width: 300px;\\n  height: 160px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  margin-bottom: 20px;\\n}\\n\\n.container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.inner-container[_ngcontent-%COMP%]:hover {\\n  background-image: linear-gradient(to right, #1a1a59, #0e5b70);\\n}\\n\\n.inner-container[_ngcontent-%COMP%]:hover {\\n  background-color: #dbd8d8;\\n}\\n\\n.container[_ngcontent-%COMP%] {\\n  margin-left: 25%;\\n  margin-top: 5%;\\n}\\n\\n.grid[_ngcontent-%COMP%] {\\n  display: grid;\\n  grid-template-columns: 1fr 1fr 1fr;\\n  gap: 50px;\\n}\\n\\n.board-title[_ngcontent-%COMP%] {\\n  font-size: 1.2rem;\\n}\\n\\n.desc[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvbWFpbi1sYXlvdXQvYm9hcmRzL2JvYXJkcy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFBO0VBQ0EsZUFBQTtFQUNBLDZEQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSx1QkFBQTtFQUVBLG1CQUFBO0FBQUY7O0FBSUE7RUFFRSxhQUFBO0VBQ0Esc0JBQUE7QUFGRjs7QUFLQTtFQUNFLDZEQUFBO0FBRkY7O0FBS0E7RUFDRSx5QkFBQTtBQUZGOztBQUtBO0VBQ0UsZ0JBQUE7RUFDQSxjQUFBO0FBRkY7O0FBTUE7RUFDRSxhQUFBO0VBQ0Esa0NBQUE7RUFDQSxTQUFBO0FBSEY7O0FBUUE7RUFDRSxpQkFBQTtBQUxGOztBQVFBO0VBQ0UsZUFBQTtBQUxGIiwic291cmNlc0NvbnRlbnQiOlsiLmlubmVyLWNvbnRhaW5lciB7XG4gIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICMxYTFhNTksICMxY2I1ZTApO1xuICB3aWR0aDogMzAwcHg7XG4gIGhlaWdodDogMTYwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG5cbn1cblxuLmNvbnRhaW5lciB7XG5cbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuLmlubmVyLWNvbnRhaW5lcjpob3ZlciB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgIzFhMWE1OSwgIzBlNWI3MCk7XG59XG5cbi5pbm5lci1jb250YWluZXI6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGJkOGQ4O1xufVxuXG4uY29udGFpbmVyIHtcbiAgbWFyZ2luLWxlZnQ6IDI1JTtcbiAgbWFyZ2luLXRvcDogNSU7XG5cbn1cblxuLmdyaWQge1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnIgMWZyO1xuICBnYXA6IDUwcHg7XG59XG5cblxuXG4uYm9hcmQtdGl0bGUge1xuICBmb250LXNpemU6IDEuMnJlbTtcbn1cblxuLmRlc2Mge1xuICBmb250LXNpemU6IDFyZW07XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":";;;;;;;;;;;IAKMA,2BAAkC;IAGLA,YAAc;IAAAA,iBAAI;IACzCA,4BAAgB;IAAAA,YAAqB;IAAAA,iBAAI;;;;IAHhBA,eAAwC;IAAxCA,oEAAwC;IAE1CA,eAAc;IAAdA,mCAAc;IACrBA,eAAqB;IAArBA,0CAAqB;;;ACMjD,OAAM,MAAOC,eAAe;EAK1BC,YACoBC,KAAqB,EACrBC,YAA0B,EAC1BC,cAA8B,EAC9BC,aAA4B;IAH5B,UAAK,GAALH,KAAK;IACL,iBAAY,GAAZC,YAAY;IACZ,mBAAc,GAAdC,cAAc;IACd,kBAAa,GAAbC,aAAa;IAPjC,WAAM,GAAa,EAAE;EAQP;EAEdC,QAAQ;IACN,IAAI,CAACJ,KAAK,CAACK,IAAI,CAACC,SAAS,CAAC,CAAC;MAACC;IAAQ,CAAC,KAAI;MACvCC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MAErB,IAAGA,QAAQ,CAAC,IAAI,CAAC,EAAE;QACjB,IAAI,CAACN,YAAY,CAACS,SAAS,CAACH,QAAQ,CAAC,IAAI,CAAC,CAAC,CAACD,SAAS,CAAC;UACpDK,IAAI,EAAEC,GAAG,IAAG;YACV,IAAI,CAACC,MAAM,GAAGD,GAAG;UACnB;SACD,CAAC;;IAEN,CAAC,CAAC;EACJ;;AAxBWd,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;QAAfA,eAAe;EAAAgB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDb5BrB,8BAAuB;MAGjBA,gEAOM;MACRA,iBAAM;;;MARmBA,eAAS;MAATA,oCAAS","names":["i0","BoardsComponent","constructor","route","boardService","projectService","projectFacade","ngOnInit","data","subscribe","projects","console","log","getBoards","next","res","boards","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/pages/main-layout/boards/boards.component.html","/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/pages/main-layout/boards/boards.component.ts"],"sourcesContent":["<!--<p *ngFor=\"let board of boards\">{{board.name}}</p>-->\n\n<div class=\"container\">\n  <div class=\"board-container\">\n    <div class=\"brd-container grid\">\n      <div *ngFor=\"let board of boards\">\n        <div class=\"inner-container\" [routerLink]=\"['/main/board', board.id]\">\n          <div class=\"board\">\n            <p class=\"board-title\">{{board.name}}</p>\n            <p class=\"desc\">{{board.description}}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import {AfterViewInit, Component, OnInit, ViewChild} from '@angular/core';\nimport { MatDrawer } from '@angular/material/sidenav';\nimport { DrawerService } from '../../../core/services/drawer.service';\nimport {BoardService} from \"../../../core/services/board.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {IBoard} from \"../../../core/interfaces\";\nimport {Observable} from \"rxjs\";\nimport {ProjectService} from \"../../../core/services/project.service\";\nimport {ProjectFacade} from \"../../../facades/project-facade.service\";\n\n@Component({\n  selector: 'app-boards',\n  templateUrl: './boards.component.html',\n  styleUrls: ['./boards.component.scss'],\n})\nexport class BoardsComponent implements OnInit{\n\n  boards: IBoard[] = [];\n\n\n  constructor(\n              private route: ActivatedRoute,\n              private boardService: BoardService,\n              private projectService: ProjectService,\n              private projectFacade: ProjectFacade,\n             ) {}\n\n  ngOnInit(): void {\n    this.route.data.subscribe(({projects}) => {\n      console.log(projects);\n\n      if(projects['id']) {\n        this.boardService.getBoards(projects['id']).subscribe({\n          next: res => {\n            this.boards = res;\n          },\n        })\n      }\n    })\n  }\n  }\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}