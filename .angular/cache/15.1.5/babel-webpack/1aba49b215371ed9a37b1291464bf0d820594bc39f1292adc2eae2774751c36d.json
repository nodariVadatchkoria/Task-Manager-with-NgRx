{"ast":null,"code":"import { BehaviorSubject, tap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../core/services/project.service\";\nexport class ProjectFacade {\n  constructor(projectService) {\n    this.projectService = projectService;\n    this.myProjects = new BehaviorSubject([]);\n    this.myProjects$ = this.myProjects.asObservable();\n  }\n  setProject(project) {\n    if (project) {\n      localStorage.setItem('project', JSON.stringify(project));\n    }\n  }\n  getMyProjects$() {\n    return this.projectService.getAllProjects().pipe(tap(projects => this.myProjects.next(projects)));\n  }\n  getProject() {\n    const project = localStorage.getItem('project');\n    return project ? JSON.parse(project) : null;\n  }\n  setProjectId(projectId) {\n    this.projectService.getProjectById(projectId).subscribe(project => {\n      localStorage.setItem('project', JSON.stringify(project));\n    });\n  }\n  getProjectId() {\n    const project = localStorage.getItem('project');\n    return project ? JSON.parse(project).id : null;\n  }\n}\nProjectFacade.ɵfac = function ProjectFacade_Factory(t) {\n  return new (t || ProjectFacade)(i0.ɵɵinject(i1.ProjectService));\n};\nProjectFacade.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProjectFacade,\n  factory: ProjectFacade.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}