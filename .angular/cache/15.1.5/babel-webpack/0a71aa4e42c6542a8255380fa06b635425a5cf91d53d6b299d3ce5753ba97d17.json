{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { createProject, loadProjects, loadProjectsFailure, loadProjectsSuccess, setProject, setProjectSuccess } from \"./project.actions\";\nimport { catchError, of, switchMap, map, tap, mergeMap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../core/services/project.service\";\nimport * as i3 from \"@ngrx/store\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/router\";\nexport class ProjectEffects {\n  constructor(actions$, projectService, store, _snackBar, router) {\n    this.actions$ = actions$;\n    this.projectService = projectService;\n    this.store = store;\n    this._snackBar = _snackBar;\n    this.router = router;\n    this.loadProjects$ = createEffect(() => this.actions$.pipe(ofType(loadProjects), switchMap(() => this.projectService.getMyProjects().pipe(map(data => loadProjectsSuccess({\n      data\n    })), catchError(error => of(loadProjectsFailure({\n      error\n    })))))));\n    this.setProject$ = createEffect(() => this.actions$.pipe(ofType(setProject), switchMap(action => this.projectService.getProjectById(action.projectId).pipe(map(data => setProjectSuccess({\n      data\n    })), catchError(error => of(loadProjectsFailure({\n      error\n    })))))));\n    this.setProjectSuccess$ = createEffect(() => this.actions$.pipe(ofType(setProjectSuccess), map(action => {\n      localStorage.setItem('project', JSON.stringify(action.data));\n    })), {\n      dispatch: false\n    });\n    this.createProject$ = createEffect(() => this.actions$.pipe(ofType(createProject), mergeMap(action => this.projectService.createProject(action.project).pipe(tap(res => setProject({\n      projectId: res.id\n    })), map(res => {\n      this._snackBar.open('Project created', 'Close', {\n        duration: 2000\n      });\n      this.router.navigate(['/application/setting/info']).then();\n      return setProject({\n        projectId: res.id\n      });\n    }), catchError(error => of(loadProjectsFailure({\n      error\n    })))))));\n    this.updateProject$ = createEffect(() => this.actions$.pipe(ofType(createProject), switchMap(action => this.projectService.updateProject(action.project).pipe(tap(res => loadProjects()), map(res => {\n      this._snackBar.open('Project updated', 'Close', {\n        duration: 2000\n      });\n      this.router.navigate(['/application/setting/info']).then();\n      return setProject({\n        projectId: res.id\n      });\n    }), catchError(error => of(loadProjectsFailure({\n      error\n    })))))));\n  }\n}\nProjectEffects.ɵfac = function ProjectEffects_Factory(t) {\n  return new (t || ProjectEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ProjectService), i0.ɵɵinject(i3.Store), i0.ɵɵinject(i4.MatSnackBar), i0.ɵɵinject(i5.Router));\n};\nProjectEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProjectEffects,\n  factory: ProjectEffects.ɵfac\n});","map":{"version":3,"mappings":"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","names":["createEffect","ofType","createProject","loadProjects","loadProjectsFailure","loadProjectsSuccess","setProject","setProjectSuccess","catchError","of","switchMap","map","tap","mergeMap","ProjectEffects","constructor","actions$","projectService","store","_snackBar","router","pipe","getMyProjects","data","error","action","getProjectById","projectId","localStorage","setItem","JSON","stringify","dispatch","project","res","id","open","duration","navigate","then","updateProject","factory"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/store/rxProject/project.effect.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Actions, createEffect, ofType} from \"@ngrx/effects\";\nimport {ProjectService} from \"../../core/services/project.service\";\nimport {\n    createProject,\n    initCurrentProject, loadProjects, loadProjectsFailure, loadProjectsSuccess, setProject,\n    setProjectSuccess\n} from \"./project.actions\";\nimport {catchError, of, switchMap, map, tap, mergeMap} from \"rxjs\";\nimport {Store} from \"@ngrx/store\";\nimport {ProjectStateModule} from \"./project.reducer\";\nimport {state} from \"@angular/animations\";\n\nimport {IProject} from \"../../core/interfaces/iproject\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {Router} from \"@angular/router\";\n\n\n@Injectable()\nexport class ProjectEffects{\n    constructor(\n        private actions$: Actions,\n        private projectService: ProjectService,\n        private store: Store,\n        private _snackBar: MatSnackBar,\n        private router: Router,\n\n    ) {\n    }\n\n    loadProjects$ = createEffect(() => this.actions$.pipe(\n        ofType(loadProjects),\n        switchMap(() => this.projectService.getMyProjects().pipe(\n            map((data) => loadProjectsSuccess({data})),\n            catchError((error) => of(loadProjectsFailure({error})))\n        ))\n    ))\n\n    setProject$ = createEffect(() => this.actions$.pipe(\n        ofType(setProject),\n        switchMap((action) => this.projectService.getProjectById(action.projectId).pipe(\n            map((data) => setProjectSuccess({data})),\n            catchError((error) => of(loadProjectsFailure({error})))\n        ))\n    ))\n\n    setProjectSuccess$ = createEffect(() => this.actions$.pipe(\n        ofType(setProjectSuccess),\n    map((action) => {\n        localStorage.setItem('project', JSON.stringify(action.data));\n    })\n    ), {dispatch: false});\n\n createProject$ = createEffect(() => this.actions$.pipe(\n        ofType(createProject),\n        mergeMap((action) => this.projectService.createProject(action.project).pipe(\n            tap((res: IProject) => setProject({projectId: res.id})),\n            map((res: IProject) => {\n                this._snackBar.open('Project created', 'Close', {\n                        duration: 2000,\n                    })\n                this.router.navigate(['/application/setting/info']).then()\n\n\n              return  setProject({projectId: res.id})\n            }),\n            catchError((error) => of(loadProjectsFailure({error})))\n        ))\n    ))\n\n    updateProject$ = createEffect(() => this.actions$.pipe(\n        ofType(createProject),\n        switchMap((action) => this.projectService.updateProject(action.project).pipe(\n            tap((res: IProject) => loadProjects()),\n            map((res: IProject) => {\n                this._snackBar.open('Project updated', 'Close', {\n                    duration: 2000,\n                })\n                this.router.navigate(['/application/setting/info']).then()\n\n\n                return  setProject({projectId: res.id})\n            }),\n            catchError((error) => of(loadProjectsFailure({error})))\n        ))\n    ))\n\n\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}