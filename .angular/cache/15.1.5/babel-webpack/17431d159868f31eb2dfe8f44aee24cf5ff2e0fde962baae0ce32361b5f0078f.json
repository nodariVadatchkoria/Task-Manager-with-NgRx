{"ast":null,"code":"import { BehaviorSubject, catchError, filter, finalize, of, switchMap, take } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services\";\nimport * as i2 from \"../services/cookie.service\";\nexport class AuthInterceptor {\n  static addTokenRequest(request, token) {\n    if (token) {\n      return request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return request;\n  }\n  constructor(authService, cookieService) {\n    this.authService = authService;\n    this.cookieService = cookieService;\n    this.isRefreshingToken = false;\n    this.tokenSubject = new BehaviorSubject(null);\n  }\n  intercept(request, next) {\n    const accessToken = this.cookieService.getCookie('token'); //accesTokenit ar inaxavdi cookieshi magitom ar atanda tokens\n    if (accessToken) {\n      request = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${accessToken}`)\n      });\n    }\n    return next.handle(request).pipe(catchError(err => {\n      switch (err.status) {\n        case 401:\n          return this.handle401Error(request, next);\n      }\n      const error = err.error.message || err.statusText;\n      return error;\n    }));\n  }\n  handle401Error(request, next) {\n    if (!this.isRefreshingToken) {\n      this.isRefreshingToken = true;\n      this.tokenSubject.next(null);\n      return this.authService.refreshToken(this.authService.getRefreshToken() || '').pipe(switchMap(token => {\n        if (token) {\n          this.tokenSubject.next(token.accessToken);\n          return next.handle(AuthInterceptor.addTokenRequest(request, token.accessToken));\n        }\n        this.authService.logout();\n        return of(false);\n      }), catchError(err => {\n        this.authService.logout();\n        return of(false);\n      }), finalize(() => {\n        this.isRefreshingToken = false;\n      }));\n    } else {\n      return this.tokenSubject.pipe(filter(token => token != null), take(1), switchMap(token => {\n        return next.handle(AuthInterceptor.addTokenRequest(request, token));\n      }), catchError(err => {\n        this.authService.logout();\n        return of(false);\n      }));\n    }\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.CookieService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}