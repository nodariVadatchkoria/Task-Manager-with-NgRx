{"ast":null,"code":"import { inject } from '@angular/core';\nimport { tap } from \"rxjs\";\nimport { BaseService } from \"./base.service\";\nimport { CookieService } from \"./cookie.service\";\nimport * as i0 from \"@angular/core\";\nexport class AuthService extends BaseService {\n  constructor() {\n    super(...arguments);\n    this.cookieService = inject(CookieService);\n  }\n  // get token(): string | null {\n  //   return localStorage.getItem('token');\n  // }\n  // get user(): User | null {\n  //   const user = localStorage.getItem('user');\n  //   return user ? JSON.parse(user) : null;\n  // }\n  login(payload) {\n    return this.post('auth/login', payload).pipe(tap(response => {\n      this.setToken(response.token.accessToken);\n      this.setUser(response.user);\n      this.setRefreshToken(response.token.refreshToken);\n      this.setUserInCookie(response.user, response);\n      this.setUserRoles(response.user.roles);\n      this.setUserPermissions(response.user.roles.map(role => role.permissions).flat());\n    }));\n  }\n  register(payload) {\n    return this.post('auth/signup', payload);\n  }\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n  setRefreshToken(refreshToken) {\n    localStorage.setItem('refreshToken', refreshToken);\n  }\n  setUser(user) {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n  setUserRoles(roles) {\n    localStorage.setItem('roles', JSON.stringify(roles));\n  }\n  setUserPermissions(permissions) {\n    localStorage.setItem('permissions', JSON.stringify(permissions));\n  }\n  setUserInCookie(user, Response) {\n    const expiereTime = 24 * 60 * 60 * 1000;\n    const cookieExpire = new Date(Date.now() + expiereTime);\n    this.cookieService.setCookie('user', JSON.stringify(user), cookieExpire);\n    this.cookieService.setCookie('token', Response.token.accessToken, cookieExpire);\n    this.cookieService.setCookie('refreshToken', Response.token.refreshToken, cookieExpire);\n  }\n  getUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n  logout() {\n    localStorage.clear();\n  }\n  signOut() {\n    return this.post('auth/signout', {});\n  }\n  refreshToken(refreshToken) {\n    return this.post('auth/token', {\n      refreshToken\n    });\n  }\n  getRefreshToken() {\n    return localStorage.getItem('refreshToken');\n  }\n  checkEmail(email) {\n    return this.post('auth/checkEmail', {\n      email\n    });\n  }\n  login2(payload) {\n    return this.post('auth/login', payload).pipe(tap(response => {\n      const expiereTime = 24 * 60 * 60 * 1000;\n      const cookieExpire = new Date(Date.now() + expiereTime);\n      this.cookieService.setCookie('token', response.token.accessToken, cookieExpire);\n      this.cookieService.setCookie('refreshToken', response.token.refreshToken, cookieExpire);\n      this.setUser(response.user);\n    }));\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n}\nAuthService.ɵfac = /*@__PURE__*/function () {\n  let ɵAuthService_BaseFactory;\n  return function AuthService_Factory(t) {\n    return (ɵAuthService_BaseFactory || (ɵAuthService_BaseFactory = i0.ɵɵgetInheritedFactory(AuthService)))(t || AuthService);\n  };\n}();\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["inject","tap","BaseService","CookieService","AuthService","constructor","login","payload","post","pipe","response","setToken","token","accessToken","setUser","user","setRefreshToken","refreshToken","setUserInCookie","setUserRoles","roles","setUserPermissions","map","role","permissions","flat","register","localStorage","setItem","JSON","stringify","Response","expiereTime","cookieExpire","Date","now","cookieService","setCookie","getUser","parse","getItem","logout","clear","signOut","getRefreshToken","checkEmail","email","login2","getToken","isAuthenticated","factory","providedIn"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/core/services/auth.service.ts"],"sourcesContent":["import {inject, Injectable} from '@angular/core';\nimport {Observable, tap} from \"rxjs\";\nimport {Login, LoginResponse, Register, User} from \"../interfaces\";\nimport {BaseService} from \"./base.service\";\nimport * as http from \"http\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {CookieService} from \"./cookie.service\";\nimport {IRole} from \"../interfaces/role\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService extends BaseService {\n  cookieService: CookieService = inject(CookieService);\n\n  // get token(): string | null {\n  //   return localStorage.getItem('token');\n  // }\n  // get user(): User | null {\n  //   const user = localStorage.getItem('user');\n  //   return user ? JSON.parse(user) : null;\n  // }\n\n  login(payload: Login): Observable<LoginResponse> {\n    return this.post<LoginResponse>('auth/login', payload)\n      .pipe(\n        tap((response: LoginResponse) => {\n            this.setToken(response.token.accessToken);\n            this.setUser(response.user);\n            this.setRefreshToken(response.token.refreshToken)\n            this.setUserInCookie(response.user, response);\n            this.setUserRoles(response.user.roles);\n            this.setUserPermissions(response.user.roles.map((role: IRole) => role.permissions).flat());\n\n          }\n        )\n      )\n  }\n\n  register(payload: Register): Observable<User> {\n    return this.post<User>('auth/signup', payload);\n  }\n\n\n  setToken(token: string) {\n    localStorage.setItem('token', token);\n  }\n\n  setRefreshToken(refreshToken: string ) {\n    localStorage.setItem('refreshToken', refreshToken)\n  }\n\n  setUser(user: User) {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\nsetUserRoles(roles: IRole[]) {\n    localStorage.setItem('roles', JSON.stringify(roles));\n  }\n  setUserPermissions(permissions: string[]) {\n    localStorage.setItem('permissions', JSON.stringify(permissions));\n  }\n  setUserInCookie(user: User, Response: LoginResponse) {\n    const expiereTime = 24 * 60 * 60 * 1000;\n    const cookieExpire: any = new Date(Date.now() + expiereTime);\n    this.cookieService.setCookie('user', JSON.stringify(user), cookieExpire);\n    this.cookieService.setCookie('token', Response.token.accessToken, cookieExpire);\n    this.cookieService.setCookie('refreshToken', Response.token.refreshToken, cookieExpire);\n  }\n\n  getUser() {\n    return JSON.parse(localStorage.getItem('user')!)\n  }\n\n  logout() {\n    localStorage.clear();\n  }\n\n  signOut() {\n    return this.post('auth/signout', {});\n  }\n\n  refreshToken(refreshToken: string): Observable<LoginResponse> {\n    return this.post<LoginResponse>('auth/token', {refreshToken});\n  }\n\n  getRefreshToken(): string | null {\n    return localStorage.getItem('refreshToken');\n  }\n\n  checkEmail(email: string): Observable<any> {\n    return this.post('auth/checkEmail', {email});\n  }\n\n  login2(payload: Login): Observable<LoginResponse> {\n    return this.post<LoginResponse>('auth/login', payload)\n      .pipe(\n        tap((response: LoginResponse) => {\n            const expiereTime = 24 * 60 * 60 * 1000;\n            const cookieExpire: any = new Date(Date.now() + expiereTime);\n\n\n            this.cookieService.setCookie('token', response.token.accessToken, cookieExpire);\n            this.cookieService.setCookie('refreshToken', response.token.refreshToken, cookieExpire);\n            this.setUser(response.user);\n          }\n        )\n      )\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}