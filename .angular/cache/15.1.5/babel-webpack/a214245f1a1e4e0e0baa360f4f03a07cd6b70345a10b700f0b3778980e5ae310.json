{"ast":null,"code":"import { switchMap } from 'rxjs';\nimport { currentProject } from \"../../store/rxProject/project.selectors\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport class ProjectInterceptor {\n  constructor(store) {\n    this.store = store;\n  }\n  intercept(request, next) {\n    return this.store.select(currentProject).pipe(switchMap(project => {\n      if (project) {\n        setTimeout(() => {\n          request = request.clone({\n            setHeaders: {\n              project: String(project.id)\n            }\n          });\n        }, 10000);\n      }\n      // const project = this.projectFacade.getProject();\n      //\n      //\n      // if (project) {\n      //     return next.handle(\n      //         request.clone({\n      //             setHeaders: {project: String(project.id)}\n      //         })\n      //     );\n      // }\n      return next.handle(request);\n    }));\n  }\n}\nProjectInterceptor.ɵfac = function ProjectInterceptor_Factory(t) {\n  return new (t || ProjectInterceptor)(i0.ɵɵinject(i1.Store));\n};\nProjectInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProjectInterceptor,\n  factory: ProjectInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAOA,SAAoBA,SAAS,QAAO,MAAM;AAG1C,SAAQC,cAAc,QAAO,yCAAyC;;;AAGtE,OAAM,MAAOC,kBAAkB;EAC3BC,YACYC,KAA6C;IAA7C,UAAK,GAALA,KAAK;EAEjB;EAEAC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACtD,OAAO,IAAI,CAACH,KAAK,CAACI,MAAM,CAACP,cAAc,CAAC,CACnCQ,IAAI,CACDT,SAAS,CAAEU,OAAO,IAAI;MACd,IAAIA,OAAO,EAAE;QACTC,UAAU,CAAC,MAAK;UACZL,OAAO,GAAGA,OAAO,CAACM,KAAK,CAAC;YACpBC,UAAU,EAAE;cACRH,OAAO,EAAEI,MAAM,CAACJ,OAAO,CAACK,EAAE;;WAEjC,CAAC;QAEN,CAAC,EAAE,KAAK,CAAC;;MAGb;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA,OAAOR,IAAI,CAACS,MAAM,CAACV,OAAO,CAAC;IAC/B,CAAC,CACJ,CACJ;EACT;;AApCSJ,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAe,SAAlBf,kBAAkB;AAAA","names":["switchMap","currentProject","ProjectInterceptor","constructor","store","intercept","request","next","select","pipe","project","setTimeout","clone","setHeaders","String","id","handle","factory"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/core/interceptors/project.interceptor.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {\n    HttpRequest,\n    HttpHandler,\n    HttpEvent,\n    HttpInterceptor,\n} from '@angular/common/http';\nimport {Observable, switchMap} from 'rxjs';\nimport {Store} from \"@ngrx/store\";\nimport {ProjectStateModule} from \"../../store\";\nimport {currentProject} from \"../../store/rxProject/project.selectors\";\n\n@Injectable()\nexport class ProjectInterceptor implements HttpInterceptor {\n    constructor(\n        private store: Store<{ project: ProjectStateModule }>,\n    ) {\n    }\n\n    intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n        return this.store.select(currentProject)\n            .pipe(\n                switchMap((project) => {\n                        if (project) {\n                            setTimeout(() => {\n                                request = request.clone({\n                                    setHeaders: {\n                                        project: String(project.id)\n                                    }\n                                })\n\n                            }, 10000)\n\n                        }\n                        // const project = this.projectFacade.getProject();\n                        //\n                        //\n                        // if (project) {\n                        //     return next.handle(\n                        //         request.clone({\n                        //             setHeaders: {project: String(project.id)}\n                        //         })\n                        //     );\n                        // }\n\n                        return next.handle(request);\n                    }\n                )\n            )\n    };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}