{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../facades/auth.service\";\nexport class PermissionsDirective {\n  constructor(authFacade, elementRef) {\n    this.authFacade = authFacade;\n    this.elementRef = elementRef;\n    this.appPermissions = [];\n  }\n  hasPermission() {\n    const userPermissions = this.authFacade.permissions;\n    return userPermissions.some(permission => this.appPermissions.includes(permission));\n  }\n  ngAfterViewInit() {\n    if (!this.hasPermission()) {\n      this.elementRef.nativeElement.remove();\n    }\n  }\n}\nPermissionsDirective.ɵfac = function PermissionsDirective_Factory(t) {\n  return new (t || PermissionsDirective)(i0.ɵɵdirectiveInject(i1.AuthFacade), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nPermissionsDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: PermissionsDirective,\n  selectors: [[\"\", \"appPermissions\", \"\"]],\n  inputs: {\n    appPermissions: \"appPermissions\"\n  },\n  standalone: true\n});","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,oBAAoB;EAI/BC,YACUC,UAAsB,EACtBC,UAAmC;IADnC,eAAU,GAAVD,UAAU;IACV,eAAU,GAAVC,UAAU;IAJX,mBAAc,GAAa,EAAE;EAKlC;EAEJC,aAAa;IACX,MAAMC,eAAe,GAAG,IAAI,CAACH,UAAU,CAACI,WAAW;IAEnD,OAAOD,eAAe,CAACE,IAAI,CAACC,UAAU,IAAI,IAAI,CAACC,cAAc,CAACC,QAAQ,CAACF,UAAU,CAAC,CAAC;EACrF;EAEAG,eAAe;IACb,IAAI,CAAC,IAAI,CAACP,aAAa,EAAE,EAAE;MACzB,IAAI,CAACD,UAAU,CAACS,aAAa,CAACC,MAAM,EAAE;;EAE1C;;AAnBWb,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAAc;EAAAC;IAAAN;EAAA;EAAAO;AAAA","names":["PermissionsDirective","constructor","authFacade","elementRef","hasPermission","userPermissions","permissions","some","permission","appPermissions","includes","ngAfterViewInit","nativeElement","remove","selectors","inputs","standalone"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/core/directives/permissions.directive.ts"],"sourcesContent":["import {AfterViewInit, Directive, ElementRef, Input} from '@angular/core';\nimport {AuthFacade} from \"../../facades/auth.service\";\n\n@Directive({\n  selector: '[appPermissions]',\n  standalone: true,\n})\nexport class PermissionsDirective implements AfterViewInit{\n\n  @Input() appPermissions: string[] = [];\n\n  constructor(\n    private authFacade: AuthFacade,\n    private elementRef: ElementRef<HTMLElement>,\n  ) { }\n\n  hasPermission(): boolean {\n    const userPermissions = this.authFacade.permissions;\n\n    return userPermissions.some(permission => this.appPermissions.includes(permission));\n  }\n\n  ngAfterViewInit() {\n    if (!this.hasPermission()) {\n      this.elementRef.nativeElement.remove();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}