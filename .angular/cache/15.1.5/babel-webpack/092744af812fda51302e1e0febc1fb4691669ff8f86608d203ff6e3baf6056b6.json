{"ast":null,"code":"import { MatTableDataSource } from \"@angular/material/table\";\nimport { Subject, takeUntil } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../core/services/task.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@angular/material/button\";\nfunction BacklogComponent_th_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 13);\n    i0.ɵɵtext(1, \" # \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BacklogComponent_td_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r14 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r14.id, \" \");\n  }\n}\nfunction BacklogComponent_th_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 13);\n    i0.ɵɵtext(1, \" Name \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BacklogComponent_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r15 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r15.name, \" \");\n  }\n}\nfunction BacklogComponent_th_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 13);\n    i0.ɵɵtext(1, \" Name \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BacklogComponent_td_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r16 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r16.issueType.name, \" \");\n  }\n}\nfunction BacklogComponent_th_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 13);\n    i0.ɵɵtext(1, \" Name \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BacklogComponent_td_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r17 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r17.epic.name, \" \");\n  }\n}\nfunction BacklogComponent_th_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 13);\n    i0.ɵɵtext(1, \" Created At \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction BacklogComponent_td_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r18 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r18.createdAt, \" \");\n  }\n}\nfunction BacklogComponent_th_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"th\", 13);\n  }\n}\nfunction BacklogComponent_td_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 14)(1, \"button\", 0);\n    i0.ɵɵlistener(\"click\", function BacklogComponent_td_22_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r21);\n      const element_r19 = restoredCtx.$implicit;\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.addTask(element_r19.id));\n    });\n    i0.ɵɵtext(2, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function BacklogComponent_td_22_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r21);\n      const element_r19 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r22.deleteBoard(element_r19.id));\n    });\n    i0.ɵɵtext(4, \"Delete\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction BacklogComponent_tr_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 16);\n  }\n}\nfunction BacklogComponent_tr_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 17);\n  }\n}\nexport class BacklogComponent {\n  constructor(taskService, dialog) {\n    this.taskService = taskService;\n    this.dialog = dialog;\n    this.displayedColumns = ['id', 'name', 'issueType', 'epic', 'createdAt', 'actions'];\n    this.dataSource = new MatTableDataSource();\n    this.sub$ = new Subject();\n  }\n  ngOnInit() {}\n  getIssueTypes() {\n    this.taskService.getTasks({\n      isBacklog: true\n    }).pipe(takeUntil(this.sub$)).subscribe(boards => {\n      this.dataSource.data = boards;\n    });\n  }\n  ngOnDestroy() {}\n}\nBacklogComponent.ɵfac = function BacklogComponent_Factory(t) {\n  return new (t || BacklogComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.MatDialog));\n};\nBacklogComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BacklogComponent,\n  selectors: [[\"app-backlog\"]],\n  decls: 25,\n  vars: 3,\n  consts: [[\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [1, \"container\"], [\"mat-table\", \"\", 1, \"mat-elevation-z8\", 3, \"dataSource\"], [\"matColumnDef\", \"id\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"name\"], [\"matColumnDef\", \"issueType\"], [\"matColumnDef\", \"epic\"], [\"matColumnDef\", \"createdAt\"], [\"matColumnDef\", \"actions\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 3, \"click\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"]],\n  template: function BacklogComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function BacklogComponent_Template_button_click_1_listener() {\n        return ctx.addTask();\n      });\n      i0.ɵɵtext(2, \"Add Task\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"table\", 2);\n      i0.ɵɵelementContainerStart(5, 3);\n      i0.ɵɵtemplate(6, BacklogComponent_th_6_Template, 2, 0, \"th\", 4);\n      i0.ɵɵtemplate(7, BacklogComponent_td_7_Template, 2, 1, \"td\", 5);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(8, 6);\n      i0.ɵɵtemplate(9, BacklogComponent_th_9_Template, 2, 0, \"th\", 4);\n      i0.ɵɵtemplate(10, BacklogComponent_td_10_Template, 2, 1, \"td\", 5);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(11, 7);\n      i0.ɵɵtemplate(12, BacklogComponent_th_12_Template, 2, 0, \"th\", 4);\n      i0.ɵɵtemplate(13, BacklogComponent_td_13_Template, 2, 1, \"td\", 5);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(14, 8);\n      i0.ɵɵtemplate(15, BacklogComponent_th_15_Template, 2, 0, \"th\", 4);\n      i0.ɵɵtemplate(16, BacklogComponent_td_16_Template, 2, 1, \"td\", 5);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(17, 9);\n      i0.ɵɵtemplate(18, BacklogComponent_th_18_Template, 2, 0, \"th\", 4);\n      i0.ɵɵtemplate(19, BacklogComponent_td_19_Template, 2, 1, \"td\", 5);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(20, 10);\n      i0.ɵɵtemplate(21, BacklogComponent_th_21_Template, 1, 0, \"th\", 4);\n      i0.ɵɵtemplate(22, BacklogComponent_td_22_Template, 5, 0, \"td\", 5);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵtemplate(23, BacklogComponent_tr_23_Template, 1, 0, \"tr\", 11);\n      i0.ɵɵtemplate(24, BacklogComponent_tr_24_Template, 1, 0, \"tr\", 12);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"dataSource\", ctx.dataSource);\n      i0.ɵɵadvance(19);\n      i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n    }\n  },\n  dependencies: [i3.MatButton],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAQA,kBAAkB,QAAO,yBAAyB;AAC1D,SAAQC,OAAO,EAAEC,SAAS,QAAO,MAAM;;;;;;;ICQ3BC,8BAAsC;IAACA,mBAAE;IAAAA,iBAAK;;;;;IAC9CA,8BAAuC;IAACA,YAAe;IAAAA,iBAAK;;;;IAApBA,eAAe;IAAfA,+CAAe;;;;;IAKvDA,8BAAsC;IAACA,sBAAK;IAAAA,iBAAK;;;;;IACjDA,8BAAuC;IAACA,YAAiB;IAAAA,iBAAK;;;;IAAtBA,eAAiB;IAAjBA,iDAAiB;;;;;IAIzDA,8BAAsC;IAACA,sBAAK;IAAAA,iBAAK;;;;;IACjDA,8BAAuC;IAACA,YAA2B;IAAAA,iBAAK;;;;IAAhCA,eAA2B;IAA3BA,2DAA2B;;;;;IAInEA,8BAAsC;IAACA,sBAAK;IAAAA,iBAAK;;;;;IACjDA,8BAAuC;IAACA,YAAsB;IAAAA,iBAAK;;;;IAA3BA,eAAsB;IAAtBA,sDAAsB;;;;;IAK9DA,8BAAsC;IAACA,4BAAW;IAAAA,iBAAK;;;;;IACvDA,8BAAuC;IAACA,YAAsB;IAAAA,iBAAK;;;;IAA3BA,eAAsB;IAAtBA,sDAAsB;;;;;IAK9DA,yBAA6C;;;;;;IAC7CA,8BAAuC;IACOA;MAAA;MAAA;MAAA;MAAA,OAASA,8CAAmB;IAAA,EAAC;IAACA,oBAAI;IAAAA,iBAAS;IACrFA,kCAAyE;IAAlCA;MAAA;MAAA;MAAA;MAAA,OAASA,kDAAuB;IAAA,EAAC;IAACA,sBAAM;IAAAA,iBAAS;;;;;IAKhGA,yBAA4D;;;;;IAC5DA,yBAAkE;;;ADnC1E,OAAM,MAAOC,gBAAgB;EAO3BC,YACYC,WAAwB,EACzBC,MAAiB;IADhB,gBAAW,GAAXD,WAAW;IACZ,WAAM,GAANC,MAAM;IARjB,qBAAgB,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,WAAW,EAAE,SAAS,CAAC;IAE9E,eAAU,GAAG,IAAIP,kBAAkB,EAAS;IAE5C,SAAI,GAAG,IAAIC,OAAO,EAAE;EAOpB;EAEAO,QAAQ,IACR;EACAC,aAAa;IACX,IAAI,CAACH,WAAW,CAACI,QAAQ,CAAC;MACxBC,SAAS,EAAE;KACZ,CAAC,CACGC,IAAI,CAACV,SAAS,CAAC,IAAI,CAACW,IAAI,CAAC,CAAC,CAC1BC,SAAS,CAACC,MAAM,IAAG;MAClB,IAAI,CAACC,UAAU,CAACC,IAAI,GAAGF,MAAM;IAC/B,CAAC,CAAC;EACR;EAIAG,WAAW,IACX;;AA7BWd,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;QAAhBA,gBAAgB;EAAAe;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCZ7BpB,2BAAK;MACyCA;QAAA,OAASqB,aAAS;MAAA,EAAC;MAACrB,wBAAQ;MAAAA,iBAAS;MAInFA,8BAAuB;MAIfA,gCAAgC;MAC5BA,+DAA8C;MAC9CA,+DAA4D;MAChEA,0BAAe;MAGfA,gCAAkC;MAC9BA,+DAAiD;MACjDA,iEAA8D;MAClEA,0BAAe;MAEfA,iCAAuC;MACnCA,iEAAiD;MACjDA,iEAAwE;MAC5EA,0BAAe;MAEfA,iCAAkC;MAC9BA,iEAAiD;MACjDA,iEAAmE;MACvEA,0BAAe;MAGfA,iCAAuC;MACnCA,iEAAuD;MACvDA,iEAAmE;MACvEA,0BAAe;MAGfA,kCAAqC;MACjCA,iEAA6C;MAC7CA,iEAGK;MACTA,0BAAe;MAGfA,kEAA4D;MAC5DA,kEAAkE;MACtEA,iBAAQ;;;MA1CSA,eAAyB;MAAzBA,2CAAyB;MAwClBA,gBAAiC;MAAjCA,sDAAiC;MACpBA,eAA0B;MAA1BA,uDAA0B","names":["MatTableDataSource","Subject","takeUntil","i0","BacklogComponent","constructor","taskService","dialog","ngOnInit","getIssueTypes","getTasks","isBacklog","pipe","sub$","subscribe","boards","dataSource","data","ngOnDestroy","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/pages/backlog/backlog.component.ts","/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/pages/backlog/backlog.component.html"],"sourcesContent":["import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {MatTableDataSource} from \"@angular/material/table\";\nimport {Subject, takeUntil} from \"rxjs\";\nimport {ITask} from \"../../core/interfaces/task\";\nimport {TaskService} from \"../../core/services/task.service\";\nimport {MatDialog} from \"@angular/material/dialog\";\n\n@Component({\n  selector: 'app-backlog',\n  templateUrl: './backlog.component.html',\n  styleUrls: ['./backlog.component.scss']\n})\nexport class BacklogComponent implements OnInit, OnDestroy{\n  displayedColumns = ['id', 'name', 'issueType', 'epic', 'createdAt', 'actions'];\n\n  dataSource = new MatTableDataSource<ITask>();\n\n  sub$ = new Subject();\n\n  constructor(\n      private taskService: TaskService,\n      public dialog: MatDialog,\n  ) {\n\n  }\n\n  ngOnInit(): void {\n  }\n  getIssueTypes() {\n    this.taskService.getTasks({\n      isBacklog: true\n    })\n        .pipe(takeUntil(this.sub$))\n        .subscribe(boards => {\n          this.dataSource.data = boards;\n        });\n  }\n\n\n\n  ngOnDestroy(): void {\n  }\n}\n","<div>\n    <button mat-raised-button color=\"primary\" (click)=\"addTask()\">Add Task</button>\n</div>\n\n\n<div class=\"container\">\n    <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n\n        <!-- Name Column -->\n        <ng-container matColumnDef=\"id\">\n            <th mat-header-cell *matHeaderCellDef> # </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n        </ng-container>\n\n        <!-- Name Column -->\n        <ng-container matColumnDef=\"name\">\n            <th mat-header-cell *matHeaderCellDef> Name </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n        </ng-container>\n        <!-- Name Column -->\n        <ng-container matColumnDef=\"issueType\">\n            <th mat-header-cell *matHeaderCellDef> Name </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.issueType.name}} </td>\n        </ng-container>\n        <!-- Name Column -->\n        <ng-container matColumnDef=\"epic\">\n            <th mat-header-cell *matHeaderCellDef> Name </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.epic.name}} </td>\n        </ng-container>\n\n        <!-- Name Column -->\n        <ng-container matColumnDef=\"createdAt\">\n            <th mat-header-cell *matHeaderCellDef> Created At </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.createdAt}} </td>\n        </ng-container>\n\n        <!-- Name Column -->\n        <ng-container matColumnDef=\"actions\">\n            <th mat-header-cell *matHeaderCellDef>  </th>\n            <td mat-cell *matCellDef=\"let element\">\n                <button mat-raised-button color=\"primary\" (click)=\"addTask(element.id)\">Edit</button>\n                <button mat-raised-button color=\"warn\" (click)=\"deleteBoard(element.id)\">Delete</button>\n            </td>\n        </ng-container>\n\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n</div>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}