{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { MAT_DIALOG_DATA } from \"@angular/material/dialog\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"../../../../core/services/users.service\";\nimport * as i3 from \"../../../../core/services/role.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/select\";\nimport * as i7 from \"@angular/material/core\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@angular/forms\";\nfunction UserRoleComponent_mat_option_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r1.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r1.name, \" \");\n  }\n}\nexport class UserRoleComponent {\n  constructor(data, dialogRef, userService, roleService) {\n    this.data = data;\n    this.dialogRef = dialogRef;\n    this.userService = userService;\n    this.roleService = roleService;\n    this.form = new FormGroup({\n      roles: new FormControl([], Validators.required)\n    });\n    this.roles$ = this.roleService.getAllRoles();\n  }\n  ngOnInit() {\n    if (this.data.user.roles) {\n      this.form.patchValue({\n        roles: this.data.user.roles.map(r => r.id)\n      });\n    }\n  }\n  submit() {\n    if (this.form.invalid) {\n      return;\n    }\n    const {\n      roles\n    } = this.form.value;\n    this.userService.updateUserRoles({\n      userId: this.data.user.id,\n      roleIds: roles\n    }).subscribe(() => {\n      this.dialogRef.close(true);\n    });\n  }\n}\nUserRoleComponent.ɵfac = function UserRoleComponent_Factory(t) {\n  return new (t || UserRoleComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i2.UsersService), i0.ɵɵdirectiveInject(i3.RoleService));\n};\nUserRoleComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UserRoleComponent,\n  selectors: [[\"app-user-role\"]],\n  decls: 14,\n  vars: 4,\n  consts: [[\"mat-dialog-title\", \"\"], [\"mat-dialog-content\", \"\", 3, \"formGroup\"], [\"multiple\", \"\", \"formControlName\", \"roles\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-dialog-actions\", \"\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [3, \"value\"]],\n  template: function UserRoleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1, \"Role Management\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 1)(3, \"mat-form-field\")(4, \"mat-label\");\n      i0.ɵɵtext(5, \"Enter your name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"mat-select\", 2);\n      i0.ɵɵtemplate(7, UserRoleComponent_mat_option_7_Template, 2, 2, \"mat-option\", 3);\n      i0.ɵɵpipe(8, \"async\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(9, \"div\", 4)(10, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function UserRoleComponent_Template_button_click_10_listener() {\n        return ctx.dialogRef.close();\n      });\n      i0.ɵɵtext(11, \"Close\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function UserRoleComponent_Template_button_click_12_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵtext(13, \"Submit\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 2, ctx.roles$));\n    }\n  },\n  dependencies: [i4.NgForOf, i1.MatDialogTitle, i1.MatDialogContent, i1.MatDialogActions, i5.MatFormField, i5.MatLabel, i6.MatSelect, i7.MatOption, i8.MatButton, i9.NgControlStatus, i9.NgControlStatusGroup, i9.FormGroupDirective, i9.FormControlName, i4.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAQA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAO,gBAAgB;AAGjE,SAAQC,eAAe,QAAqB,0BAA0B;;;;;;;;;;;;;ICChEC,qCAAqE;IACnEA,YACF;IAAAA,iBAAa;;;;IAFoCA,oCAAmB;IAClEA,eACF;IADEA,+CACF;;;ADON,OAAM,MAAOC,iBAAiB;EAQ5BC,YACkCC,IAAoB,EAC7CC,SAA0C,EACzCC,WAAyB,EACzBC,WAAwB;IAHA,SAAI,GAAJH,IAAI;IAC7B,cAAS,GAATC,SAAS;IACR,gBAAW,GAAXC,WAAW;IACX,gBAAW,GAAXC,WAAW;IAVrB,SAAI,GAAc,IAAIT,SAAS,CAAC;MAC9BU,KAAK,EAAE,IAAIX,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACU,QAAQ;KAC/C,CAAC;IAEF,WAAM,GAAwB,IAAI,CAACF,WAAW,CAACG,WAAW,EAAE;EAOxD;EAEJC,QAAQ;IACN,IAAI,IAAI,CAACP,IAAI,CAACQ,IAAI,CAACJ,KAAK,EAAE;MACxB,IAAI,CAACK,IAAI,CAACC,UAAU,CAAC;QACnBN,KAAK,EAAE,IAAI,CAACJ,IAAI,CAACQ,IAAI,CAACJ,KAAK,CAACO,GAAG,CAAEC,CAAO,IAAKA,CAAC,CAACC,EAAE;OAClD,CAAC;;EAEN;EAEAC,MAAM;IACJ,IAAI,IAAI,CAACL,IAAI,CAACM,OAAO,EAAE;MACrB;;IAEF,MAAM;MAACX;IAAK,CAAC,GAAG,IAAI,CAACK,IAAI,CAACO,KAAK;IAC/B,IAAI,CAACd,WAAW,CAACe,eAAe,CAAC;MAC/BC,MAAM,EAAE,IAAI,CAAClB,IAAI,CAACQ,IAAI,CAACK,EAAE;MACzBM,OAAO,EAAEf;KACV,CAAC,CACCgB,SAAS,CAAC,MAAK;MACd,IAAI,CAACnB,SAAS,CAACoB,KAAK,CAAC,IAAI,CAAC;IAC5B,CAAC,CAAC;EACN;;AAnCWvB,iBAAiB;mBAAjBA,iBAAiB,uBASlBF,eAAe;AAAA;AATdE,iBAAiB;QAAjBA,iBAAiB;EAAAwB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCd9B7B,6BAAqB;MAAAA,+BAAe;MAAAA,iBAAK;MACzCA,8BAA2C;MAE5BA,+BAAe;MAAAA,iBAAY;MACtCA,qCAA6C;MAC3CA,gFAEa;;MACfA,iBAAa;MAGjBA,8BAAwB;MACoBA;QAAA,OAAS8B,qBAAiB;MAAA,EAAC;MAAC9B,sBAAK;MAAAA,iBAAS;MACpFA,kCAA6D;MAAnBA;QAAA,OAAS8B,YAAQ;MAAA,EAAC;MAAC9B,uBAAM;MAAAA,iBAAS;;;MAZtDA,eAAkB;MAAlBA,oCAAkB;MAILA,eAAgB;MAAhBA,0DAAgB","names":["FormControl","FormGroup","Validators","MAT_DIALOG_DATA","i0","UserRoleComponent","constructor","data","dialogRef","userService","roleService","roles","required","getAllRoles","ngOnInit","user","form","patchValue","map","r","id","submit","invalid","value","updateUserRoles","userId","roleIds","subscribe","close","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/pages/user/components/user-role/user-role.component.ts","/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/pages/user/components/user-role/user-role.component.html"],"sourcesContent":["import {Component, Inject, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {Observable} from \"rxjs\";\nimport {IRole} from \"../../../../core/interfaces/role\";\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\nimport {UsersService} from \"../../../../core/services/users.service\";\nimport {User} from \"../../../../core/interfaces\";\nimport {RoleService} from \"../../../../core/services/role.service\";\n\n@Component({\n  selector: 'app-user-role',\n  templateUrl: './user-role.component.html',\n  styleUrls: ['./user-role.component.scss']\n})\nexport class UserRoleComponent implements OnInit{\n\n  form: FormGroup = new FormGroup({\n    roles: new FormControl([], Validators.required)\n  });\n\n  roles$: Observable<IRole[]> = this.roleService.getAllRoles();\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: { user: User },\n    public dialogRef: MatDialogRef<UserRoleComponent>,\n    private userService: UsersService,\n    private roleService: RoleService,\n  ) { }\n\n  ngOnInit(): void {\n    if (this.data.user.roles) {\n      this.form.patchValue({\n        roles: this.data.user.roles.map((r:IRole) => r.id)\n      })\n    }\n  }\n\n  submit() {\n    if (this.form.invalid) {\n      return;\n    }\n    const {roles} = this.form.value;\n    this.userService.updateUserRoles({\n      userId: this.data.user.id,\n      roleIds: roles\n    })\n      .subscribe(() => {\n        this.dialogRef.close(true);\n      })\n  }\n}\n","<h1 mat-dialog-title>Role Management</h1>\n<div mat-dialog-content [formGroup]=\"form\">\n  <mat-form-field>\n    <mat-label>Enter your name</mat-label>\n    <mat-select multiple formControlName=\"roles\">\n      <mat-option *ngFor=\"let option of roles$ |async\" [value]=\"option.id\">\n        {{ option.name }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n</div>\n<div mat-dialog-actions>\n  <button mat-raised-button color=\"primary\" (click)=\"dialogRef.close()\">Close</button>\n  <button mat-raised-button color=\"primary\" (click)=\"submit()\">Submit</button>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}