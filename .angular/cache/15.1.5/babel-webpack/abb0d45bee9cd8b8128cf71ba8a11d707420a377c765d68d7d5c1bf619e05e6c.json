{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { map, startWith, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/core/services/stepper.next.service\";\nimport * as i3 from \"src/app/core/services\";\nimport * as i4 from \"../../../core/services/valid-counter.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/stepper\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/select\";\nimport * as i11 from \"@angular/material/core\";\nimport * as i12 from \"@angular/material/chips\";\nimport * as i13 from \"@angular/material/autocomplete\";\nimport * as i14 from \"@angular/material/icon\";\nimport * as i15 from \"../../../core/directives/next-button.directive\";\nconst _c0 = [\"taskInput\"];\nfunction CreateIssueTypesComponent_mat_chip_43_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-chip\", 28);\n    i0.ɵɵlistener(\"removed\", function CreateIssueTypesComponent_mat_chip_43_Template_mat_chip_removed_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const task_r6 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.remove(task_r6));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function CreateIssueTypesComponent_mat_chip_43_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.filterOptions());\n    });\n    i0.ɵɵelementStart(3, \"mat-icon\");\n    i0.ɵɵtext(4, \"cancel\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const task_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r6, \" \");\n  }\n}\nfunction CreateIssueTypesComponent_mat_option_48_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 30);\n    i0.ɵɵlistener(\"click\", function CreateIssueTypesComponent_mat_option_48_Template_mat_option_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      const _r2 = i0.ɵɵreference(45);\n      _r2.blur();\n      return i0.ɵɵresetView(ctx_r11.filterOptions());\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const task_r10 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", task_r10);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r10, \" \");\n  }\n}\nfunction CreateIssueTypesComponent_div_51_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 31)(2, \"mat-form-field\", 2)(3, \"mat-label\");\n    i0.ɵɵtext(4, \"Column name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 32);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"mat-form-field\", 2)(7, \"mat-label\");\n    i0.ɵɵtext(8, \"Filed name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"input\", 33);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const i_r14 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r14);\n  }\n}\nexport class CreateIssueTypesComponent {\n  constructor(_formBuilder, stepperService, issueTypesService, validCounter) {\n    this._formBuilder = _formBuilder;\n    this.stepperService = stepperService;\n    this.issueTypesService = issueTypesService;\n    this.validCounter = validCounter;\n    this.issueFormGroup = this._formBuilder.group({\n      name: ['', [Validators.required, Validators.minLength(2)]],\n      description: ['', [Validators.required, Validators.minLength(4)]],\n      icon: ['', Validators.required],\n      color: ['#910D9B', Validators.required],\n      status: ['', Validators.required],\n      tasks: [[], Validators.required],\n      columns: this._formBuilder.array([])\n    });\n    this.isEditable = true;\n    this.separatorKeysCodes = [ENTER, COMMA];\n    this.taskControl = new FormControl();\n    this.tasks = [];\n    this.allTasks = ['Task', 'Bug', 'Test', 'Spike'];\n  }\n  ngOnInit() {\n    this.filteredTasks = this.taskControl.valueChanges.pipe(startWith(null), map(task => task ? this.filter(task) : this.allTasks.slice()));\n  }\n  ngAfterViewInit() {\n    this.issueFormGroup.get('name')?.setValue('ss');\n    this.issueComponent(2);\n    this.issueFormGroup.get('name')?.setValue('');\n  }\n  issueComponent(index) {\n    this.validCounter.validCounter(this.issueFormGroup, index);\n  }\n  add(event) {\n    const value = (event.value || '').trim();\n    if (value) {\n      this.tasks.push(value);\n    }\n    event.chipInput.clear();\n    this.taskControl.setValue(null);\n  }\n  remove(role) {\n    const index = this.tasks.indexOf(role);\n    this.taskInput.nativeElement.select();\n    if (index >= 0) {\n      this.tasks.splice(index, 1);\n      this.issueFormGroup.get('tasks').setValue(this.tasks);\n    }\n  }\n  selected(event) {\n    this.tasks.push(event.option.viewValue);\n    this.taskInput.nativeElement.value = '';\n    this.taskControl.setValue(null);\n  }\n  filter(value) {\n    const filterValue = value.toLowerCase();\n    return this.allTasks.filter(task => task.toLowerCase().includes(filterValue));\n  }\n  // Adding Issue Type\n  get colsArray() {\n    return this.issueFormGroup.get('columns');\n  }\n  addCol() {\n    this.colsArray.push(new FormGroup({\n      name: new FormControl('', Validators.required),\n      filedName: new FormControl('', Validators.required),\n      isRequired: new FormControl('', Validators.required)\n    }, Validators.required));\n  }\n  onSubmit() {\n    this.stepperService.changeFromLinear();\n    this.stepperService.openNextStep(3);\n    setTimeout(() => {\n      this.stepperService.changeToLinear();\n    }, 1000);\n    this.issueTypesService.setIssueType(this.issueFormGroup.value).subscribe({\n      next: res => console.log(res)\n    });\n  }\n  goBack() {\n    this.stepperService.changeFromLinear();\n    this.stepperService.openNextStep(1);\n    setTimeout(() => {\n      this.stepperService.changeToLinear();\n    }, 500);\n    if (this.issueFormGroup.valid) {\n      this.stepperService.complete.next(true);\n    }\n    this.stepperService.complete.next(false);\n  }\n  filterOptions() {\n    setTimeout(() => {\n      const tasks = this.issueFormGroup.get('tasks').value;\n      const newFilteredTasks = this.allTasks.filter(task => {\n        return !tasks.includes(task);\n      });\n      this.filteredTasks = of(newFilteredTasks);\n    }, 200);\n  }\n}\nCreateIssueTypesComponent.ɵfac = function CreateIssueTypesComponent_Factory(t) {\n  return new (t || CreateIssueTypesComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.StepperNextService), i0.ɵɵdirectiveInject(i3.IssueTypesService), i0.ɵɵdirectiveInject(i4.ValidCounterService));\n};\nCreateIssueTypesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CreateIssueTypesComponent,\n  selectors: [[\"app-create-issue-types\"]],\n  viewQuery: function CreateIssueTypesComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.taskInput = _t.first);\n    }\n  },\n  decls: 59,\n  vars: 11,\n  consts: [[1, \"flex\", 3, \"formGroup\"], [1, \"margin-auto\"], [\"appearance\", \"fill\", 1, \"step-form-field\"], [\"matInput\", \"\", \"formControlName\", \"name\", \"placeholder\", \"\"], [\"matInput\", \"\", \"formControlName\", \"description\", \"placeholder\", \"\", \"required\", \"\"], [\"formControlName\", \"icon\"], [\"value\", \"task_alt\"], [1, \"material-icons\"], [\"value\", \"change_history\"], [\"value\", \"timeline\"], [\"value\", \"rebase_edit\"], [\"matInput\", \"\", \"type\", \"color\", \"formControlName\", \"color\", \"value\", \"#910D9B\", \"required\", \"\"], [\"formControlName\", \"status\"], [\"value\", \"true\"], [\"value\", \"false\"], [\"aria-label\", \"Task Selection\", \"formControlName\", \"tasks\", \"required\", \"\"], [\"chipListBox\", \"\"], [3, \"removed\", 4, \"ngFor\", \"ngForOf\"], [\"placeholder\", \"New Task\", \"formControlName\", \"tasks\", 3, \"formControl\", \"matAutocomplete\", \"matChipInputFor\", \"matChipInputSeparatorKeyCodes\", \"matChipInputTokenEnd\"], [\"taskInput\", \"\"], [3, \"optionSelected\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"formArrayName\", \"columns\", 1, \"step-form-field\", \"added\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", \"mat-button\", \"\", \"color\", \"primary\", 1, \"add\", 3, \"click\"], [\"mat-button\", \"\", \"matStepperPrevious\", \"\", 3, \"click\"], [\"mat-button\", \"\", \"matStepperNext\", \"\", \"type\", \"button\", \"appNextButton\", \"\", 3, \"disabled\", \"click\"], [3, \"removed\"], [\"matChipRemove\", \"\", 3, \"click\"], [3, \"value\", \"click\"], [3, \"formGroupName\"], [\"matInput\", \"\", \"formControlName\", \"name\", \"placeholder\", \"\", \"required\", \"\"], [\"matInput\", \"\", \"formControlName\", \"filedName\", \"placeholder\", \"\", \"required\", \"\"]],\n  template: function CreateIssueTypesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"div\", 1)(2, \"mat-form-field\", 2)(3, \"mat-label\");\n      i0.ɵɵtext(4, \"Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"mat-form-field\", 2)(7, \"mat-label\");\n      i0.ɵɵtext(8, \"Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"mat-form-field\", 2)(11, \"mat-label\");\n      i0.ɵɵtext(12, \"Icon\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"mat-select\", 5)(14, \"mat-option\", 6)(15, \"span\", 7);\n      i0.ɵɵtext(16, \"task_alt\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(17, \"mat-option\", 8)(18, \"span\", 7);\n      i0.ɵɵtext(19, \"change_history\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(20, \"mat-option\", 9)(21, \"span\", 7);\n      i0.ɵɵtext(22, \"timeline\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(23, \"mat-option\", 10)(24, \"span\", 7);\n      i0.ɵɵtext(25, \"rebase_edit\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(26, \"mat-form-field\", 2)(27, \"mat-label\");\n      i0.ɵɵtext(28, \"Color\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(29, \"input\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(30, \"mat-form-field\", 2)(31, \"mat-label\");\n      i0.ɵɵtext(32, \"Status\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(33, \"mat-select\", 12)(34, \"mat-option\", 13);\n      i0.ɵɵtext(35, \"Active\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(36, \"mat-option\", 14);\n      i0.ɵɵtext(37, \"Inactive\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(38, \"mat-form-field\", 2)(39, \"mat-label\");\n      i0.ɵɵtext(40, \"Tasks\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(41, \"mat-chip-grid\", 15, 16);\n      i0.ɵɵtemplate(43, CreateIssueTypesComponent_mat_chip_43_Template, 5, 1, \"mat-chip\", 17);\n      i0.ɵɵelementStart(44, \"input\", 18, 19);\n      i0.ɵɵlistener(\"matChipInputTokenEnd\", function CreateIssueTypesComponent_Template_input_matChipInputTokenEnd_44_listener($event) {\n        return ctx.add($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(46, \"mat-autocomplete\", 20, 21);\n      i0.ɵɵlistener(\"optionSelected\", function CreateIssueTypesComponent_Template_mat_autocomplete_optionSelected_46_listener($event) {\n        return ctx.selected($event);\n      });\n      i0.ɵɵtemplate(48, CreateIssueTypesComponent_mat_option_48_Template, 2, 2, \"mat-option\", 22);\n      i0.ɵɵpipe(49, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(50, \"div\", 23);\n      i0.ɵɵtemplate(51, CreateIssueTypesComponent_div_51_Template, 10, 1, \"div\", 24);\n      i0.ɵɵelementStart(52, \"button\", 25);\n      i0.ɵɵlistener(\"click\", function CreateIssueTypesComponent_Template_button_click_52_listener() {\n        return ctx.addCol();\n      });\n      i0.ɵɵtext(53, \" Add Column \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(54, \"div\")(55, \"button\", 26);\n      i0.ɵɵlistener(\"click\", function CreateIssueTypesComponent_Template_button_click_55_listener() {\n        return ctx.goBack();\n      });\n      i0.ɵɵtext(56, \"Back\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(57, \"button\", 27);\n      i0.ɵɵlistener(\"click\", function CreateIssueTypesComponent_Template_button_click_57_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵtext(58, \" Next \");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(42);\n      const _r3 = i0.ɵɵreference(47);\n      i0.ɵɵproperty(\"formGroup\", ctx.issueFormGroup);\n      i0.ɵɵadvance(43);\n      i0.ɵɵproperty(\"ngForOf\", ctx.tasks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formControl\", ctx.taskControl)(\"matAutocomplete\", _r3)(\"matChipInputFor\", _r0)(\"matChipInputSeparatorKeyCodes\", ctx.separatorKeysCodes);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(49, 9, ctx.filteredTasks));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.colsArray.controls);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"disabled\", !ctx.issueFormGroup.valid);\n    }\n  },\n  dependencies: [i5.NgForOf, i6.MatStepperNext, i6.MatStepperPrevious, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormControlDirective, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i1.FormArrayName, i7.MatButton, i8.MatFormField, i8.MatLabel, i9.MatInput, i10.MatSelect, i11.MatOption, i12.MatChip, i12.MatChipGrid, i12.MatChipInput, i12.MatChipRemove, i13.MatAutocomplete, i13.MatAutocompleteTrigger, i14.MatIcon, i15.NextButtonDirective, i5.AsyncPipe],\n  styles: [\"form[_ngcontent-%COMP%] {\\n  min-width: 100% !important;\\n  overflow: auto;\\n  padding-bottom: 70px;\\n  max-height: 100%;\\n}\\n\\nform[_ngcontent-%COMP%]   .margin-auto[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: space-evenly;\\n  align-items: center;\\n  flex-wrap: wrap;\\n  flex-direction: row;\\n  overflow-y: auto !important;\\n  max-height: 100%;\\n}\\n\\nform[_ngcontent-%COMP%]   .margin-auto[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%] {\\n  flex-basis: 40%;\\n  min-width: 250px;\\n  background: none;\\n}\\n\\nform[_ngcontent-%COMP%]   .margin-auto[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\\n  width: 100%;\\n  margin: 0;\\n}\\n\\nform[_ngcontent-%COMP%]   .margin-auto[_ngcontent-%COMP%]   .add[_ngcontent-%COMP%] {\\n  width: 150px;\\n  position: absolute;\\n  bottom: 20px;\\n  left: calc(50% - 75px);\\n  background: green;\\n  border: 1px solid white;\\n  border-radius: 5px;\\n  color: white;\\n}\\n\\nform[_ngcontent-%COMP%]   .margin-auto[_ngcontent-%COMP%]   .added[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\nform[_ngcontent-%COMP%]   .margin-auto[_ngcontent-%COMP%]   .added[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 30px;\\n  flex-wrap: wrap;\\n}\\n\\nform[_ngcontent-%COMP%]   .margin-auto[_ngcontent-%COMP%]   .added[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%] {\\n  flex-basis: 40%;\\n  min-width: 250px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvc3RlcHBlci9jcmVhdGUtaXNzdWUtdHlwZXMvY3JlYXRlLWlzc3VlLXR5cGVzLmNvbXBvbmVudC5zY3NzIiwid2VicGFjazovLy4vc3JjL21peGlucy5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBO0VBQ0UsMEJBQUE7RUFDQSxjQUFBO0VBQ0Esb0JBQUE7RUFDQSxnQkFBQTtBQURGOztBQUVFO0VDTkEsYUFBQTtFQUNBLDZCRE1nQjtFQ0xoQixtQkRLOEI7RUFDNUIsZUFBQTtFQUNBLG1CQUFBO0VBQ0EsMkJBQUE7RUFDQSxnQkFBQTtBQUVKOztBQUFJO0VBQ0UsZUFBQTtFQUNBLGdCQUFBO0VBQ0EsZ0JBQUE7QUFFTjs7QUFBTTtFQUNFLFdBQUE7RUFDQSxTQUFBO0FBRVI7O0FBRUk7RUFDRSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxZQUFBO0VBQ0Esc0JBQUE7RUFDQSxpQkFBQTtFQUNBLHVCQUFBO0VBQ0Esa0JBQUE7RUFDQSxZQUFBO0FBQU47O0FBR0k7RUFDRSxXQUFBO0FBRE47O0FBSVE7RUN2Q04sYUFBQTtFQUNBLHVCRHVDdUI7RUN0Q3ZCLG1CRHNDK0I7RUFDdkIsU0FBQTtFQUNBLGVBQUE7QUFBVjs7QUFDVTtFQUNFLGVBQUE7RUFDQSxnQkFBQTtBQUNaIiwic291cmNlc0NvbnRlbnQiOlsiQGltcG9ydCAnLi4vLi4vLi4vLi4vbWl4aW5zJztcblxuZm9ybSB7XG4gIG1pbi13aWR0aDogMTAwJSAhaW1wb3J0YW50O1xuICBvdmVyZmxvdzogYXV0bztcbiAgcGFkZGluZy1ib3R0b206IDcwcHg7XG4gIG1heC1oZWlnaHQ6IDEwMCU7XG4gIC5tYXJnaW4tYXV0byB7XG4gICAgQGluY2x1ZGUgZmxleChzcGFjZS1ldmVubHksIGNlbnRlcik7XG4gICAgZmxleC13cmFwOiB3cmFwO1xuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgb3ZlcmZsb3cteTogYXV0byAhaW1wb3J0YW50O1xuICAgIG1heC1oZWlnaHQ6IDEwMCU7XG5cbiAgICBtYXQtZm9ybS1maWVsZCB7XG4gICAgICBmbGV4LWJhc2lzOiA0MCU7XG4gICAgICBtaW4td2lkdGg6IDI1MHB4O1xuICAgICAgYmFja2dyb3VuZDogbm9uZTtcblxuICAgICAgaW5wdXQge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIC5hZGQge1xuICAgICAgd2lkdGg6IDE1MHB4O1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgYm90dG9tOiAyMHB4O1xuICAgICAgbGVmdDogY2FsYyg1MCUgLSA3NXB4KTtcbiAgICAgIGJhY2tncm91bmQ6IGdyZWVuO1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7XG4gICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgfVxuXG4gICAgLmFkZGVkIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgICBkaXYge1xuICAgICAgICBkaXYge1xuICAgICAgICAgIEBpbmNsdWRlICBmbGV4KGNlbnRlciwgY2VudGVyKTtcbiAgICAgICAgICBnYXA6IDMwcHg7XG4gICAgICAgICAgZmxleC13cmFwOiB3cmFwO1xuICAgICAgICAgIG1hdC1mb3JtLWZpZWxkIHtcbiAgICAgICAgICAgIGZsZXgtYmFzaXM6IDQwJTtcbiAgICAgICAgICAgIG1pbi13aWR0aDogMjUwcHg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJAbWl4aW4gZmxleCgkanVzdGlmeSwgJGFsaWduLWl0ZW1zKSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogJGp1c3RpZnk7XG4gIGFsaWduLWl0ZW1zOiAkYWxpZ24taXRlbXM7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","COMMA","ENTER","map","startWith","of","i0","_r2","CreateIssueTypesComponent","constructor","_formBuilder","stepperService","issueTypesService","validCounter","group","name","required","minLength","description","icon","color","status","tasks","columns","array","ngOnInit","filteredTasks","taskControl","valueChanges","pipe","task","filter","allTasks","slice","ngAfterViewInit","issueFormGroup","get","setValue","issueComponent","index","add","event","value","trim","push","chipInput","clear","remove","role","indexOf","taskInput","nativeElement","select","splice","selected","option","viewValue","filterValue","toLowerCase","includes","colsArray","addCol","filedName","isRequired","onSubmit","changeFromLinear","openNextStep","setTimeout","changeToLinear","setIssueType","subscribe","next","res","console","log","goBack","valid","complete","filterOptions","newFilteredTasks","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/pages/stepper/create-issue-types/create-issue-types.component.ts","/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/pages/stepper/create-issue-types/create-issue-types.component.html"],"sourcesContent":["import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport {\n  FormArray,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {COMMA, ENTER} from '@angular/cdk/keycodes';\nimport {from, map, Observable, startWith, filter, of, timeout, toArray} from 'rxjs';\nimport {MatAutocompleteSelectedEvent} from '@angular/material/autocomplete';\nimport {MatChipInputEvent} from '@angular/material/chips';\nimport {StepperNextService} from 'src/app/core/services/stepper.next.service';\n\nimport { IssueTypesService } from 'src/app/core/services';\nimport {ValidCounterService} from \"../../../core/services/valid-counter.service\";\n\n@Component({\n  selector: 'app-create-issue-types',\n  templateUrl: './create-issue-types.component.html',\n  styleUrls: ['./create-issue-types.component.scss'],\n})\nexport class CreateIssueTypesComponent implements OnInit {\n  constructor(\n    private _formBuilder: FormBuilder,\n    private stepperService: StepperNextService,\n    private issueTypesService: IssueTypesService,\n    private validCounter: ValidCounterService\n  ) {\n  }\n\n  issueFormGroup = this._formBuilder.group({\n    name: ['', [Validators.required, Validators.minLength(2)]],\n    description: ['', [Validators.required, Validators.minLength(4)]],\n    icon: ['', Validators.required],\n    color: ['#910D9B', Validators.required],\n    status: ['', Validators.required],\n    tasks: [[] as string[], Validators.required],\n    columns: this._formBuilder.array([]),\n  });\n  isEditable = true;\n\n  separatorKeysCodes: number[] = [ENTER, COMMA];\n\n  taskControl = new FormControl();\n  filteredTasks!: Observable<string[]>;\n  tasks: string[] = [];\n  allTasks: string[] = ['Task', 'Bug', 'Test', 'Spike'];\n\n  @ViewChild('taskInput') taskInput!: ElementRef<HTMLInputElement>;\n\n  ngOnInit(): void {\n    this.filteredTasks = this.taskControl.valueChanges.pipe(\n      startWith(null),\n      map((task: any) => (task ? this.filter(task) : this.allTasks.slice()))\n    );\n\n  }\n\n\n\n  ngAfterViewInit() {\n    this.issueFormGroup.get('name')?.setValue('ss');\n    this.issueComponent(2);\n    this.issueFormGroup.get('name')?.setValue('');\n  }\n\n  issueComponent(index: number) {\n    this.validCounter.validCounter(this.issueFormGroup, index);\n  }\n\n  add(event: MatChipInputEvent): void {\n    const value = (event.value || '').trim();\n\n    if (value) {\n      this.tasks.push(value);\n    }\n\n    event.chipInput!.clear();\n    this.taskControl.setValue(null);\n  }\n\n  remove(role: string): void {\n    const index = this.tasks.indexOf(role);\n\n    this.taskInput.nativeElement.select();\n\n    if (index >= 0) {\n      this.tasks.splice(index, 1);\n      this.issueFormGroup.get('tasks')!.setValue(this.tasks)\n    }\n  }\n\n  selected(event: MatAutocompleteSelectedEvent): void {\n    this.tasks.push(event.option.viewValue);\n    this.taskInput.nativeElement.value = '';\n    this.taskControl.setValue(null);\n  }\n\n  filter(value: string) {\n    const filterValue = value.toLowerCase();\n\n    return this.allTasks.filter((task) =>\n      task.toLowerCase().includes(filterValue)\n    );\n  }\n\n  // Adding Issue Type\n  get colsArray() {\n    return <FormArray>this.issueFormGroup.get('columns');\n  }\n\n  addCol() {\n    this.colsArray.push(\n      new FormGroup(\n        {\n          name: new FormControl('', Validators.required),\n          filedName: new FormControl('', Validators.required),\n          isRequired: new FormControl('', Validators.required),\n        },\n        Validators.required\n      )\n    );\n  }\n\n  onSubmit() {\n    this.stepperService.changeFromLinear();\n\n    this.stepperService.openNextStep(3);\n\n    setTimeout(() => {\n      this.stepperService.changeToLinear();\n    }, 1000);\n\n    this.issueTypesService.setIssueType(this.issueFormGroup.value).subscribe({\n      next: (res) => console.log(res),\n    });\n  }\n\n  goBack() {\n    this.stepperService.changeFromLinear();\n    this.stepperService.openNextStep(1);\n\n    setTimeout(() => {\n      this.stepperService.changeToLinear();\n    }, 500);\n    if (this.issueFormGroup.valid) {\n      this.stepperService.complete.next(true);\n    }\n    this.stepperService.complete.next(false);\n  }\n\n  filterOptions() {\n    setTimeout(() => {\n      const tasks: any = this.issueFormGroup.get('tasks')!.value;\n\n      const newFilteredTasks = this.allTasks.filter(task => {\n        return !tasks.includes(task)\n      });\n\n      this.filteredTasks = of(newFilteredTasks);\n    }, 200)\n  }\n}\n","<form [formGroup]=\"issueFormGroup\" class=\"flex\">\n  <div class=\"margin-auto\">\n    <mat-form-field appearance=\"fill\" class=\"step-form-field\">\n      <mat-label>Name</mat-label>\n      <input matInput formControlName=\"name\" placeholder=\"\" />\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\" class=\"step-form-field\">\n      <mat-label>Description</mat-label>\n      <input matInput formControlName=\"description\" placeholder=\"\" required/>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\" class=\"step-form-field\">\n      <mat-label>Icon</mat-label>\n      <mat-select formControlName=\"icon\">\n        <mat-option value=\"task_alt\">\n          <span class=\"material-icons\">task_alt</span>\n        </mat-option>\n        <mat-option value=\"change_history\">\n          <span class=\"material-icons\">change_history</span>\n        </mat-option>\n        <mat-option value=\"timeline\">\n          <span class=\"material-icons\">timeline</span>\n        </mat-option>\n        <mat-option value=\"rebase_edit\">\n          <span class=\"material-icons\">rebase_edit</span>\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\" class=\"step-form-field\">\n      <mat-label>Color</mat-label>\n      <input\n        matInput\n        type=\"color\"\n        formControlName=\"color\"\n        value=\"#910D9B\"\n        required\n      />\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\" class=\"step-form-field\">\n      <mat-label>Status</mat-label>\n      <mat-select formControlName=\"status\">\n        <mat-option value=\"true\">Active</mat-option>\n        <mat-option value=\"false\">Inactive</mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\" class=\"step-form-field\">\n      <mat-label>Tasks</mat-label>\n      <mat-chip-grid #chipListBox aria-label=\"Task Selection\" formControlName=\"tasks\" required>\n        <mat-chip *ngFor=\"let task of tasks\" (removed)=\"remove(task)\">\n          {{ task }}\n          <button matChipRemove (click)=\"filterOptions()\">\n            <mat-icon>cancel</mat-icon>\n          </button>\n        </mat-chip>\n        <input\n          placeholder=\"New Task\"\n          #taskInput\n          [formControl]=\"taskControl\"\n          formControlName=\"tasks\"\n          [matAutocomplete]=\"auto\"\n          [matChipInputFor]=\"$any(chipListBox)\"\n          [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n          (matChipInputTokenEnd)=\"add($event)\"\n        />\n      </mat-chip-grid>\n      <mat-autocomplete\n        #auto=\"matAutocomplete\"\n        (optionSelected)=\"selected($event)\"\n      >\n        <mat-option *ngFor=\"let task of filteredTasks | async\" [value]=\"task\" (click)=\"taskInput.blur(); filterOptions()\">\n          {{ task }}\n        </mat-option>\n      </mat-autocomplete>\n    </mat-form-field>\n\n    <div formArrayName=\"columns\" class=\"step-form-field added\">\n      <div *ngFor=\"let column of colsArray.controls; let i = index\">\n        <div [formGroupName]=\"i\">\n          <mat-form-field appearance=\"fill\" class=\"step-form-field\">\n            <mat-label>Column name</mat-label>\n            <input matInput formControlName=\"name\" placeholder=\"\" required/>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"fill\" class=\"step-form-field\">\n            <mat-label>Filed name</mat-label>\n            <input\n              matInput\n              formControlName=\"filedName\"\n              placeholder=\"\"\n              required\n            />\n          </mat-form-field>\n        </div>\n      </div>\n      <button type=\"button\" mat-button color=\"primary\" (click)=\"addCol()\" class=\"add\">\n        Add Column\n      </button>\n    </div>\n\n    <div>\n      <button mat-button matStepperPrevious (click)=\"goBack()\">Back</button>\n      <button\n\n       [disabled]=\"!issueFormGroup.valid\"\n\n        mat-button\n        matStepperNext\n        type=\"button\"\n        (click)=\"onSubmit()\"\n        appNextButton\n      >\n        Next\n      </button>\n    </div>\n  </div>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}