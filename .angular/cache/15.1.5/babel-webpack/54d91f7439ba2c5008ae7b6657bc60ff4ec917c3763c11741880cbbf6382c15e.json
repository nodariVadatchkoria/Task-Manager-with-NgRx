{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/facades/project-facade.service\";\nimport * as i2 from \"@ngrx/store\";\nexport class ProjectInterceptor {\n  constructor(projectFacade, store) {\n    this.projectFacade = projectFacade;\n    this.store = store;\n  }\n  intercept(request, next) {\n    const project = this.projectFacade.getProject();\n    if (project) {\n      return next.handle(request.clone({\n        setHeaders: {\n          project: String(project.id)\n        }\n      }));\n    }\n    return next.handle(request);\n  }\n}\nProjectInterceptor.ɵfac = function ProjectInterceptor_Factory(t) {\n  return new (t || ProjectInterceptor)(i0.ɵɵinject(i1.ProjectFacade), i0.ɵɵinject(i2.Store));\n};\nProjectInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProjectInterceptor,\n  factory: ProjectInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;;AAcA,OAAM,MAAOA,kBAAkB;EAC3BC,YACYC,aAA4B,EACnBC,KAA6C;IADtD,kBAAa,GAAbD,aAAa;IACJ,UAAK,GAALC,KAAK;EAE1B;EAEAC,SAAS,CACLC,OAA6B,EAC7BC,IAAiB;IAEjB,MAAMC,OAAO,GAAG,IAAI,CAACL,aAAa,CAACM,UAAU,EAAE;IAG/C,IAAID,OAAO,EAAE;MACT,OAAOD,IAAI,CAACG,MAAM,CACdJ,OAAO,CAACK,KAAK,CAAC;QACVC,UAAU,EAAE;UAACJ,OAAO,EAAEK,MAAM,CAACL,OAAO,CAACM,EAAE;QAAC;OAC3C,CAAC,CACL;;IAGL,OAAOP,IAAI,CAACG,MAAM,CAACJ,OAAO,CAAC;EAC/B;;AAvBSL,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAc,SAAlBd,kBAAkB;AAAA","names":["ProjectInterceptor","constructor","projectFacade","store","intercept","request","next","project","getProject","handle","clone","setHeaders","String","id","factory"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/core/interceptors/project.interceptor.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {\n    HttpRequest,\n    HttpHandler,\n    HttpEvent,\n    HttpInterceptor,\n} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {ProjectFacade} from 'src/app/facades/project-facade.service';\nimport {AuthInterceptor} from \"./auth.interceptor\";\nimport {Store} from \"@ngrx/store\";\nimport {ProjectStateModule} from \"../../store\";\n\n@Injectable()\nexport class ProjectInterceptor implements HttpInterceptor {\n    constructor(\n        private projectFacade: ProjectFacade,\n        private readonly store: Store<{ project: ProjectStateModule }>,\n        ) {\n    }\n\n    intercept(\n        request: HttpRequest<unknown>,\n        next: HttpHandler\n    ): Observable<HttpEvent<unknown>> {\n        const project = this.projectFacade.getProject();\n\n\n        if (project) {\n            return next.handle(\n                request.clone({\n                    setHeaders: {project: String(project.id)}\n                })\n            );\n        }\n\n        return next.handle(request);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}