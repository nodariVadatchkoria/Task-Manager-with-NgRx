{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { currentProject } from \"../../../../../../store/rxProject/project.selectors\";\nimport { Subject, takeUntil } from \"rxjs\";\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"../../../../../../core/services/users.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../../../../../core/services/project.service\";\nimport * as i5 from \"@ngrx/store\";\nimport * as i6 from \"../../../../../../facades/project-facade.service\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/forms\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/button\";\nexport class UserEditComponent {\n  constructor(\n  // public dialogRef: MatDialogRef<UserEditComponent>,\n  dialog, usersService, router, projectService, store, projectFacade) {\n    this.dialog = dialog;\n    this.usersService = usersService;\n    this.router = router;\n    this.projectService = projectService;\n    this.store = store;\n    this.projectFacade = projectFacade;\n    this.sub$ = new Subject();\n    this.projectUsersIds = [];\n    this.dataSource = new MatTableDataSource();\n    this.form = new FormGroup({\n      id: new FormControl(null),\n      firstName: new FormControl(null, [Validators.required]),\n      lastName: new FormControl(null, [Validators.required]),\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      identityNumber: new FormControl(null, [Validators.required]),\n      mobileNumber: new FormControl(null, [Validators.required]),\n      isActive: new FormControl(true)\n    });\n  }\n  get projectId() {\n    return this.projectFacade.getProject().id;\n    return this.store.select(currentProject).subscribe(project => {\n      if (project) {\n        return project.id;\n      } else {\n        return null;\n      }\n    });\n  }\n  getCurrentProjectUsers() {\n    this.projectService.getProjectUsersId(+this.projectId).pipe(takeUntil(this.sub$)).subscribe(users => {\n      this.projectUsersIds = users.map(user => user.id);\n      this.dataSource.data = users;\n    });\n  }\n  ngOnInit() {\n    this.store.select(currentProject).subscribe(project => {\n      if (project) {\n        this.getCurrentProjectUsers();\n      }\n    });\n  }\n  save() {\n    this.form.markAllAsTouched();\n    if (this.form.invalid) {\n      return;\n    }\n    this.usersService.createUser(this.form.value).subscribe(res => {\n      // this.dialogRef.close(res)\n    });\n  }\n  close() {\n    this.router.navigate(['/application/setting/users']);\n  }\n}\nUserEditComponent.ɵfac = function UserEditComponent_Factory(t) {\n  return new (t || UserEditComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.UsersService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.ProjectService), i0.ɵɵdirectiveInject(i5.Store), i0.ɵɵdirectiveInject(i6.ProjectFacade));\n};\nUserEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UserEditComponent,\n  selectors: [[\"app-user-edit\"]],\n  decls: 30,\n  vars: 1,\n  consts: [[1, \"container\"], [1, \"flex\"], [3, \"formGroup\"], [\"matInput\", \"\", \"placeholder\", \"First name\", \"formControlName\", \"firstName\"], [\"matInput\", \"\", \"placeholder\", \"Last name\", \"formControlName\", \"lastName\"], [\"matInput\", \"\", \"placeholder\", \"Identity Number\", \"formControlName\", \"identityNumber\"], [\"matInput\", \"\", \"placeholder\", \"Email\", \"formControlName\", \"email\"], [\"matInput\", \"\", \"placeholder\", \"Mobile Number\", \"formControlName\", \"mobileNumber\"], [\"mat-dialog-actions\", \"\"], [\"mat-button\", \"\", 3, \"click\"]],\n  template: function UserEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n      i0.ɵɵtext(2, \"New User\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"form\", 2)(5, \"mat-form-field\")(6, \"mat-label\");\n      i0.ɵɵtext(7, \"First Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"mat-form-field\")(10, \"mat-label\");\n      i0.ɵɵtext(11, \"Last Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"mat-form-field\")(14, \"mat-label\");\n      i0.ɵɵtext(15, \"Identity Number\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"mat-form-field\")(18, \"mat-label\");\n      i0.ɵɵtext(19, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(20, \"input\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"mat-form-field\")(22, \"mat-label\");\n      i0.ɵɵtext(23, \"Mobile Number\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(24, \"input\", 7);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(25, \"div\", 8)(26, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function UserEditComponent_Template_button_click_26_listener() {\n        return ctx.close();\n      });\n      i0.ɵɵtext(27, \"Cancel\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function UserEditComponent_Template_button_click_28_listener() {\n        return ctx.save();\n      });\n      i0.ɵɵtext(29, \"Save\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n    }\n  },\n  dependencies: [i7.MatFormField, i7.MatLabel, i8.ɵNgNoValidate, i8.DefaultValueAccessor, i8.NgControlStatus, i8.NgControlStatusGroup, i9.MatInput, i8.FormGroupDirective, i8.FormControlName, i10.MatButton, i1.MatDialogActions],\n  styles: [\"h1[_ngcontent-%COMP%] {\\n  text-align: center;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvYXBwbGljYXRpb24vcHJvamVjdC1zZXR0aW5nL3Byb2plY3QtdXNlcnMvdXNlci91c2VyLWFkZC1lZGl0L3VzZXItZWRpdC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFBO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJoMXtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","currentProject","Subject","takeUntil","MatTableDataSource","UserEditComponent","constructor","dialog","usersService","router","projectService","store","projectFacade","id","firstName","required","lastName","email","identityNumber","mobileNumber","isActive","projectId","getProject","select","subscribe","project","getCurrentProjectUsers","getProjectUsersId","pipe","sub$","users","projectUsersIds","map","user","dataSource","data","ngOnInit","save","form","markAllAsTouched","invalid","createUser","value","res","close","navigate","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/pages/application/project-setting/project-users/user/user-add-edit/user-edit.component.ts","/Users/macbookpro/Desktop/GitHubRepo/Task-Manager-with-NgRx/src/app/pages/application/project-setting/project-users/user/user-add-edit/user-edit.component.html"],"sourcesContent":["import {Component, Injectable, OnInit} from '@angular/core';\nimport {MatDialogRef, MatDialog, MatDialogClose} from \"@angular/material/dialog\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {UsersService} from \"../../../../../../core/services/users.service\";\nimport {Router} from \"@angular/router\";\nimport {currentProject} from \"../../../../../../store/rxProject/project.selectors\";\nimport {Subject, takeUntil} from \"rxjs\";\nimport {IBoard, User} from \"../../../../../../core/interfaces\";\nimport {ProjectStateModule} from \"../../../../../../store\";\nimport {Store} from \"@ngrx/store\";\nimport {ProjectService} from \"../../../../../../core/services/project.service\";\nimport {ProjectFacade} from \"../../../../../../facades/project-facade.service\";\nimport {MatTableDataSource} from \"@angular/material/table\";\n\n\n@Component({\n  selector: 'app-user-edit',\n  templateUrl: './user-edit.component.html',\n  styleUrls: ['./user-edit.component.scss']\n})\n\nexport class UserEditComponent implements OnInit {\n\n\n  constructor(\n    // public dialogRef: MatDialogRef<UserEditComponent>,\n    public dialog: MatDialog,\n   private usersService: UsersService,\n   private router: Router,\n    private projectService: ProjectService,\n    private store: Store<{ project: ProjectStateModule }>,\n    private projectFacade: ProjectFacade,\n  ) { }\n  sub$ = new Subject();\n  projectUsersIds: number[] = [];\n  dataSource = new MatTableDataSource<IBoard>();\n  get projectId(){\n    return this.projectFacade.getProject().id\n    return this.store.select(currentProject).subscribe((project)=>{\n      if (project){\n        return project.id\n      }\n      else{\n        return null\n      }\n    })\n  }\n  getCurrentProjectUsers() {\n    this.projectService.getProjectUsersId(+this.projectId)\n        .pipe(takeUntil(this.sub$))\n        .subscribe(users => {\n          this.projectUsersIds = users.map((user: User) => user.id)\n          this.dataSource.data = users\n        })\n  }\n\n  ngOnInit(): void {\n    this.store.select(currentProject)\n        .subscribe((project)=>{\n          if (project){\n            this.getCurrentProjectUsers();\n          }\n        })\n    }\n\n  form: FormGroup = new FormGroup({\n    id: new FormControl(null,),\n    firstName: new FormControl(null, [Validators.required]),\n    lastName: new FormControl(null, [Validators.required]),\n    email: new FormControl(null, [Validators.required, Validators.email]),\n    identityNumber: new FormControl(null, [Validators.required]),\n    mobileNumber: new FormControl(null, [Validators.required]),\n    isActive: new FormControl(true, ),\n  });\n\n\n\n  save() {\n    this.form.markAllAsTouched()\n    if (this.form.invalid) {\n      return\n    }\n    this.usersService.createUser(this.form.value)\n      .subscribe((res) => {\n        // this.dialogRef.close(res)\n      })\n  }\n\n  close() {\n    this.router.navigate(['/application/setting/users'])\n  }\n}\n","<div class=\"container\">\n  <h1>New User</h1>\n  <div class=\"flex\">\n    <form [formGroup]=\"form\">\n      <mat-form-field>\n        <mat-label>First Name</mat-label>\n        <input matInput placeholder=\"First name\" formControlName=\"firstName\">\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Last Name</mat-label>\n        <input matInput placeholder=\"Last name\" formControlName=\"lastName\">\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Identity Number</mat-label>\n        <input matInput placeholder=\"Identity Number\" formControlName=\"identityNumber\">\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Email</mat-label>\n        <input matInput placeholder=\"Email\" formControlName=\"email\">\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Mobile Number</mat-label>\n        <input matInput placeholder=\"Mobile Number\" formControlName=\"mobileNumber\">\n      </mat-form-field>\n    </form>\n  </div>\n  <div mat-dialog-actions>\n    <button mat-button (click)=\"close()\" >Cancel</button>\n    <button mat-button (click)=\"save()\">Save</button>\n  </div>\n\n</div>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}