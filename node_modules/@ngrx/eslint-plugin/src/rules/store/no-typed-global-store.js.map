{"version":3,"file":"no-typed-global-store.js","sourceRoot":"","sources":["../../../../../../modules/eslint-plugin/src/rules/store/no-typed-global-store.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAA6B;AAC7B,mDAAgD;AAChD,qCAA+D;AAElD,QAAA,YAAY,GAAG,cAAc,CAAC;AAC9B,QAAA,mBAAmB,GAAG,qBAAqB,CAAC;AAKzD,qBAAe,IAAA,yBAAU,EAAsB;IAC7C,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI;IACjC,IAAI,EAAE;QACJ,IAAI,EAAE,YAAY;QAClB,cAAc,EAAE,IAAI;QACpB,UAAU,EAAE,OAAO;QACnB,IAAI,EAAE;YACJ,WAAW,EAAE,uCAAuC;YACpD,WAAW,EAAE,MAAM;YACnB,UAAU,EAAE,IAAI;SACjB;QACD,MAAM,EAAE,EAAE;QACV,QAAQ;YACN,GAAC,oBAAY,IACX,qEAAqE;YACvE,GAAC,2BAAmB,IAAG,8BAA8B;eACtD;KACF;IACD,cAAc,EAAE,EAAE;IAClB,MAAM,EAAE,UAAC,OAAO;QACd,OAAO;YACL,OAAO;;gBACG,IAAA,KAAqB,IAAA,qBAAa,EAAC,OAAO,CAAC,YAA3B,EAAhB,WAAW,mBAAG,EAAE,KAAA,CAA4B;wCAGhC,cAAc;oBAEhC,IACE,CAAC,IAAA,yBAAiB,EAAC,cAAc,CAAC;wBAClC,CAAC,cAAc,CAAC,cAAc,EAC9B;;qBAED;oBAEO,IAAA,cAAc,GAAK,cAAc,eAAnB,CAAoB;oBAE1C,OAAO,CAAC,MAAM,CAAC;wBACb,IAAI,EAAE,cAAc;wBACpB,SAAS,EAAE,oBAAY;wBACvB,OAAO,EAAE;4BACP;gCACE,SAAS,EAAE,2BAAmB;gCAC9B,GAAG,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,EAA5B,CAA4B;6BAC7C;yBACF;qBACF,CAAC,CAAC;;;oBArBL,KAEK,IAAA,gBAAA,SAAA,WAAW,CAAA,wCAAA;wBADI,IAAA,cAAc,sDAAA;gCAAd,cAAc;qBAqBjC;;;;;;;;;YACH,CAAC;SACF,CAAC;IACJ,CAAC;CACF,CAAC,CAAC","sourcesContent":["import * as path from 'path';\nimport { createRule } from '../../rule-creator';\nimport { getNgRxStores, isTSTypeReference } from '../../utils';\n\nexport const noTypedStore = 'noTypedStore';\nexport const noTypedStoreSuggest = 'noTypedStoreSuggest';\n\ntype MessageIds = typeof noTypedStore | typeof noTypedStoreSuggest;\ntype Options = readonly [];\n\nexport default createRule<Options, MessageIds>({\n  name: path.parse(__filename).name,\n  meta: {\n    type: 'suggestion',\n    hasSuggestions: true,\n    ngrxModule: 'store',\n    docs: {\n      description: 'The global store should not be typed.',\n      recommended: 'warn',\n      suggestion: true,\n    },\n    schema: [],\n    messages: {\n      [noTypedStore]:\n        '`Store` should not be typed, use `Store` (without generic) instead.',\n      [noTypedStoreSuggest]: 'Remove generic from `Store`.',\n    },\n  },\n  defaultOptions: [],\n  create: (context) => {\n    return {\n      Program() {\n        const { identifiers = [] } = getNgRxStores(context);\n\n        for (const {\n          typeAnnotation: { typeAnnotation },\n        } of identifiers) {\n          if (\n            !isTSTypeReference(typeAnnotation) ||\n            !typeAnnotation.typeParameters\n          ) {\n            continue;\n          }\n\n          const { typeParameters } = typeAnnotation;\n\n          context.report({\n            node: typeParameters,\n            messageId: noTypedStore,\n            suggest: [\n              {\n                messageId: noTypedStoreSuggest,\n                fix: (fixer) => fixer.remove(typeParameters),\n              },\n            ],\n          });\n        }\n      },\n    };\n  },\n});\n"]}